<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book [
      <!-- Some useful entities borrowed from HTML -->
        <!ENTITY ndash  "&#x2013;">
        <!ENTITY mdash  "&#x2014;">
        <!ENTITY hellip "&#x2026;">
        
        <!-- Useful for describing APIs -->
        <!ENTITY COPY   '<command>COPY</command>'>
        <!ENTITY DELETE '<command>DELETE</command>'>
        <!ENTITY GET    '<command>GET</command>'>
        <!ENTITY HEAD   '<command>HEAD</command>'>
        <!ENTITY PUT    '<command>PUT</command>'>
        <!ENTITY POST   '<command>POST</command>'> 
        
        <!-- Authentication endpoints -->
        <!ENTITY ENDPOINT-US "https://identity.api.rackspacecloud.com/v1.1/">
        <!ENTITY ENDPOINT-US-20 "https://identity.api.rackspacecloud.com/v2.0/">   
        
]>
<book xmlns="http://docbook.org/ns/docbook"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:svg="http://www.w3.org/2000/svg"
  xmlns:m="http://www.w3.org/the key 1998/Math/MathML"
  xmlns:html="http://www.w3.org/1999/xhtml" xml:id="cf-devguide"
  version="5.0">
  <?rax pdf.url="../../../cf-devguide-latest.pdf"?>
  <?rax title.font.size="35px"
      pdf.url="../../cf-devguide.pdf" 
      status.bar.text.font.size="40px"
      canonical.url.base="http://docs.rackspace.com/files/api/v1/cf-devguide/content"?>
  <title>Rackspace Cloud Files™ Developer Guide</title>
  <info>
    <author>
      <personname>
        <firstname/>
        <surname/>
      </personname>
      <affiliation>
        <orgname>Rackspace Cloud</orgname>
      </affiliation>
    </author>
    <copyright>
      <year>2009</year>
      <year>2010</year>
      <year>2011</year>
      <year>2012</year>
      <year>2013</year>
      <year>2014</year>
      <year>2015</year>
      <holder>Rackspace US, Inc.</holder>
    </copyright>
    <releaseinfo>API v1</releaseinfo>
    <productname>Rackspace Cloud Files™</productname>
    <pubdate>2015-05-01</pubdate>
    <legalnotice role="rs-api">
      <annotation>
        <remark>Copyright details are filled in by the
          template.</remark>
      </annotation>
    </legalnotice>
    <abstract>
      <para> This document is intended for <emphasis role="bold"
          >software</emphasis> developers interested in developing
        applications using the Rackspace Cloud Files™ Application
        Programming Interface (<abbrev>API</abbrev>). </para>
    </abstract>
    <revhistory>
      <revision>
        <date>2015-05-01</date>
        <revdescription>
          <itemizedlist>
            <listitem>
              <para>Updated <link
                  xlink:href="http://docs.rackspace.com/files/api/v1/cf-devguide/content/POST_updateaobjmeta_v1__account___container___object__objectServicesOperations_d1e000.html"
                  >Create or update object metadata</link> to remove the sentence "You cannot use
                this operation to change other headers, such as Content-Type." as this statement is
                not true. You can update header information with this operation.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2015-04-23</date>
        <revdescription>
          <itemizedlist>
            <listitem>
              <para>Corrected links in <link
                  xlink:href="http://docs.rackspace.com/files/api/v1/cf-devguide/content/assigningRoles.html"
                  >Assigning roles to account users</link>.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2015-03-23</date>
        <revdescription>
          <itemizedlist>
            <listitem>
              <para>Corrected the URI in the table in  <xref linkend="CDN_Object_Services"/> to
                include the container information and added a warning with information to make sure
                that you are using the CDN management services URIs for this
                  <command>DELETE</command> operation.</para>
            </listitem>
            <listitem>
              <para>Corrected the URI in <link
                  xlink:href="http://docs.rackspace.com/files/api/v1/cf-devguide/content/DELETE_deleteCDNobject_v1__account___object__CDN_Object_Services.html"
                  >Delete CDN-enabled object</link> to include the container information and added
                additional information to this operation description with updated request and
                response examples.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision xmlns:m="http://www.w3.org/1998/Math/MathML"
        xmlns:wadl="http://wadl.dev.java.net/2009/02">
        <date>2015-03-04</date>
        <revdescription>
          <para>Removed the London endpoint for the Rackspace Cloud Identity service. Rackspace now
            has one global endpoint for authentication. See <xref linkend="Authentication-d1e639"
            />.</para>
        </revdescription>
      </revision>
      <revision>
        <date>2015-02-26</date>
        <revdescription>
          <itemizedlist>
            <listitem>
              <para>Added the account to account copy capability described in <xref
                  linkend="acctToAcctCOPY-de101"/>.</para>
            </listitem>
            <listitem>
              <para>Added the <code>Destination-Account</code> header, which is used to make an
                account to account copy, to the <command>COPY</command> command request parameters
                in <link
                  xlink:href="http://docs.rackspace.com/files/api/v1/cf-devguide/content/COPY_copyobject_v1__account___container___object__objectServicesOperations_d1e000.html"
                  >Copy object</link>.</para>
            </listitem>
            <listitem>
              <para>Added the <code>X-Copy-From-Account</code> header, which is used to make an
                account to account copy, to the <command>PUT</command> command request parameters in
                  <link
                  xlink:href="http://docs.rackspace.com/files/api/v1/cf-devguide/content/PUT_createobject_v1__account___container___object__objectServicesOperations_d1e000.html"
                  >Create or update object</link>. </para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2015-01-14</date>
        <revdescription>
          <para>Updated <xref linkend="Retrieving_Auth_Token"/> with information about using
            multi-factor authentication for added security when a user authenticates with
              <code>username</code> and <code>password</code> credentials.</para>
        </revdescription>
      </revision>
      <revision>
        <date>2015-01-07</date>
        <revdescription>
          <para>Removed the section "Bulk importing of data". Starting January 1, 2015, this service
            is not available. </para>
        </revdescription>
      </revision>
      <revision>
        <date>2014-12-17</date>
        <revdescription>
          <para>In the description for the operation to CDN-enable and CDN-disable a container at
              <link
              xlink:href="http://docs.rackspace.com/files/api/v1/cf-devguide/content/PUT_enableDisableCDNcontainer_v1__account___container__CDN_Container_Services-d1e2632.html"
              >"CDN-enable and CDN-disable a container"</link>, corrected the <code>X-Cdn-Uri</code>
            response parameter type to <code>string</code> and noted that this response parameter is
              <code>required</code>.</para>
        </revdescription>
      </revision>
      <revision>
        <date>2014-12-03</date>
        <revdescription>
          <para>Updated the table in <xref linkend="Absolute_Limits-d1e942"/> for the rate limit for
            write operations to read "100 <emphasis role="italic">write</emphasis> operations per
            second <emphasis role="italic">per container</emphasis>" rather than "100 operations per
            second".</para>
        </revdescription>
      </revision>
      <revision>
        <date>2014-11-11</date>
        <revdescription>
          <para linkend="Set_Account_Metadata-d1a4460">Updated <xref
              linkend="Set_Account_Metadata-d1a4460"/> by adding information about changing
              <code>X-Account-Meta-Temp-Url-Key</code> and the use of a second key,
              <code>X-Account-Meta-Temp-Url-Key-2</code>.</para>
        </revdescription>
      </revision>
      <revision>
        <date>2014-09-05</date>
        <revdescription>
          <itemizedlist>
            <listitem>
              <para>Updated <xref linkend="CORS-d1e1300"/>. This section now includes the following
                subsections to describe the available access control headers: <itemizedlist>
                  <listitem>
                    <para><xref linkend="CORS_Container_Headers-d1e1300"/></para>
                  </listitem>
                  <listitem>
                    <para><xref linkend="Assigning_CORS_Headers_to_Requests-d1e2120"/></para>
                  </listitem>
                </itemizedlist></para>
            </listitem>
            <listitem>
              <para>Added a note to <xref linkend="Create_Static_Website-dle4000"/> about how to
                disable a static website that you have created. </para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>		<revision>
        <date>2014-08-28</date>
        <revdescription>
          <itemizedlist>
            <listitem>
              <para>Added an example request to <olink targetdoc="cf-devguide"
                  targetptr="Extract_Archive-d1e2338">“Extracting archive files”</olink>.</para>
            </listitem>
            <listitem>
              <para>Updated <olink targetdoc="cf-devguide" targetptr="FormPost-d1a555"
                  >“FormPost”</olink> by adding the following information: <itemizedlist>
                  <listitem>
                    <para>Additional information about the <code>max_file_count</code> parameter
                    </para>
                  </listitem>
                  <listitem>
                    <para>A description for the <code>x-delete-at</code> and
                        <code>x-delete-after</code> parameters </para>
                    <para>These parameters allow you to set the expiration for an object that is
                      uploaded using FormPost.</para>
                  </listitem>
                </itemizedlist></para>
            </listitem>
            <listitem>
              <para>Corrected the link to service access endpoint information in <link
                  xlink:href="http://docs.rackspace.com/files/api/v1/cf-devguide/content/GET_listCDNcontainers_v1__account__CDN_Account_Operations-d1e2397.html"
                  >"List CDN-enabled containers".</link></para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision> 
      <revision>
        <date>2014-07-25</date>
        <revdescription>
          <para xmlns:wadl="http://wadl.dev.java.net/2009/02">Corrected an error in the Python
            example to create a TempURL in <xref linkend="Create_TempURL-d1a444"/>. (Removed AMP
            from the last <code>print</code> in the example.)</para>
        </revdescription>
      </revision>
      <revision xmlns:wadl="http://wadl.dev.java.net/2009/02">
        <date>2014-07-22</date>
        <revdescription>
          <para>Added a link to guidance on choosing a regionalized endpoint in <xref
              linkend="Service-Access-Endpoints-d1e003"/>.</para>
        </revdescription>
      </revision>
      <revision>
        <date>2014-07-18</date>
        <revdescription>
          <itemizedlist>
            <listitem>
              <para>Changed the format for CDN logs from storing the month as 3 letters to using the
                following format:  DD/MM/YYYY (for example, 16/07/2014).</para>
            </listitem>
            <listitem>
              <para>Added <xref linkend="cdnAccessLogDelivery-d1e01"/>.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2014-04-30</date>
        <revdescription>
          <itemizedlist>
            <listitem>
              <para>Updated the TTL maximum value to 1 year (31536000 seconds) instead of 50 years
                (1577836800 seconds) throughout <xref
                  linkend="API_Operations_for_CDN_Services-d1e2386"/>.</para>
            </listitem>
            <!--           <listitem>
              <para>Added additional information to the description of the
                  <code>X-Container-Sync-Key</code> and <code>X-Container-Sync-To</code> headers in
                  <xref linkend="Containers-d1e458"/>.</para> 
            </listitem> -->
            <listitem>
              <para>Removed Chapter 14, "Examples using cURL". This information is now included with
                other cURL examples in the new <citetitle>Cloud Files Getting Started
                  Guide</citetitle>. </para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2014-04-07</date>
        <revdescription>
          <itemizedlist>
            <listitem>
              <para>Added <xref linkend="Container_ACLs-d1e2222"/>.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>

      <revision>
        <date>2014-04-01</date>
        <revdescription>
          <itemizedlist>
            <listitem>
              <para>Added header descriptions to the operations in <xref
                  linkend="API_Operations_d1e000"/>.</para>
            </listitem>
            <listitem>
              <para>Updated the "Bulk importing of data"section to show the availability of using
                this feature in Sydney.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2014-02-21</date>
        <revdescription>
          <itemizedlist>
            <listitem>
              <para>Updated the table in <xref linkend="Absolute_Limits-d1e942"/> to include the
                rate limit for write operations, which is 100 operations per second per
                container.</para>
            </listitem>
            <listitem>
              <para>Updated the following object methods to include the
                  <code>X-Detect-Content-Type</code> header in the request:</para>
              <itemizedlist>
                <listitem>
                  <para><command>PUT</command> (Create or update object)</para>
                </listitem>
                <listitem>
                  <para><command>POST</command> (Update object metadata)</para>
                </listitem>
                <listitem>
                  <para><command>COPY</command> (Copy object)</para>
                </listitem>
              </itemizedlist>
              <para>If you set this header to <code>True</code>, the <code>Content-Type</code> that
                is sent in the request (if any) is ignored, and <code>Content-Type</code> is guessed
                by using the Python mimetypes library based on the object path. </para>
            </listitem>
            <listitem>
              <para>Reworked <xref linkend="API_Operations_d1e000"/> and <xref
                  linkend="API_Operations_for_CDN_Services-d1e2386"/> by using Web Application
                Description Language (WADL) files for the resource and method descriptions.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2013-12-31</date>
        <revdescription>
          <itemizedlist>
            <listitem>
              <para>Updated the instructions for locating the API key in the Cloud Control Panel in
                  <xref linkend="Retrieving_Auth_Token" xmlns:m="http://www.w3.org/1998/Math/MathML"
                />.</para>
            </listitem>
            <listitem>
              <para>Added a table that lists and briefly describes all API operations. Also added
                tables showing the API operations at the beginning of each section that describes
                the operations.</para>
            </listitem>
            <listitem>
              <para>Added service access endpoints for the CDN
                management service component to <xref
                  linkend="Service-Access-Endpoints-d1e003"/>.</para>
            </listitem>
            <listitem>
              <para>Updated account information in <xref
                  linkend="Service-Access-Endpoints-d1e003"/> to show
                  MossoCloudFS_<replaceable>aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee</replaceable>
                rather than <replaceable>1234</replaceable>.</para>
            </listitem>
            <listitem>
              <para>Added <xref linkend="Service_contract_versions"
                />.</para>
            </listitem>
            <listitem>
              <para>Added <xref linkend="Absolute_Limits-d1e942"
                />.</para>
            </listitem>
            <listitem>
              <para>Added <xref
                  linkend="Request_Response_Types-d1e903"/>.</para>
            </listitem>
            <listitem>
              <para>Added the section for the operation to create or update account metadata in
                  <xref linkend="API_Operations_d1e000"/>.</para>
            </listitem>
            <listitem>
              <para>Added the section for the operation to delete account metadata in   <xref
                  linkend="API_Operations_d1e000"/>.</para>
            </listitem>
            <listitem>
              <para>In all examples, updated the <code>X-Auth-Token</code> header to use the current
                format returned by an authentication request (no dashes). Also updated examples to
                use real values for <replaceable>account</replaceable>,
                  <replaceable>container</replaceable>, and <replaceable>object</replaceable>. </para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2013-11-26</date>
        <revdescription>
          <itemizedlist>
            <listitem>
              <para>Added <xref linkend="Create-Large-Objects-d10e"/> with more information about
                dynamic large objects and static large objects.</para>
            </listitem>
            <listitem>
              <para>Updated <xref linkend="Extract_Archive-d1e2338"/> to include a note about using
                a blank <code>Content-Type</code> header to have Cloud Files determine the file type
                for the archive.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2013-11-22</date>
        <revdescription>
          <para>
            <itemizedlist>
              <listitem>
                <para>Added service catalog information for
                    <code>cloudfilesCDN</code> endpoints (<xref
                    linkend="Service-Access-Endpoints-d1e003"
                  />).</para>
              </listitem>
              <listitem>
                <para>Made miscellaneous updates throughout this book
                  to improve wording and consistency.</para>
              </listitem>
            </itemizedlist>
          </para>
        </revdescription>
      </revision>
      <revision>
        <date>2013-11-01</date>
        <revdescription>
          <itemizedlist>
            <listitem>
              <para>Replaced references to <code>X-Storage-Url</code>
                and <code>X-Cdn-Management–Url</code> throughout this
                document with references to the
                  <code>cloudFiles</code> and
                  <code>cloudFilesCDN</code> endpoints in the service
                catalog based on use of Identity v2.0 rather than
                Identity v1.0.</para>
            </listitem>
            <listitem>
              <para>Updated <xref linkend="Authentication-d1e433"/> to
                include new references to additional information about
                the service access endpoints and the service catalog.
              </para>
            </listitem>
            <listitem>
              <para>Updated authentication requests to use Identity v2.0.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2013-10-25</date>
        <revdescription>
          <itemizedlist>
            <listitem>
              <para>Added <xref
                  linkend="Service-Access-Endpoints-d1e003"/>, which
                includes all endpoints for Cloud Files including the
                newest one in Hong Kong.</para>
            </listitem>
            <listitem>
              <para>Updated <xref linkend="Authentication-d1e639"/> to
                show information for Rackspace Identity v2.0.</para>
            </listitem>
            <listitem>
              <para>Updated <xref linkend="Create_the_Form-d1a777"/> to indicate that the value of
                the <code>redirect</code> parameter can be empty to indicate that no redirect is
                included on the form. </para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2013-09-26</date>
        <revdescription>
          <itemizedlist>
            <listitem>
              <para>Added <xref linkend="RBAC"/>.</para>
            </listitem>
            <listitem>
              <para>Updated <xref linkend="CORS-d1e1300"/>.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2013-09-19</date>
        <revdescription>
          <itemizedlist>
            <listitem>
              <para>Updated responses to show
                  <code>application/json</code> in <xref
                  linkend="Bulk_Delete-d1e2338.html"/>.</para>
            </listitem>
            <listitem>
              <para>Added the <code>X-Container-Meta-Web-Listings</code>,
                  <code>X-Container-Meta-Web-Listings-Css</code>, and
                  <code>X-Container-Meta-Web-Directory-Type</code> headers to <xref
                  linkend="Create_Static_Website-dle4000"/>.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2013-07-18</date>
        <revdescription>
          <itemizedlist>
            <listitem>
              <para linkend="Create_the_Form-d1a777">Clarified information about the
                  <code>redirect</code> and <code>expires</code> parameters in <xref
                  linkend="Create_the_Form-d1a777"/>. </para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2013-06-27</date>
        <revdescription>
          <itemizedlist>
            <listitem>
              <para>Changed references for authentication to point to Cloud Identity v2.0.</para>
            </listitem>
            <listitem>
              <para>In <xref linkend="CDN_Object_Services"/> in the section for the operation to
                delete a CDN-enabled object, added a note about removing a CDN-enabled container by
                setting <code>X-Cdn-Enabled</code> to <code>False</code> in the
                  <command>HEAD</command> operation.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2013-06-14</date>
        <revdescription>
          <itemizedlist>
            <listitem>
              <para>Added information about authentication, v1 and v2, in <xref
                  linkend="Authentication-d1e639"/>.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2013-05-20</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Added a link in <xref linkend="Overview-d1e70"/>
                to the Knowledge Center article, "Best Practices for
                Using Cloud Files," at <link
                  xlink:href="http://www.rackspace.com/knowledge_center/article/best-practices-for-using-cloud-files"
                  >http://www.rackspace.com/knowledge_center/article/best-practices-for-using-cloud-files</link>.</para>
            </listitem>
            <listitem>
              <para>Added <xref linkend="Container_Quotas-d1e2222"/>.</para>
            </listitem>
            <listitem>
              <para>Created a new section <xref linkend="objectServicesOperations_d1e000"/>. This
                section includes new and previously existing information specifically related to
                storage objects.</para>
            </listitem>
            <listitem>
              <para>Added <xref linkend="Static_Large_Object-d1e2226"
                />.</para>
            </listitem>
            <listitem>
              <para>Added <xref linkend="Bulk_Operations-d1e2338"
                />.</para>
            </listitem>
            <listitem>
              <para>Added <xref
                  linkend="TempURL_File_Name_Overrides-d1e213"
                />.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2013-02-01</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Changed the location of SDKs. Added a note about object metadata behavior. </para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2012-12-05</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Added <xref linkend="iOS-Streaming-d1f3725"/>. </para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2012-11-30</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Fixed internal linking. </para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2012-11-16</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Added the <code>end_marker</code> list parameter and CORS container headers. </para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2012-10-31</date>
        <revdescription>
          <para>Updated language binding language and links.</para>
        </revdescription>
      </revision>
      <revision>
        <date>2012-10-01</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Added <xref linkend="Acess_Log_Delivery-d1e2200"/>. </para>
            </listitem>
            <listitem>
              <para>Updated the authentication point.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2012-09-25</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Added multi-region, legal, and CDN charge note.
              </para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2012-08-13</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Changed TTL limits and CDN URLs. </para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2012-07-23</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Added CDN object purge limits. </para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2012-06-12</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Added the "Bulk importing of data" section.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2012-06-01</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Added <xref linkend="Object_Versioning-e1e3230"/>. </para>
            </listitem>
            <listitem>
              <para>Added <xref linkend="StaticWeb"/>.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2012-04-25</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Added <xref linkend="TempURL-d1a4450"/>. </para>
            </listitem>
            <listitem>
              <para>Added <xref linkend="FormPost-d1a555"/>.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2012-02-06</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Revised content to clarify issues brought up in doc tickets. Formatted
                  <command>HEAD</command> like other commands. Standardized on URL. Added expiring
                objects and service net information.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2012-01-12</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Revised content to add information about expiring object functionality and to
                clarify issues brought up in doc tickets, including adding more cross-references for
                finding language bindings.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2011-11-15</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Revised information about how to perform a CDN purge, indicating that you must
                contact support to request a container purge operation.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2011-10-21</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Added more detail about reasons to perform a CDN
                purge, clarifying that it is not required for deleting
                objects.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2011-09-13</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Added information about streaming containers to support the new streaming
                feature, including changing examples to match the streaming headers and URLs
                returned.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2011-06-29</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>In cURL authentication requests, changed <code>X-Auth-Token</code> to
                  <code>X-Auth-Key</code> in examples.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2011-06-15</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Added best practices for authentication
                tokens.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2011-05-24</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Added information about new headers including CORS
                headers.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2011-04-20</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Updated the <command>HEAD</command> operation to return a 200 response code
                instead of a 204 response code on an object metadata request.</para>
            </listitem>
            <listitem>
              <para>Updated the TTL maximum value to 50 years instead of 3 days, the minimum TTL to
                15 minutes (900 seconds), and the default to 72 hours instead of 24 hours.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2011-03-25</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Added information about large object
                support.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2011-03-17</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Added information about container metadata.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2011-03-10</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Added a section about retrieving an SSL URL for CDN-enabled containers that are
                using the HTTPS protocol.</para>
            </listitem>
            <listitem>
              <para>Updated examples to contain SSL as
                appropriate.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2011-02-25</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Added information about the edge purge capability
                for CDN-enabled containers and objects.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2011-02-18</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Fixed error in the header range example that
                stated first instead of last when fetching a portion
                of the data. </para>
            </listitem>
            <listitem>
              <para>Updated CDN URLs to match new format.</para>
            </listitem>
            <listitem>
              <para>Fixed error referring to <code>X-Auth-User</code>
                instead of <code>X-Auth-Key</code>. </para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2011-01-12</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para> Removed references to access control list (ACL). </para>
            </listitem>
            <listitem>
              <para> Fixed error in examples referring to
                  <code>X-Auth-Key</code> where it should be
                  <code>X-Auth-Token</code>. </para>
            </listitem>
            <listitem>
              <para> Added section numbers. </para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2011-01-04</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para> Expanded authentication information for UK
                release. </para>
            </listitem>
            <listitem>
              <para> Added <parameter>delimiter</parameter> as a Query
                Parameter and server-side object copy example. </para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2008-05-05</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Initial release.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
    </revhistory>
    <raxm:metadata xmlns:raxm="http://docs.rackspace.com/api/metadata">
      <raxm:displayname>API Developer Guide</raxm:displayname>
      <raxm:product version="v1">files</raxm:product>
      <raxm:priority>20</raxm:priority>
    </raxm:metadata>
  </info>
  <chapter xml:id="Overview-d1e70">
    <title>Overview</title>
    <info>
      <raxm:metadata
        xmlns:raxm="http://docs.rackspace.com/api/metadata">
        <raxm:type>concept</raxm:type>
        <raxm:product version="v1">files</raxm:product>
        <raxm:priority>1</raxm:priority>
      </raxm:metadata>
    </info>
    <para>Rackspace Cloud Files™ is an affordable, redundant, scalable, and dynamic storage service.
      The core storage system is designed to provide a secure, network-accessible way to store an
      unlimited number of files. Each file can be as large as 5 gigabytes. You can store as much as
      you want and pay only for storage space that you actually use.</para>
    <para>Cloud Files also provides a simple yet powerful way to publish and distribute content
      behind a content delivery network (CDN). As a Cloud Files user, you get access to this network
      automatically.</para>
    <para>Cloud Files enables you to store and retrieve files and CDN-enabled content through a
      RESTful (Representational State Transfer) web services interface. There are also
      language-specific application programming interfaces (APIs) that use the RESTful API and make
      it easy for developers to integrate into their applications.</para>
    <para>For more details about the Cloud Files service, see <link
        xlink:href="http://www.rackspace.com/cloud/files/"
        >http://www.rackspace.com/cloud/files/</link> and the Knowledge Center article <link
        xlink:href="http://www.rackspace.com/knowledge_center/article/best-practices-for-using-cloud-files"
        >Best Practices for Using Cloud Files</link>. </para>
    <para>Rackspace welcomes feedback, comments, and bug reports at
        <link xlink:href="mailto:support@rackspacecloud.com"
        >support@rackspacecloud.com</link>. </para>
    <section xml:id="Intended_Audience-d1e97">
      <title>Intended audience</title>
      <para>This guide is intended to assist software developers who want to develop applications
        using the Rackspace Cloud Files API. It fully documents the REST application programming
        interface (API) that allows developers to interact with the storage and CDN components of
        the Cloud Files system. To use the information provided here, you must first have a general
        understanding of the Rackspace Cloud Files service and have access to an active Rackspace
        Cloud Files account. You should also be familiar with the following items: </para>
      <itemizedlist spacing="compact">
        <listitem>
          <para>RESTful web services</para>
        </listitem>
        <listitem>
          <para>HTTP/1.1</para>
        </listitem>
      </itemizedlist>
      <para>System administrators and others interested in the storage and CDN benefits of Cloud
        Files should consider using the File Manager interface within the Rackspace Cloud Control
        Panel, <link xlink:href="http://www.jungledisk.com/">Jungle Disk</link>, or third-party
        tools such as <link xlink:href="http://www.fireuploader.com/">Fileuploader</link> or <link
          xlink:href="http://www.cyberduck.ch/">Cyberduck</link>. The Rackspace Cloud Control Panel
        provides an easy to use web-based interface for uploading content to and downloading content
        from Cloud Files.</para>
      <para>Rackspace also provides language-specific APIs in several popular programming languages.
        Customers who are interested in accessing Cloud Files by using one of the language-specific
        APIs should see the <link
          xlink:href="http://docs.rackspace.com/sdks/guide/content/intro.html"><citetitle>Rackspace
            Cloud SDKs Software Development Kit Guide</citetitle></link>. For information about
        language-specific APIs, see <link linkend="Language-Specific_API_Bindings-d1e574"
          >Language-Specific API Bindings</link>.</para>
    </section>
    <?hard-pagebreak?>
    <section xml:id="Document_Change_History-d1e141">
      <title>Document change history</title>
      <para>This version of the Developer Guide replaces and obsoletes all earlier versions. The
        most recent changes are described in the following table:</para>
      <?rax revhistory?>
    </section>
    <section xml:id="Additional_Resources-d1e388">
      <title>Additional resources</title>
      <para>You can download the most current version of this document
        from the Rackspace API documentation website at <link
          xlink:href="http://docs.rackspace.com/files/api/v1/cf-devguide/content/Overview-d1e70.html"
          >docs.rackspace.com</link>. </para>
      <para>For more details about the Cloud Files service, see <link
          xlink:href="http://www.rackspace.com/cloud/files/"
          >http://www.rackspace.com/cloud/files/</link>. Related documents are available at the same
        site, as are links to official Rackspace support channels, including Knowledge Center
        articles, forums, phone, chat, and email.</para>
      <para>For information about the Rackspace language-specific APIs that you can use for Cloud
        Files, see the <link xlink:href="http://docs.rackspace.com/sdks/guide/content/intro.html"
            ><citetitle>Rackspace Cloud SDKs Software Development Kit Guide</citetitle></link>. Each
        language-specific API includes its own documentation (either HTML, PDF, or CHM) including
        code snippets and examples to help you get started. For information about the
        language-specific APIs, see <link linkend="Language-Specific_API_Bindings-d1e574"
          >Language-Specific API Bindings</link>.</para>
    </section>
    <section xml:id="Pricing_Service-d1e1402">
      <title>Pricing and service level</title>
      <para>Cloud Files is part of the Rackspace Cloud and your use of it through the API is billed
        according to the pricing schedule at <link
          xlink:href="http://www.rackspace.com/cloud/public/files/pricing/">
          www.rackspace.com/cloud/public/files/pricing</link>. </para>
      <para>The service level agreement (SLA) for Cloud Files is available at <link
        xlink:href="http://www.rackspace.com/information/legal/cloud/sla?page=files#cloud_files_sla">
        Cloud Files SLA</link>. </para>
    </section>
  </chapter>
  <chapter xml:id="Concepts-d1e413">
    <title>Concepts</title>
    <info>
      <raxm:metadata
        xmlns:raxm="http://docs.rackspace.com/api/metadata">
        <raxm:type>concept</raxm:type>
        <raxm:product version="v1">files</raxm:product>
        <raxm:priority>2</raxm:priority>
      </raxm:metadata>
    </info>
    <para>Cloud Files is not a file system in the traditional sense. You cannot map or mount virtual
      disk drives like you can with other forms of storage such as a SAN or NAS. Because Cloud Files
      is a different kind of storage system, you should take a few moments to review the following
      key concepts in this section. </para>
    <section xml:id="Accounts-d1e421">
      <title>Accounts</title>
      <para>The Cloud Files system is designed to be used by many different customers. Your user
        account is your portion of the Cloud Files system. You must identify yourself with your
        Rackspace Cloud user name and API access key. After you are authenticated, you have full
        read/write access to the files stored under your account. To obtain a Cloud Files account
        and enable your API access key, go to <link
          xlink:href="https://cart.rackspace.com/cloud/?cp_id=cloud_files"
          >http://www.rackspacecloud.com/signup</link>. </para>
    </section>
    <section xml:id="Authentication-d1e433">
      <title>Authentication</title>
      <para><xref linkend="Authentication-d1e639"/> describes how to authenticate against the
        Rackspace Cloud Identity service to receive Cloud Files connection parameters and an
        authentication token. The token must be passed to Cloud Files operations during the time
        that it is valid. </para>
      <para>For more information about authentication, see the
          <citetitle>Cloud Identity Client Developer Guide,
          v2.0</citetitle> at <link
          xlink:href="http://docs.rackspace.com/auth/api/v2.0/auth-client-devguide/content/Overview-d1e65.html"
            > http://docs.rackspace.com/auth/api/v2.0/auth-client-devguide/content/Overview-d1e65.html</link>.</para>
      <note>
        <para>The language-specific APIs handle authentication, token
          passing, and HTTPS request/response communication.</para>
      </note>
    </section>
    <section xml:id="Permissions-d1e448">
      <title>Permissions </title>
      <para>In Cloud Files, you have your own storage account and full access to that account. You
        must authenticate with your credentials as described in <xref
          linkend="Authentication-d1e639"/>. After you are authenticated, you can perform all Cloud
        Files operations within that account. </para>
      <para>You can use Role Based Access Control (RBAC) with Cloud Files. For more information, see
          <xref linkend="RBAC"/>.</para>
    </section>
    <section xml:id="Containers-d1e458">
      <title>Containers</title>
      <para>A container is a storage compartment that provides a way for you to organize your data.
        You can think of a container like a folder in Windows® or a directory in UNIX®. The primary
        difference between a container and these other file system concepts is that containers
        cannot be nested. You can have up to 500,000 containers in your account. Data must be stored
        in a container, so you must have at least one container defined in your account before you
        upload data. </para>
      <para>If you expect to write more than 100 objects per second to
        a single container, we recommend organizing those objects
        across multiple containers to improve performance.</para>
      <para>The only restrictions on container names is that they cannot contain a forward slash
          (<code>/</code>) and must be less than 256 bytes in length. Note that the length
        restriction applies to the name after it has been URL-encoded. For example, a container name
        of <code>Course Docs</code> would be URL-encoded as <code>Course%20Docs</code> and is
        therefore 13 bytes in length rather than the expected 11.</para>
      <para>You can create a container in any Rackspace data center.
        (See <xref linkend="Service-Access-Endpoints-d1e003"/> for a
        list.) However, in order to lower your costs, you should
        create your most served containers in the same data center as
        your server. Otherwise, you will be billed for external
        bandwidth charges. Note that this is true when computations
        are performed on objects but is not true for static content
        served to end users directly.</para>
      <para> In addition to containing objects, you can also use the container to control access to
        objects by using an access control list (ACL). For more information, see <xref
          linkend="Container_ACLs-d1e2222"/>. You cannot store an ACL with individual
        objects.</para>
    </section>
    <section xml:id="Objects-d1e479">
      <title>Objects</title>
      <para>Objects are the basic storage entities in Cloud Files. They represent the files and
        their optional metadata that you upload to the system. When you upload objects to Cloud
        Files, the data is stored as-is (without compression or encryption) and consists of a
        location (container), the object's name, and any metadata that you assign, consisting of
        key/value pairs. For example, you can choose to store a backup of your digital photos and
        organize them into albums. In this case, each object could be tagged with metadata such as
          <code>Album : Caribbean Cruise</code> or <code>Album : Aspen Ski Trip</code>. </para>
      <para>The only restriction on object names is that they must be less than 1024 bytes in length
        after URL-encoding. For example, an object name of <code>C++final(v2).txt</code> would be
        URL-encoded as <code>C%2B%2Bfinal%28v2%29.txt</code> and therefore is 24 bytes in length
        rather than the expected 16.</para>
      <para>Cloud Files limits the size of a single uploaded object. By default this limit is 5 GB.
        However, the download size of a single object is virtually unlimited with the use of
        segmentation. Segments of the larger object are uploaded and a special manifest file is
        created that, when downloaded, sends all the segments concatenated as a single object.
        Segmentation also offers much greater upload speed with the possibility of parallel uploads
        of the segments.</para>
      <para>For metadata, do not exceed 90 individual key/value pairs for any one object and do not
        exceed 4 KB (4096 bytes) for the total byte length of all key/value pairs.</para>
    </section>
    <section xml:id="Operations-d1e509">
      <title>Operations</title>
      <para linkend="Operations-d1e509">Operations are the actions you perform within your account,
        such as creating or deleting containers or uploading or downloading objects. The full list
        of operations is given in <xref linkend="API_Operations_d1e000"/>. The operations are then
        described in the following REST API sections:</para>
      <itemizedlist>
        <listitem>
          <para><xref linkend="accountServicesOperations_d1e000"/></para>
        </listitem>
        <listitem>
          <para><xref linkend="containerServicesOperations_d1e000"/></para>
        </listitem>
        <listitem>
          <para><xref linkend="objectServicesOperations_d1e000"/></para>
        </listitem>
      </itemizedlist>
      <para linkend="Operations-d1e509">You can perform operations through the REST web service API
        or a language-specific API. (For information about the Rackspace language-specific APIs, see
        the <link xlink:href="http://docs.rackspace.com/sdks/guide/content/intro.html"
            ><citetitle>Rackspace Cloud SDKs Software Development Kit
        Guide</citetitle></link>.)</para>
      <important>
        <para> All operations must include a valid authorization
          token. </para>
      </important>
    </section>
    <section xml:id="CDN-Enabled_Containers-d1e524">
      <title>CDN-enabled containers</title>
      <para>CDN-enabled containers serve content through the Akamai content delivery network (CDN).
        CDN-enabled containers are publicly accessible for read access, so they do not require an
        authorization token for read access. However, uploading content into a CDN-enabled container
        is a secure operation and requires a valid authentication token.</para>
      <para>Each CDN-enabled container has a unique URI that can be combined with its object names
        and openly distributed in web pages, emails, or other applications.</para>
      <para>For example, a CDN-enabled container named
          <code>photos</code> might be referenced as
          <code>http://80745c48926cd286a5a0-48261ebe0e4c795a565ece6b9cca2fe8.
          r10.cf1.rackcdn.com</code>. If that container houses a
        screenshot called <code>wow1.jpg</code>, that image can be
        served by a CDN with the full URL of
          <code>http://80745c48926cd286a5a0-48261ebe0e4c795a565ece6b9cca2fe8.r10.cf1.
          rackcdn.com/wow1.jpg</code>. </para>
      <para>This URI can be embedded in items like HTML pages, email messages, or blog posts. The
        first time that the URI is accessed, a copy of that image is fetched from the Cloud Files
        storage system. The copy is cached in a CDN and served from there for all subsequent
        requests for a configurable cache time to live (TTL) value. Setting the TTL of a CDN-enabled
        container translates to setting the <code>Expires</code> and <code>Cache-Control</code> HTTP
        headers. Note that extremely long TTL values do not guarantee that an object is served from
        a CDN edge location. When the TTL expires, the CDN checks Cloud Files to ensure that it has
        the most up-to-date content. A purge request forces the CDN to check with Cloud Files for
        the most up-to-date version of the file. </para>
      <para>Cloud Files continues to serve content through the CDN
        until it receives a delete request. </para>
      <note>
        <para>For more information about TTL, including its default,
          minimum, and maximum values, see <xref
            linkend="CDN_Object_Services"/>.</para>
      </note>
      <para>Containers tracked in the CDN management service are completely separate and distinct
        from the containers defined in the storage service. It is possible for a container to be
        CDN-enabled even if it does not exist in the storage system. You might want the ability to
        pre-generate CDN URLs before actually uploading content, and this separation gives you that
        ability.</para>
      <para>However, for the content to be served from the CDN, the container names <emphasis
          role="strong">must</emphasis> match in both the CDN management service and the storage
        service. For example, you could CDN-enable a container called <code>images</code> and be
        assigned the CDN URI, but you also need to create a container called <code>images</code> in
        the storage service.</para>
      <para>For more information about CDN-enabled containers and operations for them, see <xref
          linkend="API_Operations_for_CDN_Services-d1e2386"/></para>
    </section>
    <section xml:id="Language-Specific_API_Bindings-d1e574">
      <title>Language-specific APIs </title>
      <para>APIs in several popular languages are available to help put Cloud Files in the hands of
        developers. These language-specific APIs provide a layer of abstraction on top of the base
        REST API, enabling developers to work with a container and object model instead of working
        directly with HTTP requests and responses. The language-specific APIs are available at no
        cost to download, use, and modify. They are licensed under the MIT license as described in
        the COPYING file packaged with each API. </para>
      <para>If you make any improvements to a Cloud File language-specific API, you are encouraged
        (but not required) to submit those changes back to Rackspace. If you want to suggest changes
        to an API, send an email to <link xlink:href="mailto:sdk-support@rackspace.com"
          >sdk-support@rackspace.com</link>. Be sure to indicate which language and version you
        modified and send a unified <code>diff</code>. </para>
      <para>Detailed information about the language-specific APIs is in the Rackspace Cloud SDKs
        Software Development Kit Guide. Each API has its own documentation (in HTML, PDF, or CHM
        format) including code snippets and examples to help you get started.</para>
      <!-- CYR: 11-07-2013 Removing list of specific language bindings because this is out of date. Providing the preceding link to the SDKs intro will get customers to the latest information.      
      <itemizedlist>
        <listitem>
          <para><link
            xlink:href="http://docs.rackspace.com/sdks/guide/content/php.html">
            PHP</link> (requires 5.x and the modules: cURL, FileInfo, mbstring)</para>
        </listitem>
        <listitem>
          <para>
            <link
              xlink:href="http://docs.rackspace.com/sdks/guide/content/python.html">
              Python</link> (requires 2.4 or newer)</para>
        </listitem>
        <listitem>
          <para>
            <link
              xlink:href="http://docs.rackspace.com/sdks/guide/content/java.html">
              Java</link> (requires JRE v1.5 or newer)</para>
        </listitem>
-->
      <!-- Removing these as of 2-01-13, per Ed Leafe of the Developer Relations Group. These
   are the older bindings and they are actively getting releases for Ruby and .Net.
   <listitem>
          <para>
            <link
              xlink:href="https://github.com/rackspace/csharp-cloudfiles">
              C#/.NET</link> (requires .NET Framework v3.5)</para>
        </listitem>
        <listitem>
          <para><link
            xlink:href="https://github.com/rackspace/ruby-cloudfiles">
            Ruby</link> (requires 1.8 or newer and mime-tools module)</para>
        </listitem>
        
      </itemizedlist>
-->
      <para>You are welcome to create your own language-specific APIs.
        Rackspace will help answer any questions during development,
        host your code if you like, and give you full credit for your
        work.</para>
    </section>
  </chapter>
  <chapter xml:id="General_API_Information-d1e634">
    <title>General API information</title>
    <info>
      <raxm:metadata
        xmlns:raxm="http://docs.rackspace.com/api/metadata">
        <raxm:type>concept</raxm:type>
        <raxm:product version="v1">files</raxm:product>
        <raxm:priority>3</raxm:priority>
      </raxm:metadata>
    </info>
    <para>The information in this chapter is relevant to all Cloud Files API operations. For
      information about a specific API operation, see later chapters.</para>
    <section xml:id="Authentication-d1e639">
      <title>Authentication</title>
      <para xmlns:m="http://www.w3.org/1998/Math/MathML"> Every REST request against the Cloud Files
        service requires the inclusion of a specific authorization token, supplied by the
          <code>X-Auth-Token</code> HTTP header. You obtain this token by using the Rackspace Cloud
        Identity service and supplying a valid user name and API access key. </para>
      <section xml:id="Geographic_Endpoints"
        xmlns:m="http://www.w3.org/1998/Math/MathML">
        <title>Geographic endpoints</title>
        <para>The Rackspace Cloud Identity service serves as the entry point to all Rackspace Cloud
          APIs and is itself a RESTful web service. </para>
        <para>Use the following global endpoint to access the Rackspace Cloud Identity
          service:</para>
        <itemizedlist spacing="compact">
          <listitem>
            <para>
              <link xlink:href="&ENDPOINT-US-20;">&ENDPOINT-US-20;</link>
            </para>
          </listitem>
        </itemizedlist>
<!--        <para>Your account can be based in either the US or the UK. This is not determined by your
          physical location but by the location of the Rackspace retail site that was used to create
          your account. </para>
        <itemizedlist spacing="compact">
          <listitem>
            <para>If your account was created via <link xlink:href="http://www.rackspacecloud.com"
                >http://www.rackspacecloud.com</link>, it is a US-based account. </para>
          </listitem>
          <listitem>
            <para>If your account was created via <link xlink:href="http://www.rackspace.co.uk"
                >http://www.rackspace.co.uk</link>, it is a UK-based account. </para>
          </listitem>
        </itemizedlist>
        <para>If you are unsure how your account was created, use the Rackspace contact information
          at either site to ask for help. </para> -->
      </section>
      <section xml:id="Retrieving_Auth_Token"
        xmlns:m="http://www.w3.org/1998/Math/MathML">
        <title>Retrieving the authentication token</title>
        <informaltable rules="all">
          <tbody>
            <tr>
              <td colspan="1">&POST; </td>
              <td colspan="1"> v2.0/tokens </td>
              <td colspan="4"> Authenticate to receive a token and a
                service catalog. </td>
            </tr>
          </tbody>
        </informaltable>
        <simpara> Normal Status Code(s):
            <returnvalue>200</returnvalue>,
            <returnvalue>203</returnvalue>
        </simpara>
        <simpara> Error Status Code(s): unauthorized
            (<errorcode>401</errorcode>), userDisabled
            (<errorcode>403</errorcode>), badRequest
            (<errorcode>400</errorcode>), authFault
            (<errorcode>500</errorcode>), serviceUnavailable
            (<errorcode>503</errorcode>) </simpara>
        <para> The authenticate operation provides clients with an authentication token and a list
          of regional cloud endpoints. </para>
        <note>
          <para>For  information about how to use cURL to retrieve the authentication token, see the
              <citetitle>Cloud Files Getting Started Guide</citetitle>.</para>
        </note>
        <para>The sample requests and responses in this section illustrate a general case. In your
          authentication request, use your own credentials rather than the sample values shown here
          for <code>username</code> and <code>apiKey</code>. When you authenticate successfully, the
          response to your authentication request will include a catalog of the services to which
          you have subscribed rather than the sample values shown here.</para>
        <note>
          <para>If you authenticate with <code>username</code> and <code>password</code>
            credentials, you can use multi-factor authentication to add an additional level of
            account security. This feature is not implemented for the <code>username</code> and
              <code>apiKey</code> credentials shown in the following examples. </para>
          <para>For more information, see <link
              xlink:href="http://docs.rackspace.com/auth/api/v2.0/auth-client-devguide/content/MFA_Ops.html"
              >Multi-factor authentication</link> in the <citetitle>Cloud Identity Client Developer
              Guide</citetitle>. </para>
        </note>
        <example>
          <title>Authentication request: XML</title>
          <programlistingco>
            <areaspec>
              <area xml:id="credentials.xml.user" units="linecolumn"
                coords="13 17"/>
              <area xml:id="credentials.xml.key" units="linecolumn"
                coords="14 15"/>
            </areaspec>
            <programlisting language="xml"><xi:include href="samples/credentials-20.xml" parse="text"/></programlisting>
          </programlistingco>
        </example>
        <example>
          <title>Authentication request: JSON</title>
          <programlistingco>
            <areaspec>
              <area xml:id="credentials.json.user" units="linecolumn"
                coords="14 22"/>
              <area xml:id="credentials.json.key" units="linecolumn"
                coords="15 20"/>
            </areaspec>
            <programlisting language="json"><xi:include href="samples/credentials-20.json" parse="text"/></programlisting>
          </programlistingco>
        </example>
        <calloutlist>
          <callout arearefs="credentials.xml.user">
            <para>The username is your common Rackspace Cloud username. </para>
          </callout>
          <callout arearefs="credentials.xml.key">
            <para>The key is your API access key. </para>
            <para><emphasis role="bold">To find your API key:</emphasis>
            </para>
            <orderedlist>
              <listitem>
                <para>Log in to the Cloud Control Panel (<link
                    xlink:href="https://mycloud.rackspace.com"
                    >https://mycloud.rackspace.com</link>).</para>
              </listitem>
              <listitem>
                <para>On the upper-right side of the top navigation
                  pane, click your username.</para>
              </listitem>
              <listitem>
                <para>From the menu, select <guilabel>Account
                    Settings</guilabel>.</para>
              </listitem>
              <listitem>
                <para>In the Login Details section of the Account
                  Settings page, locate the <guilabel>API
                    Key</guilabel> field and click
                    <guibutton>Show</guibutton>.</para>
              </listitem>
              <listitem>
                <para>Copy the value of the API Key and paste it into a text editor of your
                  choice.</para>
              </listitem>
              <listitem>
                <para>Click <guibutton>Hide</guibutton> to hide the
                  value of the API Key.</para>
              </listitem>
            </orderedlist>
            <para>You also need your cloud account number. In the
              documentation, the account number is often referred to
              as your tenant name or tenant ID (technically, the ID is
              different from the name, but at Rackspace, they are the
              same thing). Together, three components—your username,
              your API Key, and your tenant ID or cloud account
              number—form the authentication credentials that are
              required to connect to the Rackspace cloud.</para>
            <para>To find your tenant ID or cloud account number,
              locate your username on the upper-right side of the top
              navigation pane in the Cloud Control Panel. The tenant
              ID or account number is in parentheses just to the right
              of your username.<note>
                <para>For Cloud Files, the information used in place of the account number with the
                  API operations is the
                      <parameter>MossoCloudFS_<replaceable>aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee</replaceable></parameter>
                  information found in the service catalog of your authentication response, rather
                  than the account number found in the Cloud Control Panel.</para>
              </note></para>
          </callout>
        </calloutlist>
        <example>
          <title>Authentication response: XML</title>
          <programlistingco>
            <areaspec>
              <area xml:id="response.xml.namespaces"
                units="linecolumn" coords="7 9"/>
              <area xml:id="response.xml.token" units="linecolumn"
                coords="15 10"/>
              <area xml:id="response.xml.dfltregion"
                units="linecolumn" coords="16 67"/>
              <area xml:id="response.xml.role" units="linecolumn"
                coords="17 12"/>
              <area xml:id="response.xml.catalog" units="linecolumn"
                coords="22 21"/>
              <area xml:id="response.xml.servicetype"
                units="linecolumn" coords="51 34"/>
              <area xml:id="response.xml.servicename"
                units="linecolumn" coords="51 54"/>
              <area xml:id="response.xml.region" units="linecolumn"
                coords="52 30"/>
              <area xml:id="response.xml.tenant" units="linecolumn"
                coords="53 66"/>
              <area xml:id="response.xml.url" units="linecolumn"
                coords="54 9"/>
            </areaspec>
            <programlisting language="xml"><xi:include href="samples/auth-20.xml" parse="text"/></programlisting>
          </programlistingco>
        </example>
        <example xml:id="auth-response-example-json">
          <title>Authentication response: JSON</title>
          <programlistingco>
            <areaspec>
              <area xml:id="response.json.namespaces"
                units="linecolumn" coords="200 1"/>
              <area xml:id="response.json.token" units="linecolumn"
                coords="9 8"/>
              <area xml:id="response.json.dfltregion"
                units="linecolumn" coords="16 45"/>
              <area xml:id="response.json.role" units="linecolumn"
                coords="17 12"/>
              <area xml:id="response.json.catalog" units="linecolumn"
                coords="30 8"/>
              <area xml:id="response.json.servicetype"
                units="linecolumn" coords="114 16"/>
              <area xml:id="response.json.servicename"
                units="linecolumn" coords="113 16"/>
              <area xml:id="response.json.region" units="linecolumn"
                coords="104 24"/>
              <area xml:id="response.json.tenant" units="linecolumn"
                coords="101 24"/>
              <area xml:id="response.json.url" units="linecolumn"
                coords="102 24"/>
            </areaspec>
            <programlisting language="json"><xi:include href="samples/auth-20.json" parse="text"/></programlisting>
          </programlistingco>
        </example>
        <note>
          <para>The information shown in the authentication response examples is for US-based
            accounts. If you authenticate against the UK endpoint, you see the service catalog
            information for UK-based accounts.</para>
        </note>
        <calloutlist>
          <callout arearefs="response.xml.namespaces">
            <para> In XML responses only, a list of namespaces
              identifies API extensions that add functionality to the
              core API. </para>
            <para> </para>
          </callout>
          <callout arearefs="response.xml.token">
            <para> This token can be presented to a service as evidence of authentication. Tokens
              are valid for a finite duration. An authentication token's default lifespan is 24
              hours. Applications should be designed to re-authenticate after receiving a 401
              (Unauthorized) response from a service endpoint. </para>
            <para> The token's <code>expires</code> attribute denotes the time after which the token
              automatically becomes invalid. A token can be manually revoked before the time
              identified by the <code>expires</code> attribute. The attribute predicts a token's
              maximum possible lifespan but does not guarantee that it will reach that lifespan.
              Clients are encouraged to cache a token until it expires. </para>
            <para> </para>
          </callout>
          <callout arearefs="response.xml.dfltregion">
            <para>Users can be assigned a default region. If multiple endpoints are associated with
              a service in the user's catalog, the endpoint for the user's default region is
              selected if it is available. In this example, the user's default region is DFW, and
              several of the services in the catalog are associated with endpoints in that region.
              Whenever possible, the user's work is directed to the DFW region. </para>
            <para> </para>
          </callout>
          <callout arearefs="response.xml.role">
            <para>Users can be assigned multiple roles, with each role providing specific
              privileges. In this example, <code>yourUserName</code> is the administrative user for
              the account and holds the fully-privileged <code>identity:admin</code> role. Other
              users might hold other roles with different privileges. Roles do not have to be
              associated with actual job functions such as Administrator, Operator, Developer,
              Tester, or Trainer. </para>
            <para> </para>
          </callout>
          <callout arearefs="response.xml.catalog">
            <para> The service catalog lists the services that you can access. In this example, the
              user can access one database service, one load-balancing service, two compute services
              (Cloud Servers OpenStack and Cloud Servers), two object storage services (Cloud Files
              CDN and Cloud Files), and one DNS service. The catalog entry for each service provides
              at least one endpoint URI for that service. Other information, such as regions,
              versions, and tenants, is provided if it is relevant to a user's access to a service. </para>
            <para> </para>
          </callout>
          <callout arearefs="response.xml.servicetype">
            <para> The service <code>type</code> attribute identifies services that perform similar
              functions, regardless of service names. In this example, the service named cloudFiles
              is identified as <code>type="object-store"</code>, identifying it as a storage service
              even though the word "store" does not appear in its name. </para>
            <important>
              <para>Use the service <code>type</code> attribute as the primary value for locating a
                service. If multiple endpoints of the same service type exist in the same region,
                use the service <code>name</code> attribute to locate the appropriate
                service.</para>
            </important>
            <para> </para>
          </callout>
          <callout arearefs="response.xml.servicename">
            <para> The service <code>name</code> attribute identifies each unique service in the
              catalog. After a service is created, its name does not change. However, new services
              of the same service <code>type</code> can be added to the catalog with new names. </para>
            <important>
              <para> If you are programmatically parsing an authentication response, use service
                  <code>type</code> rather than service <code>name</code> to determine whether a
                user has access to a particular kind of service. Service type is stable across all
                releases. New service types might be developed, but existing service types are not
                renamed. In this example, <code>type="compute"</code> identifies all the available
                compute services. If new compute services are added in future releases, you can
                recognize them by parsing for <code>type="compute"</code> in the authentication
                response's service catalog.</para>
            </important>
            <tip>
              <para>Beginning with Auth 2.0, the service catalog includes a service
                  <code>type</code> attribute to identify services that perform similar functions
                but have different names. For example, <code>type="compute"</code> identifies
                compute services such as cloudServers and cloudServersOpenStack. Some developers
                have found the service <code>type</code> attribute to be useful in parsing the
                service catalog. For additional information on Auth 2.0 (also known as the Cloud
                Identity service), see the <citetitle>Cloud Identity Client Developer
                  Guide</citetitle> at <link xlink:href="http://docs.rackspace.com"
                  >http://docs.rackspace.com/</link>.</para>
            </tip>
            <para> </para>
          </callout>
          <callout arearefs="response.xml.region">
            <para> A service might expose endpoints in different regions. Regional endpoints enable
              users to provision resources in a manner that provides high availability. </para>
            <para> Some services are not region-specific. These
              services supply a single non-regional endpoint and do
              not provide access to internal URLs. </para>
            <para> </para>
          </callout>
          <callout arearefs="response.xml.tenant">
            <para> Some services recognize specification of a tenant. If a service recognizes
              tenants, the format of the tenant specification is defined only by the service. For
              details about whether and how to specify a tenant, check the documentation for the
              service that you are using.</para>
            <para> </para>
          </callout>
          <callout arearefs="response.xml.url">
            <para> An endpoint can be assigned public and internal URIs. A public URI is accessible
              from anywhere. Access to a public URI usually incurs traffic charges. Internal URIs
              are accessible only to services within the same region. Access to an internal URI is
              free of charge. </para>
            <para> </para>
          </callout>
        </calloutlist>
        <para>Cloud Files service endpoints are published in the service catalog in the
          authentication response with the account information, which is a required element of the
          service endpoints. The examples shown in this document are for authentication for US
          customers. Customers with UK-based accounts see different values in the service catalog.
          For more information about service endpoints, see <xref
            linkend="Service-Access-Endpoints-d1e003"/>. </para>
      </section>
    </section>
   
    <section xml:id="RBAC"
      xmlns:wadl="http://wadl.dev.java.net/2009/02"
      xmlns:m="http://www.w3.org/1998/Math/MathML">
      <title>Role Based Access Control</title>
      <para>Role Based Access Control (RBAC) restricts access to the capabilities of Rackspace Cloud
        services, including the Cloud Files API, to authorized users only. RBAC enables Rackspace
        Cloud customers to specify which account users of their Cloud account have access to which
        Cloud Files API service capabilities, based on roles defined by Rackspace (see <xref
          linkend="RBAC_product_roles_table"/>). The permissions to perform certain operations in
        the Cloud Files API – create, read, update, delete – are assigned to specific roles, and the
        Cloud account admin user assigns these roles to account users. </para>
      <section xml:id="assigningRoles">
        <title>Assigning roles to account users</title>
        <para>The account owner (identity:user-admin) can create
          account users on the account and then assign roles to those
          users. The roles grant the account users specific
          permissions for accessing the capabilities of the Cloud
          Files service. Each account has only one account owner, and
          that role is assigned by default to any Rackspace Cloud
          account when the account is created.</para>
        <para>For information about how to perform the following tasks, see the <citetitle>Cloud
            Identity Client Developer Guide</citetitle>:</para>
        <itemizedlist>
          <listitem>
            <para><link
              xlink:href="http://docs.rackspace.com/auth/api/v2.0/auth-client-devguide/content/POST_addUser_v2.0_users_User_Calls.html"
              >Create account users</link></para>
          </listitem>
          <listitem>
            <para><link
              xlink:href="http://docs.rackspace.com/auth/api/v2.0/auth-client-devguide/content/PUT_addUserRole__v2.0_users__userId__roles__roleid__Role_Calls.html"
              >Assign roles to account users</link></para>
          </listitem>
          <listitem>
            <para><link
              xlink:href="http://docs.rackspace.com/auth/api/v2.0/auth-client-devguide/content/DELETE_deleteUserRole__v2.0_users__userId__roles__roleid__Role_Calls.html"                            
              >Delete roles from account users</link></para>
          </listitem>
        </itemizedlist>
        <note>
          <para>The account owner (identity:user-admin) role cannot
            hold any additional roles because it already has full
            access to all capabilities.</para>
        </note>
      </section>
      <section xml:id="rolesAvailable">
        <title>Roles available for Cloud Files </title>
        <para>Two roles (admin and observer) can be used to access the
          Cloud Files API specifically. The following table describes
          these roles and their permissions. </para>
        <table rules="all" xml:id="RBAC_product_roles_table">
          <caption>Cloud Files product roles and permissions</caption>
          <col width="50%"/>
          <col width="50%"/>
          <thead>
            <tr>
              <th>Role name</th>
              <th>Role permissions</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>object-store:admin</td>
              <td>This role provides Create, Read, Update, and Delete
                permissions in Cloud Files, where access is
                granted.</td>
            </tr>
            <tr>
              <td>object-store:observer</td>
              <td>This role provides Read permission in Cloud Files,
                where access is granted.</td>
            </tr>
          </tbody>
        </table>
        <para>Additionally, two multiproduct roles apply to all
          products. Users with multiproduct roles inherit access to
          future products when those products become RBAC-enabled. The
          following table describes these roles and their
          permissions.</para>
        <table rules="all" width="100%"
          xml:id="RBAC_global_roles_table_3">
          <caption> Multiproduct (global) roles and permissions</caption>
          <thead>
            <tr>
              <td colspan="1">Role name</td>
              <td colspan="2">Role permissions</td>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td colspan="1">admin</td>
              <td colspan="2">This role provides Create, Read, Update,
                and Delete permissions in all products, where access
                is granted.</td>
            </tr>
            <tr>
              <td colspan="1">observer</td>
              <td colspan="2">This role provides Read permission in
                all products, where access is granted.</td>
            </tr>
          </tbody>
        </table>
      </section>
      <section version="5.0" xml:id="RBAC_Role_Conflict_3">
        <title>Resolving conflicts between RBAC multiproduct and custom (product-specific)
          roles</title>
        <para>The account owner can set roles for both multiproduct
          and Cloud Files scope, and it is important to understand how
          any potential conflicts among these roles are resolved. When
          two roles appear to conflict, the role that provides the
          more extensive permissions takes precedence. Therefore,
          admin roles take precedence over observer and creator roles,
          because admin roles provide more permissions. </para>
        <para>The following table shows two examples of how potential
          conflicts between user roles in the Control Panel are
          resolved: </para>
        <para>
          <informaltable rules="all">
            <thead>
              <tr align="center">
                <td>Permission configuration</td>
                <td>View of permission in the Control Panel </td>
                <td>Can the user perform product admin functions in the Control Panel?</td>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>User is assigned the following roles: multiproduct
                    <emphasis role="bold">observer</emphasis> and
                  Cloud Files <emphasis role="bold"
                  >admin</emphasis></td>
                <td>Appears that the user has only the multiproduct
                    <emphasis role="bold">observer</emphasis>
                  role</td>
                <td>Yes, for Cloud Files only. The user has the
                    <emphasis role="bold">observer</emphasis> role for
                  the rest of the products.</td>
              </tr>
              <tr>
                <td>User is assigned the following roles: multiproduct
                    <emphasis role="bold">admin</emphasis> and Cloud
                  Files <emphasis role="bold">observer</emphasis></td>
                <td>Appears that the user has only the multiproduct
                    <emphasis role="bold">admin</emphasis> role</td>
                <td>Yes, for all of the products. The Cloud Files
                    <emphasis role="bold">observer</emphasis> role is
                  ignored.</td>
              </tr>
            </tbody>
          </informaltable>
        </para>
      </section>
      <section version="5.0" xml:id="RBAC_API_XREF_3">
        <title>RBAC permissions cross-reference to Cloud Files API operations</title>
        <para>API operations for Cloud Files may or may not be available to all roles. To see which
          operations are permitted to invoke which calls, see the <link
            xlink:href="http://www.rackspace.com/knowledge_center/article/permissions-matrix-for-cloud-files"
            >Permissions Matrix for Cloud Files</link> article in the Rackspace Knowledge
          Center.</para>
      </section>
    </section>
    <section xml:id="Service-Access-Endpoints-d1e003"
      xmlns:m="http://www.w3.org/1998/Math/MathML">
      <title>Service access endpoints</title>
      <para>Cloud Files is a regionalized service. You can create your
        Cloud Files containers in any Rackspace data center. The user
        of the service is therefore responsible for appropriate
        replication, caching, and overall maintenance of Cloud Files
        data across regional boundaries to other Cloud Files servers. </para>
   
        <para>To help you decide which regionalized endpoint to use, read the Knowledge Center article about special
          considerations for choosing a data center at <link
            xlink:href="http://www.rackspace.com/knowledge_center/article/about-regions"
            >About Regions</link>.
        </para>
  
      <para>The endpoints to use for the storage service component of your Cloud Files API calls are
        summarized in the following table. The first endpoint listed for each region is externally
        accessible. The second endpoint is accessed only from the internal ServiceNet.</para>
      <para>
        <table xml:id="Endpoints-Table-d1e001" rules="all">
          <caption>Regionalized service endpoints for storage services </caption>
          <thead>
            <tr align="center">
              <td colspan="2">Region</td>
              <td colspan="5">Endpoint</td>
            </tr>
          </thead>
          <tbody>
            <tr align="left">
              <td colspan="2" rowspan="2">Chicago (ORD)</td>
              <td colspan="5"
                      ><code>https://storage101.ord1.clouddrive.com/v1/<parameter>MossoCloudFS_<replaceable>aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee</replaceable></parameter>/</code></td>
            </tr>
            <tr>
              <td colspan="5"
                      ><code>https://snet-storage101.ord1.clouddrive.com/v1/<parameter>MossoCloudFS_<replaceable>aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee</replaceable></parameter>/</code></td>
            </tr>
            <tr>
              <td colspan="2" rowspan="2">Dallas/Ft. Worth (DFW)</td>
              <td colspan="5"
                      ><code>https://storage101.dfw1.clouddrive.com/v1/<parameter>MossoCloudFS_<replaceable>aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee</replaceable></parameter>/</code></td>
            </tr>
            <tr>
              <td colspan="5"
                      ><code>https://snet-storage101.dfw1.clouddrive.com/v1/<parameter>MossoCloudFS_<replaceable>aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee</replaceable></parameter>/</code></td>
            </tr>
            <tr>
              <td colspan="2" rowspan="2">Hong Kong (HKG)</td>
              <td colspan="5"
                      ><code>https://storage101.hkg1.clouddrive.com/v1/<parameter>MossoCloudFS_<replaceable>aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee</replaceable></parameter>/</code></td>
            </tr>
            <tr>
              <td colspan="5"
                      ><code>https://snet-storage101.hkg1.clouddrive.com/v1/<parameter>MossoCloudFS_<replaceable>aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee</replaceable></parameter>/</code></td>
            </tr>
            <tr align="left">
              <td colspan="2" rowspan="2">London (LON)</td>
              <td colspan="5"
                      ><code>https://storage101.lon3.clouddrive.com/v1/<parameter>MossoCloudFS_<replaceable>aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee</replaceable></parameter>/</code></td>
            </tr>
            <tr>
              <td colspan="5"
                      ><code>https://snet-storage101.lon3.clouddrive.com/v1/<parameter>MossoCloudFS_<replaceable>aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee</replaceable></parameter>/</code></td>
            </tr>
            <tr>
              <td colspan="2" rowspan="2">Northern Virginia (IAD)</td>
              <td colspan="5"
                      ><code>https://storage101.iad3.clouddrive.com/v1/<parameter>MossoCloudFS_<replaceable>aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee</replaceable></parameter>/</code></td>
            </tr>
            <tr>
              <td colspan="5"
                      ><code>https://snet-storage101.iad3.clouddrive.com/v1/<parameter>MossoCloudFS_<replaceable>aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee</replaceable></parameter>/</code></td>
            </tr>
            <tr>
              <td colspan="2" rowspan="2">Sydney (SYD)</td>
              <td colspan="5"
                      ><code>https://storage101.syd2.clouddrive.com/v1/<parameter>MossoCloudFS_<replaceable>aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee</replaceable></parameter>/</code></td>
            </tr>
            <tr>
              <td colspan="5"
                      ><code>https://snet-storage101.syd2.clouddrive.com/v1/<parameter>MossoCloudFS_<replaceable>aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee</replaceable></parameter>/</code></td>
            </tr>
          </tbody>
        </table>
      </para>
      <note>
        <para><emphasis role="bold">ServiceNet endpoints</emphasis></para>
        <para>If you are working with cloud servers that are in one of the Rackspace data centers,
          using the ServiceNet endpoint in the same data center has no network costs and provides a
          faster connection. ServiceNet endpoints are prefixed with <code>snet-</code> in <xref
            linkend="Endpoints-Table-d1e001"/>. ServiceNet is the data center internet network. In
          your authentication response, it is listed as <code>internalURL</code>. </para>
        <para><emphasis role="bold">Public endpoints</emphasis></para>
        <para> If you are working with servers that are not in one of the Rackspace data centers,
          you must use a public endpoint to connect. In your authentication response, public
          endpoints are listed as <code>publicURL</code>. If you are working with servers in
          multiple data centers or have a mixed environment where you have servers in your data
          centers and in Rackspace data centers, use a public endpoint because it is accessible from
          all the servers in the different environments.</para>
      </note>
      <para>Replace the sample MossoCloudFS information in the preceding table with the actual
        MossoCloudFS information returned as part of the authentication service response. This
        information is located after the final '/' in the <code>publicURL</code> field and the
        <code>internalURL</code> field in the <code>cloudFiles</code> section of the service
        catalog returned by the authentication response. For more information about the account
        number, see the sample authentication request and response in <xref
          linkend="Retrieving_Auth_Token"/> as well as the <citetitle>Cloud Identity Client
            Developer Guide</citetitle>. </para>
      <tip>
        <para>If you do not know which data center you are working in
          or your account ID, you can find them in your Cloud Control
          Panel at <link xlink:href="https://mycloud.rackspace.com/"
            >mycloud.rackspace.com</link>. </para>
      </tip>
      <note xmlns:m="http://www.w3.org/the key 1998/Math/MathML">
        <para>To avoid external bandwidth charges, your containers and servers must be in the same
          data center. </para>
        <para>You might find it useful to locate your objects in more than one data center to keep
          track of your data and backups. Specifically, if you serve an audience in a particular
          region, you might find it helpful to locate your Cloud Files objects as close to that
          region as possible. </para>
      </note>
      <para>The endpoints to use for the CDN management service component of your Cloud Files API
        calls are summarized in the following table.</para>
      <para>
        <note xmlns:m="http://www.w3.org/the key 1998/Math/MathML">
          <para>If your audience is worldwide, consider using the Akamai content delivery network
            (CDN). The CDN speeds your content delivery because it is cached at edge locations
            around the globe, rather than being served from a single origin server. You can learn
            more about CDN-enabling your containers in  <xref
              linkend="API_Operations_for_CDN_Services-d1e2386"/>. </para>
        </note>
        <table rules="all" xml:id="CDN_Service_Endpoints">
          <caption>Regionalized service endpoints for CDN management services</caption>
          <thead>
            <tr align="center">
              <td colspan="2">Region</td>
              <td colspan="5">Endpoint</td>
            </tr>
          </thead>
          <tbody>
            <tr align="left">
              <td colspan="2">Chicago (ORD)</td>
              <td colspan="5"
                ><code>https://cdn2.clouddrive.com/v1/<parameter>MossoCloudFS_<replaceable>aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee</replaceable></parameter>/</code></td>
            </tr>
            <tr>
              <td colspan="2">Dallas/Ft. Worth (DFW)</td>
              <td colspan="5"
                ><code>https://cdn1.clouddrive.com/v1/<parameter>MossoCloudFS_<replaceable>aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee</replaceable></parameter>/</code></td>
            </tr>
            <tr>
              <td colspan="2">Hong Kong (HKG)</td>
              <td colspan="5"
                ><code>https://cdn6.clouddrive.com/v1/<parameter>MossoCloudFS_<replaceable>aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee</replaceable></parameter>/</code></td>
            </tr>
            <tr align="left">
              <td colspan="2">London (LON)</td>
              <td colspan="5"
                ><code>https://cdn3.clouddrive.com/v1/<parameter>MossoCloudFS_<replaceable>aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee</replaceable></parameter>/</code></td>
            </tr>
            <tr>
              <td colspan="2">Northern Virginia (IAD)</td>
              <td colspan="5"
                ><code>https://cdn5.clouddrive.com/v1/<parameter>MossoCloudFS_<replaceable>aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee</replaceable></parameter>/</code></td>
            </tr>
            <tr>
              <td colspan="2">Sydney (SYD)</td>
              <td colspan="5"
                ><code>https://cdn4.clouddrive.com/v1/<parameter>MossoCloudFS_<replaceable>aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee</replaceable></parameter>/</code></td>
            </tr>
          </tbody>
        </table>
      </para>
      <para>As with the storage component service, replace the sample MossoCloudFS information with
        the actual MossoCloudFS information returned as part of the authentication service response.
        For the CDN management service, this information is located after the final '/' in the
        <code>publicURL</code> field in the <code>cloudFilesCDN</code> section of the service
        catalog returned by the authentication response. </para>
    </section>
    <section xml:id="Service_contract_versions"
      xmlns:m="http://www.w3.org/1998/Math/MathML">
      <title>Cloud Files service contract version</title>
      <para> The Cloud Files version defines the contract and build
        information for the API. </para>
      <para> The contract version denotes the data model and behavior that the API supports. The
        requested contract version is included in all request URIs. Different contract versions of
        the API might be available at any given time and are not guaranteed to be compatible with
        one another. </para>
      <example>
        <title>Example request URL (contract version in <emphasis role="strong"
          >bold</emphasis>)</title>
        <programlisting>https://storage101.dwf1.clouddrive.com/<emphasis role="strong">v1</emphasis>/MossoCloudFS_<replaceable>aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee</replaceable></programlisting>
      </example>
      <note>
        <para>This document pertains to contract version 1.</para>
      </note>
    </section>      
      <section xml:id="Absolute_Limits-d1e942">
        <title>Absolute limits</title>
      <para>Absolute limits control the total number of specific objects that a user can have or
        process in Cloud Files. Absolute limits are fixed.</para>
        <para>The following table lists the absolute limits in Cloud Files.</para>
        <table rules="all">
          <caption>Absolute limits</caption>
        <col width="30%"/>
        <col width="45%"/>
        <col width="25%"/>
          <thead>
            <tr>
              <th>Name</th>
              <th>Description</th>
              <th>Limit</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>Containers per account</td>
              <td>Maximum number of containers per account</td>
              <td>500,000 containers</td>
            </tr>
            <tr>
              <td>Container listing</td>
              <td>Maximum number of containers that can be listed at
                one time</td>
              <td>10,000 containers</td>
            </tr>
            <tr>
              <td>Pseudo hierarchical folders and directories</td>
              <td>Simulated hierarchical structure within a single container, created  by adding a
              forward slash (<code>/</code>) in the object name</td>
              <td>No limit</td>
            </tr>
            <tr>
              <td>Account, container, and object metadata limits </td>
              <td>Maximum metadata limits</td>
              <td>90 distinct metadata items at the most. Each piece of metadata can have a
              128-character name length with a 256 maximum value length. The total length of all
              names and values cannot exceed 4096 bytes.</td>
            </tr>
            <tr>
              <td>Number of object segments per static large object (SLO)</td>
              <td>Maximum number of object segments per SLO</td>
              <td>1,000 object segments</td>
            </tr>
            <tr>
              <td>TTL for a CDN-enabled container</td>
              <td>Maximum TTL for a CDN-enabled container</td>
              <td>1 year (31,536,000 seconds)</td>
            </tr>
            <tr>
              <td>Container name length</td>
              <td>Maximum length of container name</td>
              <td>256 bytes</td>
            </tr>
            <tr>
              <td>Object name length</td>
              <td>Maximum length of object name</td>
              <td>1024 bytes</td>
            </tr>
            <tr>
              <td>Upload limit for a request</td>
              <td>Maximum object size for an upload in a single request</td>
              <td>5 GB (For larger files, see <xref linkend="Static_Large_Object-d1e2226"/>) or
                <xref linkend="Large_Object_Creation-d1e2019"/>.)</td>
            </tr>
            <tr>
              <td>CDN file size limit</td>
              <td>Maximum size of file that can be served from
                CDN</td>
              <td>10 GB</td>
            </tr>
          <tr>
            <td>Rate limit for write operations</td>
            <td>Maximum number of write operations per second per container, where a write operation
              is a <command>COPY</command>, <command>DELETE</command>, <command>POST</command>, or
                <command>PUT</command>. If you reach this rate limit, Cloud Files slows the
              processing of write requests for the container to 100 write operations per second per
              container.</td>
            <td>100 write operations per second per container</td>
          </tr>
          </tbody>
        </table>
      </section>
    <section xml:id="Request_Response_Types-d1e903"
      xmlns:m="http://www.w3.org/1998/Math/MathML">
      <title>Request and response types</title>
      <para>You specify the request format by using the <code>Content-Type</code> header. The Cloud
        Files API supports both the JSON (<code xmlns:m="http://www.w3.org/the key 1998/Math/MathML"
          >application/json</code>) and XML (<code
          xmlns:m="http://www.w3.org/the key 1998/Math/MathML">application/xml</code>) data
        serialization formats, as well as other formats such as <code
          xmlns:m="http://www.w3.org/the key 1998/Math/MathML">text/plain</code>, <code
          xmlns:m="http://www.w3.org/the key 1998/Math/MathML">text/xml</code>, and
          <code>text/html</code>, along with <code>video</code>, <code>audio</code>, and
          <code>image</code> types. For pseudo hierarchical folders and directories, <code
          xmlns:m="http://www.w3.org/the key 1998/Math/MathML">application/directory</code> might be
        used.</para>
      <para>You specify the response format in requests by using the
          <code>Accept</code> header. The Cloud Files API supports
        both the JSON (<code
          xmlns:m="http://www.w3.org/the key 1998/Math/MathML"
          >application/json</code>) and XML (<code
          xmlns:m="http://www.w3.org/the key 1998/Math/MathML"
          >application/xml</code>) data serialization formats, as well
        as other formats such as <code
          xmlns:m="http://www.w3.org/the key 1998/Math/MathML"
          >text/plain</code> and <code
          xmlns:m="http://www.w3.org/the key 1998/Math/MathML"
          >text/xml</code> . </para>
    </section>
    <section xml:id="responseCodes-d101e">
      <title>Response codes</title>
      <para>Cloud Files returns an HTTP code that denotes the type of response. </para>
      <para>The following table lists possible responses with their associated codes and
        descriptions.</para>
      <informaltable rules="all">
        <thead>
          <tr align="center">
            <td colspan="2">Response</td>
            <td colspan="1">Associated response code</td>
            <td colspan="3">Description</td>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td colspan="2"><code>OK</code></td>
            <td colspan="1">200</td>
            <td colspan="3">The request has succeeded. (Some API calls might return 201
              instead.)</td>
          </tr>
          <tr>
            <td colspan="2"><code>Created</code></td>
            <td colspan="1">201</td>
            <td colspan="3">The request has been fulfilled and a resource was created.</td>
          </tr>
          <tr>
            <td colspan="2"><code>Accepted</code></td>
            <td colspan="1">202</td>
            <td colspan="3">The request has been accepted for processing.</td>
          </tr>
          <tr>
            <td colspan="2"><code>No Content</code></td>
            <td colspan="1">204</td>
            <td colspan="3">The request has been fulfilled but does not return a representation
              (that is, the response is empty).</td>
          </tr>
          <tr>
            <td colspan="2"><code>Partial Content</code></td>
            <td colspan="1">206</td>
            <td colspan="3">The server has fulfilled the partial GET request for the resource.</td>
          </tr>
          <tr>
            <td colspan="2"><code>Bad Request</code></td>
            <td colspan="1">400</td>
            <td colspan="3">The request was not understood due to bad syntax or missing required
              parameters. </td>
          </tr>
          <tr>
            <td colspan="2"><code>Unauthorized</code></td>
            <td colspan="1">401</td>
            <td colspan="3">Authentication failed, or the user does not have permissions for a
              requested operation.</td>
          </tr>
          <tr>
            <td colspan="2"><code>Forbidden</code></td>
            <td colspan="1">403</td>
            <td colspan="3">The server understood the request but refused to fulfill it.</td>
          </tr>
          <tr>
            <td colspan="2"><code>Not Found</code></td>
            <td colspan="1">404</td>
            <td colspan="3">A requested resource was not found but might be available again in the
              future..</td>
          </tr>
          <tr>
            <td colspan="2"><code>Method Not Allowed</code></td>
            <td colspan="1">405</td>
            <td colspan="3">The request method is not supported for this resource.</td>
          </tr>
          <tr>
            <td colspan="2"><code>Request Timeout</code></td>
            <td colspan="1">408</td>
            <td colspan="3">The server timed out waiting for the request.</td>
          </tr>
          <tr>
            <td colspan="2"><code>Conflict</code></td>
            <td colspan="1">409</td>
            <td colspan="3">The request could not be completed due to a conflict with the current
              state of the resource. </td>
          </tr>
          <tr>
            <td colspan="2"><code>Length Required</code></td>
            <td colspan="1">411</td>
            <td colspan="3">The request did not specify the length of its content, which is required
              by the requested resource.</td>
          </tr>
          <tr>
            <td colspan="2"><code>Precondition Failed</code></td>
            <td colspan="1">412</td>
            <td colspan="3">The server does not meet one of the preconditions that the requester put
              on the request.</td>
          </tr>
          <tr>
            <td colspan="2"><code>Request Entity Too Large</code></td>
            <td colspan="1">413</td>
            <td colspan="3">The server is refusing to process a request because the request entity
              is larger than the server is willing or able to process. </td>
          </tr>
          <tr>
            <td colspan="2"><code>Expectation Failed</code></td>
            <td colspan="1">417</td>
            <td colspan="3">The server cannot meet the requirements of the Expect request-header
              field.</td>
          </tr>
          <tr>
            <td colspan="2"><code>Unprocessable Entity</code>
            </td>
            <td colspan="1">422</td>
            <td colspan="3">The request could not be followed due to semantic errors.</td>
          </tr>
          <tr>
            <td colspan="2"><code>Too Many Requests</code></td>
            <td colspan="1">429</td>
            <td colspan="3">Too many requests have been sent in a given amount of time. Pause
              requests, wait up to one minute, and try again. (Intended for use with rate
              limiting.)</td>
          </tr>
          <tr>
            <td colspan="2"><code>Internal Server Error</code></td>
            <td colspan="1">500</td>
            <td colspan="3">The service encountered an unexpected condition that prevented it from
              fulfilling the request.</td>
          </tr>
          <tr>
            <td colspan="2"><code>Service Unavailable</code></td>
            <td colspan="1">503</td>
            <td colspan="3">The service is currently unable to handle the request due to a temporary
              overloading or maintenance. This is a temporary condition. Try again later.</td>
          </tr>
        </tbody>
      </informaltable>
      <para xmlns:m="http://www.w3.org/1998/Math/MathML"><?rax-fo keep-with-next?> An example of an
        error message follows. </para>
      <example xmlns:m="http://www.w3.org/1998/Math/MathML">
        <title>Error message example</title>
        <programlisting>HTTP/1.1 201 Created
Last-Modified: Fri, 17 Jan 2014 17:28:35 GMT
Content-Length: 116
Etag: 8a964ee2a5e88be344f36c22562a6486 
Content-Type: text/html; charset=UTF-8
X-Trans-Id: tx4d5e4f06d357462bb732f-0052d96843 
Date: Fri, 17 Jan 2014 17:28:35 GMT</programlisting>
      </example>
    </section>
  </chapter>
  <chapter xml:id="Overview_of_API_Operations-d1e823">
    <title>Overview of API operations</title>
    <para>The Cloud Files API is implemented as a set of RESTful web services. All authentication
      and container/object operations can be performed with standard HTTP calls. For more
      information about REST, see <link
        xlink:href="http://en.wikipedia.org/wiki/Representational_State_Transfer">Representation
        State Transfer</link>.</para>
    <para>The following constraints apply to REST API HTTP
      requests:</para>
    <itemizedlist>
      <listitem>
        <para>Maximum number of HTTP headers per request: 90</para>
      </listitem>
      <listitem>
        <para>Maximum length of all HTTP headers: 4096 bytes</para>
      </listitem>
      <listitem>
        <para>Maximum length per HTTP request line: 8192 bytes</para>
      </listitem>
      <listitem>
        <para>Maximum length of HTTP request: 5 gigabytes</para>
      </listitem>
      <listitem>
        <para>Maximum length of container name: 256 bytes</para>
      </listitem>
      <listitem>
        <para>Maximum length of object name: 1024 bytes</para>
      </listitem>
    </itemizedlist>
    <para>Container and object names must be UTF-8 encoded and then URL-encoded before interacting
      with the REST interface. You might be using an API binding that performs the URL-encoding on
      your behalf. If so, do not URL-encode before calling the API binding, or you will
      double-encode container and object names. Check the  length restrictions against the
      URL-encoded string.</para>
    <note>
      <para>The language-specific APIs handle URL-encoding and
        decoding.</para>
    </note>
    <para>Each REST request against Cloud Files requires the inclusion of an authorization token in
      the <code>X-Auth-Token</code> header. You obtain this token, along with the Cloud Files URIs,
      by first using the Rackspace authentication service and supplying a valid user name and API
      access key. For more information, see <xref linkend="Authentication-d1e639"/>.</para>
    <para>The following services make up the full Cloud Files product :<itemizedlist>
        <listitem>
          <para><emphasis role="bold">Storage service</emphasis>: The service identified with
              <code>cloudFiles</code> in the service catalog (see <xref
              linkend="Retrieving_Auth_Token"/>) manages the data storage in the system. Example
            operations are creating containers and uploading objects. </para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">CDN management service</emphasis>: The service identified with
              <code>cloudFilesCDN</code> in the service catalog (see <xref
              linkend="Retrieving_Auth_Token"/>) manages the CDN feature of Cloud Files. </para>
        </listitem>
      </itemizedlist></para>
    <?hard-pagebreak?> 
    <para>In the following sections, the purpose of each HTTP method depends on which service the
      call is made against. For example, a &PUT; request against one of the <code>cloudFiles</code>
      endpoints can be used to create a container or upload an object, while a &PUT; request against
      the one of the <code>cloudFilesCDN</code> endpoints is used to CDN-enable a container.</para>
    <para>The language-specific APIs mask this system separation. They simply create a container and
      mark it <emphasis>public</emphasis> and handle calling the appropriate back-end services by
      using the appropriate REST APIs.</para>
    <note>
      <para>All requests to authenticate and operate against Cloud
        Files are performed using SSL over HTTP (HTTPS) on TCP port
        443.</para>
    </note>    
    <para>The following diagram illustrates the various system
      interfaces and the ease with which content can be distributed
      over the CDN. The process is simple: authenticate, create a
      container, upload objects, mark the container as public, and
      begin serving that content from a powerful CDN.</para>
    <note>
      <para>Marking the container as public simply means enabling the
        container to be distributed over the CDN. A CDN-enabled
        container is publicly accessible. </para>
    </note>
    <figure xml:id="CFinterfaces">
      <title>Cloud Files system interfaces</title>
      <mediaobject>
        <imageobject>
          <imagedata scale="60" fileref="figures/CFinterfaces_New.png"
          />
        </imageobject>
      </mediaobject>
    </figure>
  </chapter>
  <chapter xml:id="API_Operations_d1e000" 
           xmlns="http://docbook.org/ns/docbook"
           role="api-reference">
    <title>API operations for storage services</title>
   <para>This chapter describes each of the API operations provided by the Cloud Files
      service.</para>      
      <para>All requests are directed to the endpoints
      described in the <code>cloudFiles</code> section of the service catalog obtained during
      successful authentication. (For more information, see <xref linkend="Authentication-d1e639"/>
      and <xref linkend="Service-Access-Endpoints-d1e003"/>.)</para>
    <para>Following are some requirements for the storage services component:</para>
    <itemizedlist>
      <listitem>
        <para>Object and container names must be URL-encoded and UTF-8 encoded.</para>
      </listitem>
      <listitem>
        <para>Container names cannot exceed 256 bytes and cannot contain a forward slash (/).</para>
      </listitem>
      <listitem>
        <para>Object names cannot exceed 1024 bytes, but they have no character restrictions.</para>
      </listitem>
    </itemizedlist>
    <para>The following sections describe the operations that you can perform within the storage
      system: </para>
    <itemizedlist>
      <listitem>
        <para><xref linkend="accountServicesOperations_d1e000"/> describes operations that you can
          perform at the account level of the storage system.</para>
      </listitem>
      <listitem>
        <para><xref linkend="containerServicesOperations_d1e000"/> describes operations that you can
          perform on containers.</para>
      </listitem>
      <listitem>
        <para><xref linkend="objectServicesOperations_d1e000"/> describes operations that you can
          perform on objects.</para>
      </listitem>
    </itemizedlist>
    <section xml:id="accountServicesOperations_d1e000">
      <title>Account services</title>
      <para>You can perform the operations in the following table at the account level of your Cloud
        Files account.</para>
      <para>The examples in this section use sample values for the following:</para>
      <itemizedlist>
        <listitem>
          <para>account &#x2014; for example, MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880123 </para>
        </listitem>
        <listitem>
          <para>X-Auth-Token &#x2014; for example, f064c46a782c444cb4ba4b6434288f7c</para>
        </listitem>
      </itemizedlist>
      <para>For your own requests, you must use your own account information and authentication
        token. For more information, see <xref linkend="Retrieving_Auth_Token"/>. Your
        authentication token and your account information are in the service catalog that is
        produced.</para>
      
       
      <wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
        <wadl:resource href="../../src/wadl/rax-cloudFiles-api-v1.wadl#versions">
        </wadl:resource> 
        <wadl:resource href="../../src/wadl/rax-cloudFiles-api-v1.wadl#account">    
        </wadl:resource>  
      </wadl:resources>
    </section> 
  
    <section xml:id="containerServicesOperations_d1e000">
      <title>Container services</title>
      <para>You can perform the operations in the following table on containers in your Cloud Files
        account.</para>
      <para>The examples in this section use sample values for the following:</para>
      <itemizedlist>
        <listitem>
          <para>account &#x2014; for example, MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880123 </para>
        </listitem>
        <listitem>
          <para>X-Auth-Token &#x2014; for example, f064c46a782c444cb4ba4b6434288f7c</para>
        </listitem>
        <listitem>
          <para>container &#x2014; for example, MyContainer</para>
        </listitem>
      </itemizedlist>
      <para>For your own requests, you must use your own account information, authentication token,
        and container names. For more information, see <xref linkend="Retrieving_Auth_Token"/>. Your
        authentication token and your account information are in the service catalog that is
        produced.</para>
      <wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
        <wadl:resource href="../../src/wadl/rax-cloudFiles-api-v1.wadl#container">    
        </wadl:resource>  
      </wadl:resources>
    </section> 
    
    <section xml:id="objectServicesOperations_d1e000">
      <title>Object services</title>
      <para>You can perform the operations in the following table on objects in your Cloud Files
        containers.</para>
      <para>The examples in this section use sample values for the following:</para>
      <itemizedlist>
        <listitem>
          <para>account &#x2014; for example, MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880123 </para>
        </listitem>
        <listitem>
          <para>X-Auth-Token &#x2014; for example, f064c46a782c444cb4ba4b6434288f7c</para>
        </listitem>
        <listitem>
          <para>container &#x2014; for example, MyContainer</para>
        </listitem>
        <listitem>
          <para>object &#x2014; for example, MyObject</para>
        </listitem>
      </itemizedlist>
      <para>For your own requests, you must use your own account information, authentication token,
        container names, and object names. For more information, see <xref
          linkend="Retrieving_Auth_Token"/>. Your authentication token and your account information
        are in the service catalog that is produced.</para>
      <wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">  
         <wadl:resource href="../../src/wadl/rax-cloudFiles-api-v1.wadl#object">    
         </wadl:resource>  
      </wadl:resources>   
    </section>    

  </chapter>
  <chapter xml:id="Pseudo-Hierarchical_Folders_Directories-d1e1580" >
    <title>Pseudo hierarchical folders and directories</title>
    <remark>02-16-12 dsh reworked this section / as path and its
      elements / are not supported</remark>
    <para>Although you cannot nest directories in Cloud Files, you can simulate a hierarchical
      structure within a single container by adding forward slash characters (<code>/</code>) in the
      object name. To navigate the pseudo directory structure, you can use the
        <code>delimiter</code> query parameter. For an illustration, see the examples in this
      section. </para>
    <note>
      <para>In the examples, the objects reside in a container called <code>backups</code>. Within
        that container, the objects are organized in a pseudo directory called <code>photos</code>.
        Remember that the container name is not displayed in the example, but that it is a part of
        the object URIs. For example, the URI of the file <code>me.jpg</code> is
          <uri>https://storage.clouddrive.com/v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880123/backups/photos/me.jpg</uri>. </para>
    </note>
    <para> To display a list of all the objects in the storage container, use a &GET; operation
      without a <code>delimiter</code> or <code>prefix</code> parameter. </para>
    <programlisting language="bash">GET /v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880123/backups</programlisting>
    <para> The system returns status code 200 OK and the requested list of objects. </para>
    <programlisting language="bash">photos/animals/cats/persian.jpg
photos/animals/cats/siamese.jpg
photos/animals/dogs/corgi.jpg
photos/animals/dogs/poodle.jpg
photos/animals/dogs/terrier.jpg
photos/me.jpg
photos/plants/fern.jpg
photos/plants/rose.jpg</programlisting>
    <para> To limit the displayed results, use the <code>delimiter</code> parameter defined as a
      forward slash (/), as shown in the following example. </para>
    <programlisting language="bash">GET /v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880123/backups?delimiter=/</programlisting>
    <para> The system returns status code 200 (OK) and the requested matching objects. Because the
      request used the slash, only the pseudo directory <code>photos/</code> is displayed, as shown
      in the following example. Remember that the returned values from a <code>delimiter</code>
      query that uses a slash are not real objects. They have a <code>Content-Type</code> of
        <code>application/directory</code> and are in a <code>subdir</code> section of the JSON and
      XML results. </para>
    <programlisting language="bash">photos/</programlisting>
    <para>To view the objects inside a pseudo directory, including further nested pseudo
      directories, use the <code>prefix</code> parameter with the <code>delimiter</code> parameter. </para>
    <programlisting language="bash" >GET /v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880123/backups?prefix=photos/&#38;delimiter=/</programlisting>
    <para>The system returns status code 200 (OK) and the objects and pseudo directories within the
      top-level pseudo directory, as shown in the following example. </para>
    <programlisting language="bash">photos/animals/ 
photos/plants/
photos/me.jpg</programlisting>
    <para>There is no limit to the number of nested pseudo directories you can create. To navigate
      through them, use a longer <code>prefix</code> parameter coupled with the
        <code>delimiter</code> parameter. In the following example, the pseudo directory
        <code>animals</code> contains a pseudo directory called <code>dogs</code>. To navigate
      directly to the files contained within <code>dogs</code>, enter the command following.</para>
    <programlisting language="bash">GET /v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880123/backups?prefix=photos/animals/dogs/&#38;delimiter=/</programlisting>
    <para>The system returns status code 200 (OK) and the following objects and pseudo directories
      within the nested pseudo directory. </para>
    <programlisting language="bash">photos/animals/dogs/corgi.jpg
photos/animals/dogs/poodle.jpg
photos/animals/dogs/terrier.jpg</programlisting>
  </chapter>
  <chapter xml:id="containerMetadataOptions_d1e001">
    <title>Additional container services information</title>
    <para>This section provides additional metadata options for containers in Cloud Files.</para>    
   <section xml:id="Container_ACLs-d1e2222">
      <title>Container access control lists</title>
      <para>The Cloud Files access control list (ACL) feature allows account owners to specify read
        or write access to a particular container for a particular user. </para>
      <para>Cloud Files ACLs provide the following metadata headers that you use to define
        container-level access policies:<itemizedlist>
          <listitem>
            <para><code>X-Container-Read</code> – This header specifies a comma-delimited list of
              users that can read the container (allows the GET method for all objects in the
              container).</para>
          </listitem>
          <listitem>
            <para><code>X-Container-Write</code> – This header specifies a comma-delimited list of
              users that can write to the container (allows PUT, POST, COPY, and DELETE methods for
              all objects in the container).</para>
          </listitem>
        </itemizedlist></para>
      <para>Space before or after a comma in the comma-delimited list of users is acceptable. Valid
        values for these headers are zero to many users.</para>
      <para>You can set these headers only on containers, and they apply to all objects within the
        container. </para>
      <note>
        <para>The account owner does not need to be included as a user in the headers because the
          account owner always has read and write access to everything in their Cloud Files account. </para>
        <para>However, the users specified in the headers need to have a valid authentication token
          for the account to be able to read objects in the container or write to the container.
        </para>
      </note>
      <para>You can use the operation to show container metadata to show the absence of the
          <code>X-Container-Read</code> or <code>X-Container-Write</code> header for an existing
        container, such as <code>MyContainer</code> in the following example. </para>
      <example>
        <title>Show container metadata before adding ACL headers: HTTP request</title>
        <programlisting language="bash">HEAD /v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880123/MyContainer HTTP/1.1
Host: storage.clouddrive.com
X-Storage-Token: 182f9c0af0e828cfe3281767d29d19f4 </programlisting>
      </example>
      <example>
        <title>Show container metadata before adding ACL headers: HTTP response</title>
        <programlisting language="bash">HTTP/1.1 204 No Content
X-Container-Object-Count: 2 
X-Container-Bytes-Used: 76 
Accept-Ranges: bytes 
X-Trans-Id: tx3aa52e951fc64b63bc1fda27902b9bd3 
Content-Length: 80 
Date: Mon, 07 Apr 2014 01:29:22 GMT </programlisting>
      </example>
      <para>Update the existing container to set the <code>X-Container-Read</code> and
          <code>X-Container-Write</code> metadata headers to enable read and write access for
          <code>user1</code>, <code>user2</code>, and <code>user3</code>.<example>
          <title>Update container to add ACL headers: HTTP request</title>
          <programlisting language="bash">POST /v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880123/MyContainer HTTP/1.1
Host: storage.clouddrive.com
X-Auth-Token: f064c46a782c444cb4ba4b6434288f7c
X-Container-Read: user1, user2, user3
X-Container-Write: user1, user2, user3</programlisting>
        </example>
      </para>
      <para>Repeat the operation to show container metadata and confirm the metadata change.</para>
      <example>
        <title>Show container metadata after adding ACL headers: HTTP request</title>
        <programlisting language="bash">HEAD /v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880123/MyContainer HTTP/1.1
Host: storage.clouddrive.com
X-Storage-Token: 182f9c0af0e828cfe3281767d29d19f4 </programlisting>
      </example>
      <example>
        <title>Show container metadata after adding ACL headers: HTTP response</title>
        <programlisting language="bash">HTTP/1.1 204 No Content
X-Container-Object-Count: 2
X-Container-Read: user1, user2, user3
X-Container-Write: user1, user2, user3
X-Container-Bytes-Used: 76
Accept-Ranges: bytes
X-Trans-Id: txb40eb86d949345f7bc66b01e8b63c3a5
Content-Length: 80
Date: Mon, 07 Apr 2014 02:20:12 GMT</programlisting>
      </example>
     <para>For more information about ACLS and using them with RBAC (<xref linkend="RBAC"/>), see
        the blog post, <link
          xlink:href="http://www.rackspace.com/blog/create-cloud-files-container-level-access-control-policies/"
          >"Create Cloud Files Container-Level Access Control Policies".</link></para>
    </section>
    <section xml:id="Container_Quotas-d1e2222">
      <title>Container quotas</title>
      <para>Users (most likely account administrators) who have the ability to set container
        metadata can implement simple quotas on Cloud Files containers. Setting container quotas can
        be useful for limiting containers for non-admin users, FormPost uploads, or just as a sanity
        check. (For information about FormPost, see <xref linkend="FormPost-d1a555"/>).</para>
      <para>Any object <command>PUT</command> operations that exceed a quota return a 413 response
        (request entity too large) with a descriptive body.</para>
      <para>Because the storage system is a true distributed system and because it accepts
        simultaneous requests, the quotas might not be enforced exactly. For example, if the quota
        is 5 GB and two users try to store a 5 GB file at exactly the same time, both operations
        would be allowed to store the file because at the time of both requests the container had
        sufficient remaining quota. </para>
      <para>Also, for chunked file uploads, the storage system cannot reject transfers that will
        eventually exceed the quota because the storage system does not know whether the end of the
        file will exceed the quota. (For more information about chunked file uploads, see <xref
          linkend="Chunked_Transfer_Encoding-d1e2092"/>.</para>
      <para>You set quotas by adding metadata to the container. The available metadata values are
        described in the following table.</para>
      <para>
        <table rules="all">
          <caption>Metadata values for setting container quotas</caption>
          <col width="50%"/>
          <col width="50%"/>
          <thead>
            <tr>
              <th>Metadata header</th>
              <th>Description</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td><code>X-Container-Meta-Quota-Bytes</code></td>
              <td>Maximum size of the container, in bytes</td>
            </tr>
            <tr>
              <td><code>X-Container-Meta-Quota-Count</code></td>
              <td>Maximum number of objects in the container</td>
            </tr>
          </tbody>
        </table>
      </para>
    </section>
    <section xml:id="Acess_Log_Delivery-d1e2200">
      <title>Access log delivery</title>
      <para>You can use access log delivery to analyze the number of requests for each object, the
        client IP address, and time-based usage patterns (such as monthly or seasonal usage). </para>
      <para>Access log delivery is set on the container, and every object in the container is
        tracked. To enable access logs for a container, set the metadata
          <code>X-Container-Meta-Access-Log-Delivery</code> header to <code>True</code>. If you have
        multiple containers that you want to track, you must set the metadata header to
          <code>TRUE</code> for each container. When your first log is delivered, the container
        .ACCESS_LOGS is created. This container holds the access logs for every container for which
        you turn on logging. Log files exist until you delete them. To turn off logging, set the
          <code>X-Container-Meta-Access-Log-Delivery</code> header to <code>FALSE</code>. </para>
      <para>Log files are named according to the following pattern: container name, log date, log
        hour, and MD5 hash. For example:</para>
      <para><code>Media/2012/10/01/16/096e6c4473f235db081deb51f42a8d98.log.gz </code></para>
      <para>In this example, <code>Media</code> is the name of the container, 2012/10/01 is the date
        (October 1, 2012), and 16 is the hour that the log file was created. There might be multiple
        files for a given hour because the storage system splits log files based on both time and
        log file size. All times in the access logs are UTC time. </para>
<!--  <remark>07/16/2014 Based on a support ticket, I removed the note below but added the para above. But then 
      the CF team decided neither should be here. And that there needs to be a CDN access log delivery section.
      I am awaiting examples for that section.
      </remark>
      <para>In the log files, the date is stored the same way for both standard containers and CDN
        log files. The format is DD/MM/YYYY (for example, 16/07/2014), as shown in <xref
          linkend="exampleAccessLogEntries-d1e01"/>. 
      </para> 
      <note><para>In the CDN log files, the date is stored differently than it is for standard containers. 
      Standard containers store the month as a 2-digit number, as shown in the pattern above, while CDN 
      containers store the month as 3 letters because this is the way it is delivered in the Acamai CDN 
      log files.</para></note>
-->
      <para>Within the gzip logs, the format of the entries is similar to National Center for
        Supercomputing Applications (NCSA) combined log format, but without cookies. The pattern
        follows. The dashes (<parameter>-</parameter>) denote fields that the NCSA combined log
        format dictates be present but that Cloud Files does not capture. </para>
      <para><code>client_ip - - [day/month/year:hour:minute:second timezone] “method request
          HTTP_version” return_code bytes_sent “referrer” “user_agent”</code></para>
      <para>The following example shows log entries. </para>
      <example xml:id="exampleAccessLogEntries-d1e01">
        <title>Example access log entries</title>
        <programlisting language="bash">   50.56.228.64 - - [27/08/2012:16:50:22 +0000] "PUT /v1/
        MossoCloudFS_bb88c7b9-ea5b-49af-82fc-376ff241963c/CharacterTest_%2521 
        HTTP/1.0" 401 0 "-" "python-requests/0.13.8 
        CPython/2.7.3 Linux/3.2.0-29-generic"
   50.56.228.64 - - [27/08/2012:16:53:49 +0000] "PUT /v1/
        MossoCloudFS_bb88c7b9-ea5b-49af-82fc-376ff241963c/CharacterTest_%2521
        /object_%2521 HTTP/1.0" 201 118 "-" "python-requests/0.13.8 
        CPython/2.7.3 Linux/3.2.0-29-generic"  
   50.56.228.64 - - [27/08/2012:16:53:47 +0000] "PUT /v1/
        MossoCloudFS_bb88c7b9-ea5b-49af-82fc-376ff241963c/CharacterTest_%2521 
        HTTP/1.0" 202 58 "-" "python-requests/0.13.8 
        CPython/2.7.3 Linux/3.2.0-29-generic"       
   50.56.228.64 - - [27/08/2012:16:50:36 +0000] "PUT /v1/
        MossoCloudFS_bb88c7b9-ea5b-49af-82fc-376ff241963c/CharacterTest_%2521 
        HTTP/1.0" 401 0 "-" "python-requests/0.13.8 
        CPython/2.7.3 Linux/3.2.0-29-generic"
</programlisting>
      </example>
    </section>
  </chapter>
  <chapter xml:id="additionalObjectServices-d1e001">
    <title>Additional object services information</title>
    <para>This sections provides additional information about using objects in Cloud Files.</para>
    <section xml:id="Chunked_Transfer_Encoding-d1e2092">
      <title>Chunked transfer encoding</title>
      <para>You can upload data without knowing in advance the amount
        of data to be uploaded. You can do this by specifying the HTTP
        header <code>Transfer-Encoding: chunked</code> and not using a
          <code>Content-Length</code> header. A good use of this
        feature would be performing a database dump, piping the output
        to gzip, and then piping the gzip file directly to Cloud Files
        without writing the data to disk to compute the file size. If
        you attempt to upload more than 5 GB, the server closes the
        connection and removes the previously sent data from the
        system. You must ensure that the data that you transfer is
        less than 5 GB or split it into 5 GB chunks, each in its own
        storage object.</para>
      <para>If you have files that are larger than 5 GB and you want to use Cloud Files, you can
        segment the files before you upload them, upload them to the same container, and then use a
        manifest file to allow downloading of a concatenated object that contains all the segmented
        objects. For more information, see <xref linkend="Large_Object_Creation-d1e2019"/>.</para>
      <example>
        <title>Upload unspecified quantity of data: HTTP request</title>
        <programlisting language="bash">PUT /v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880123/MyContainer/MyObject HTTP/1.1
Host: storage.clouddrive.com
X-Auth-Token: f064c46a782c444cb4ba4b6434288f7c
Transfer-Encoding: chunked
X-Object-Meta-PIN: 1234</programlisting>
      </example>
      <example>
        <title>Upload unspecified quantity of data response</title>
        <programlisting language="bash">19
A bunch of data broken up
D
into chunks.
0</programlisting>
      </example>
    </section>
    <section xml:id="Create-Large-Objects-d10e">
      <title>Creating large objects</title>
      <para>The content of an object cannot be larger than 5 GB, by default. However, you can store
        a larger amount of content by using the following types of objects:</para>
      <itemizedlist>
        <listitem>
          <para>Segment objects: You divide your content into pieces and upload each piece into its
            own object, which is a segment object. </para>
        </listitem>
        <listitem>
          <para>Manifest objects: You create a manifest object that "points to" the segment
            objects.</para>
        </listitem>
      </itemizedlist>
      <para>Segment objects do not have any special features and can be created, updated,
        downloaded, and deleted. However, a manifest object is special&#x2014;when you download, the
        system concatenates the contents of the segment objects and returns the concatenation in the
        response body of the request. This behavior extends to the response headers returned by
          <command>GET</command> and <command>HEAD</command> operations. The value of the
          <code>Content-Length</code> header is the total size of all segment objects, and the value
        of the <code>ETag</code> header is calculated by taking the <code>ETag</code> value of each
        segment, concatenating them together, and then returning the MD5 checksum of the
        result.</para>
      <note>
        <para>If you use a manifest object as the source in a <command>COPY</command> operation, the
          new object is a "normal" object (not segmented). If the total size of the source segment
          objects exceeds 5 GB, the <command>COPY</command> operation fails. However, you can make a
          duplicate of the manifest object. This new object can be larger than 5 GB.</para>
      </note>
      <para>Following are the types of manifest objects:</para>
      <itemizedlist>
        <listitem>
          <para>Dynamic large objects: The manifest object has no content. However, it has the
              <code>X-Object-Manifest</code> metadata header. The value of this header is
                <code><replaceable>container</replaceable>/<replaceable>prefix</replaceable></code>
            , where <code><replaceable>container</replaceable></code> is the name of the container
            where the segment objects are stored and <code><replaceable>prefix</replaceable></code>
            is a string that all the segment objects have in common. </para>
        </listitem>
        <listitem>
          <para>Static large objects: The manifest object content is an ordered list of the names of
            the segment objects in JSON format.</para>
        </listitem>
      </itemizedlist>
      <para>Although both types of manifest objects have similar behavior, there are differences as
        explained in the following table.</para>
      <?hard-pagebreak?>
      <table rules="all">
        <caption>Comparison of static and dynamic large objects</caption>
        <col width="33%"/>
        <col width="34%"/>
        <col width="33%"/>
        <thead>
          <tr>
            <th>Feature</th>
            <th>Static large object</th>
            <th>Dynamic large object</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>End-to-end integrity</td>
            <td>Assured. The list of segments includes the MD5 checksum (ETag) of each segment. You
              cannot upload the manifest object if the ETag in the list differs from the segment
              object already uploaded. If a segment is somehow lost, an attempt to download the
              manifest object results in an error.</td>
            <td>Not assured. The eventual consistency model means that although you have uploaded a
              segment object, it might not appear in the container list immediately. If you download
              the manifest before the object appears in the container, the object will not be part
              of the content returned in response to a <command>GET</command> request.</td>
          </tr>
          <tr>
            <td>Upload order</td>
            <td>The segment objects must be uploaded before the manifest object.</td>
            <td>You can upload manifest and segment objects in any order. We recommend that you
              upload the manifest object after the segments in case a premature download of the
              manifest occurs. However, this is not enforced.</td>
          </tr>
          <tr>
            <td>Removal or addition of segment objects</td>
            <td>You cannot add or remove segment objects from the manifest. However, you can create
              a completely new manifest object of the same name with a different manifest list.</td>
            <td>You can upload new segment objects or remove existing segments&#x2014;the names must
              simply match the <code>&lt;prefix></code> supplied in the
                <code>X-Object-Manifest</code> header.</td>
          </tr>
          <tr>
            <td>Segment object size and number</td>
            <td>Segment objects must be at least 1 MB in size, by default. The final segment object
              can be any size. By default, a maximum of 1000 segments are supported.</td>
            <td>Segment objects can be of any size.</td>
          </tr>
          <tr>
            <td>Segment object container name</td>
            <td>The manifest list includes the container name of each object (that is, segment
              objects might be in different containers).</td>
            <td>All segment objects must be in the same container.</td>
          </tr>
          <tr>
            <td>Manifest object metadata</td>
            <td>The object has the <code>X-Static-Large-Object</code> metadata header set to
                <code>True</code>. You do not set this metadata directly. Instead the system sets it
              when you use a <command>PUT</command> operation on a static manifest object.</td>
            <td>The <code>X-Object-Manifest</code> header value is
                  <code><replaceable>container</replaceable>/<replaceable>prefix</replaceable></code>,
              indicating where the segment objects are located. You supply this request header in
              the <command>PUT</command> operation</td>
          </tr>
          <tr>
            <td>Making a copy of the manifest object</td>
            <td>To make a copy of the manifest object, include the <code>?multipart-
                manifest=get</code> query string with the <command>COPY</command> operation. The new
              object contains the same manifest as the original. The segment objects are not copied.
              Instead, both the original and new manifest objects share the same set of segment
              objects.</td>
            <td>The <command>COPY</command> operation does not create a manifest object. To
              duplicate a manifest object, use the <command>GET</command> operation to read the
              value of <code>X-Object-Manifest</code> and use this value in the
                <code>X-Object-Manifest</code> request header in a <command>PUT</command> operation.
              This creates a new manifest object that shares the same set of segment objects as the
              original manifest object.</td>
          </tr>
        </tbody>
      </table>
      <section xml:id="Large_Object_Creation-d1e2019">
        <title>Creating a dynamic large object</title>
        <para>Objects that are larger than 5 GB must be segmented into smaller segment objects
          before you upload them. You then upload the segment objects as you would any other object.
          You create a manifest object that tells Cloud Files how to find the segments that make up
          the large object. The segments remain individually addressable, but retrieving the
          manifest object streams all the segments, concatenated. There is no limit to the number of
          segments that can be a part of a single large object. Dynamic large objects rely on the
            <emphasis role="italic">eventual consistency model</emphasis>.</para>
        <note>
          <para>In this context, the eventual consistency model means that although you have
            uploaded a segment object, it might not appear in the container list immediately. If you
            download the manifest before the segment object appears in the container, the object
            will not be part of the content returned in response to a &GET; request.</para>
        </note>
        <para>To ensure that the download works correctly, you must upload all the object segments
          to the same container and ensure that each object name is prefixed in such a way that the
          names sort in the order in which they should be concatenated. You also create and upload a
          manifest file. The manifest file is simply a zero-byte file with the extra
            <code>X-Object-Manifest:
              <replaceable>container</replaceable>/<replaceable>prefix</replaceable></code> header,
          where <code><replaceable>container</replaceable></code> is the container that the object
          segments are in and <code><replaceable>prefix</replaceable></code> is the common prefix
          for all the segments. The container and common prefix must be UTF-8 encoded and
          URL-encoded in the <code>X-Object-Manifest</code> header.</para>
        <para>It is best to upload all the segments first and then create or update the manifest.
          With this method, the full object will not be available for downloading until the upload
          is complete. Also, you can upload a new set of segments to a second location and then
          update the manifest to point to this new location. During the upload of the new segments,
          the original manifest will still be available to download the first set of
          segments.</para>
        <note>
          <para>The segments are deletable by the user at any time. If a segment is deleted by
            mistake, a dynamic large object, having no way of knowing the segment was ever there,
            ignores the deleted file, and the user is returned an incomplete file.</para>
        </note>
        <para>The following examples show how to upload a segment of a large object, the next segment
          of a large object, and the manifest. </para>
        <example>
          <title>Upload a segment of a large object: HTTP request</title>
          <programlisting language="bash">PUT /v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880123/MyContainer/MyObject HTTP/1.1
Host: storage.clouddrive.com
X-Auth-Token: f064c46a782c444cb4ba4b6434288f7c
ETag: 8a964ee2a5e88be344f36c22562a6486
Content-Length: 1</programlisting>
        </example>
        <example>
          <title>Upload a segment of a large object response</title>
          <programlisting language="bash">s</programlisting>
        </example>
        <para>No response body is returned. A status code of 201 (Created) indicates a successful
          write. Status code 411 (Length Required) indicates that the <code>Content-Length</code>
          header is missing. If the MD5 checksum calculated by the storage system does not match the
          optionally supplied ETag value, a 422 (Unprocessable Entity) status code is
          returned.</para>
        <para>You can continue uploading segments as this example shows, prior to uploading the
          manifest.</para>
        <example>
          <title>Upload the next segment of the large object : HTTP request</title>
          <programlisting language="bash">PUT /v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880123/MyContainer/MyObject HTTP/1.1
Host: storage.clouddrive.com
X-Auth-Token: f064c46a782c444cb4ba4b6434288f7c
ETag: 8a964ee2a5e88be344f36c22562a6486
Content-Length: 1</programlisting>
        </example>
        <example>
          <title>Upload the next segment of the large object response</title>
          <programlisting language="bash">w</programlisting>
        </example>
        <para>Next, upload the manifest that you created that indicates the container in which the
          object segments reside. Note that uploading additional segments after the manifest is
          created causes the concatenated object to be that much larger, but you do not need to
          re-create the manifest file for subsequent additional segments.</para>
        <example>
          <title>Upload manifest: HTTP request</title>
          <programlisting language="bash">PUT /v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880123/MyContainer/MyObject HTTP/1.1
Host: storage.clouddrive.com
X-Auth-Token: f064c46a782c444cb4ba4b6434288f7c
Content-Length: 0
X-Object-Manifest: container/prefix/object/segments</programlisting>
        </example>
        <example>
          <title>Upload manifest response</title>
          <programlisting language="bash">[...]</programlisting>
        </example>
        <para>A <command>GET</command> request to the manifest object returns the concatenation of
          the objects from the manifest.</para>
        <para>When you perform a <command>GET</command> or <command>HEAD</command> request on the
          manifest, the response's <code>Content-Type</code> is the same as the
            <code>Content-Type</code> that was set during the <command>PUT</command> request that
          created the manifest. You can easily change the <code>Content-Type</code> by reissuing the
          &PUT; request.</para>
        <note>
          <para>The ETag in the response for a <command>GET</command> or <command>HEAD</command> on
            the manifest file is the MD5 sum of the concatenated string of ETags for each of the
            segments in the manifest. Usually, the ETag is the MD5 sum of the contents of the
            object, and that holds true for each segment independently. But it is not meaningful to
            generate such an ETag for the manifest itself, so this method was chosen to at least
            offer change detection.</para>
        </note>
      </section>
      <section xml:id="Static_Large_Object-d1e2226">
        <title>Creating a static large object</title>
        <para>Static large object (SLO) support is similar to dynamic large object (DLO) support
          because it enables you to upload many objects concurrently and later download them as a
          single object. However, unlike dynamic large object support, static large object support
          does not rely on the eventual consistency model for the container listings. Instead,
          static large object support uses a user-defined manifest of the object segments.</para>
        <para>The benefits of using static large objects are as follows:<itemizedlist>
            <listitem>
              <para>The objects that are uploaded and downloaded can be in different containers,
                which can improve performance.</para>
            </listitem>
            <listitem>
              <para>There is an explicit list of segments, instead of an implied list as with
                dynamic large objects.</para>
            </listitem>
          </itemizedlist></para>
        <para>You create a static large object by performing the following steps:</para>
        <orderedlist>
          <listitem>
            <para>Divide your content into pieces and create (upload) a segment object to contain
              each piece. You must record the <code>ETag</code> response header returned by the
                <command>PUT</command> operation. Alternatively, you can calculate the MD5 checksum
              of the segment prior to uploading and include this in the <code>ETag</code> request
              header. Doing so ensures that the upload cannot corrupt your data. For detailed
              information, see <xref linkend="Uploading_the_Segments-d1e2228"/>.</para>
            <para> The maximum number of segment objects per static large object is 1,000. Each
              segment, except for the final one, must be at least 1 MB.</para>
          </listitem>
          <listitem>
            <para>Create a manifest object by listing the name of each segment object along with its
              size and MD5 checksum, in order. You indicate that this is a manifest object by
              including the ?<code>multipart-manifest=put</code> query string at the end of the
              manifest object name. For detailed information, see <xref
                linkend="Uploading_the_Manifest-d1e2227"/>.</para>
          </listitem>
        </orderedlist>
        <section xml:id="Uploading_the_Segments-d1e2228" >
          <title>Uploading the segments</title>
          <para>Upload your segment objects. All the segments, except the last one, need to be
            larger than 1 MB (1048576 bytes). It might help organizationally to keep them in the
            same container, but it is not required. You need the following information about each
            segment for the next step, uploading the manifest object: </para>
          <itemizedlist>
            <listitem>
              <para><code>path</code> &#x2013; The container and object name in the following
                format:
                    <code><replaceable>containerName</replaceable>/<replaceable>objectName</replaceable></code></para>
            </listitem>
            <listitem>
              <para><code>etag</code> &#x2013; The <code>ETag</code> header from the successful 201
                response of the <command>PUT</command> operation that uploaded the segment. This is
                the MD5 checksum of the segment object's data. </para>
            </listitem>
            <listitem>
              <para><code>size_bytes</code> &#x2013; The segment object's size in bytes. This value
                must match the <code>Content-Length</code> of that object.</para>
            </listitem>
          </itemizedlist>
        </section>
        <section  xml:id="Uploading_the_Manifest-d1e2227">
          <title>Uploading the manifest</title>
          <para>After you have uploaded the objects to be concatenated, you upload a manifest
            object. The request must use the <command>PUT</command> operation, with the following
            query parameter at the end of the manifest object name:</para>
          <programlisting language="bash">?multipart-manifest=put</programlisting>
          <para>The body of the <command>PUT</command> operation is an ordered list of files in JSON
            data format. The data to be supplied for each segment is as follows:</para>
          <itemizedlist>
            <listitem>
              <para><code>path</code> &#x2013; The container and object name in the following
                format:
                    <code><replaceable>containerName</replaceable>/<replaceable>objectName</replaceable></code></para>
            </listitem>
            <listitem>
              <para><code>etag</code> &#x2013; The <code>ETag</code> header from the successful 201
                response of the <command>PUT</command> operation that uploaded the segment. This is
                the MD5 checksum of the segment object's data. </para>
            </listitem>
            <listitem>
              <para><code>size_bytes</code> &#x2013; The segment object's size in bytes. This value
                must match the <code>Content-Length</code> of that object.</para>
            </listitem>
          </itemizedlist>
          <para>Following is an example containing three segment objects. This example illustrates
            that in contrast to dynamic large objects, you can use a number of containers and the
            object names do not have to conform to a specific pattern.</para>
          <example>
            <title>Static large object manifest list</title>
            <programlisting language="bash">[
        {
          "path": "/mycontainer/objseg1",
          "etag": "0228c7926b8b642dfb29554cd1f00963",
          "size_bytes": 1468006
        },
        {
          "path": "/mycontainer/pseudodir/seg-obj2",
          "etag": "5bfc9ea51a00b790717eeb934fb77b9b",
          "size_bytes": 1572864
        },
        {
          "path": "/other-container/seg-final",
          "etag": "b9c3da507d2557c1ddc51f27c54bae51",
          "size_bytes": 256
        }
]</programlisting>
          </example>
          <para>The <code>Content-Length</code> request header must contain the length of the JSON
            content, not the length of the segment objects. However, after the
              <command>PUT</command> operation is complete, the <code>Content-Length</code> metadata
            is set to the total length of all the object segments. A similar situation applies to
            the <code>ETag</code> header. If it is used in the <command>PUT</command> operation, it
            must contain the MD5 checksum of the JSON content. The <code>ETag</code> metadata value
            is then set to be the MD5 checksum of the concatenated <code>ETag</code> values of the
            object segments. You can also set the <code>Content-Type</code> request header and
            custom object metadata. </para>
          <para>When the <command>PUT</command> operation sees the
              <code>?multipart-manifest=put</code> query string, it reads the request body and
            verifies that each segment object exists and that the sizes and ETags match. If there is
            a mismatch, the <command>PUT</command> operation fails. </para>
          <para>When you upload the manifest object, the middleware reads every segment passed in
            and verifies the size and ETag of each. If any of the objects do not match (for example,
            an object is not found, the size or <code>ETag</code> is mismatched, or the minimum size
            is not met), or if everything does match and a manifest object is created, Cloud Files
            issues a response code. The response codes are the same as those issued for the create
            or update object operation (see <olink targetdoc="cf-devguide"
              targetptr="PUT_createobject_v1__account___container___object__objectServicesOperations_d1e000"
              >“Create or update object”</olink>). </para>
          <para>When Cloud Files creates the manifest object, Cloud Files sets the
              <code>X-Static-Large-Object</code> metadata header to <code>True</code>, indicating
            that this is a static object manifest. </para>
          <para>When the manifest object is uploaded, you can be generally assured that every
            segment in the manifest exists and that it matches the specifications. However, nothing
            prevents a user from breaking the static large object download by deleting or replacing
            a segment that is referenced in the manifest. Users should use caution when handling the
            segments.</para>
          <para>The order of the segments listed in the manifest determines the order in which the
            segments are concatenated when downloaded. The manifest can reference objects in
            separate containers, which improves concurrent upload speed. A single object can be
            referenced by multiple manifests.</para>
        </section>
        <section xml:id="Retrieving_a_Large_Object-d1e2227">
          <title>Retrieving a large object</title>
          <para>A <command>GET</command> request to the manifest object returns the concatenated
            content of the segment objects listed in the manifest. If any of the segments from the
            manifest are not found or their <code>ETag</code> or <code>Content-Length</code> values
            no longer match, the <command>GET</command> operation fails and you receive partial
            results (up to the point of the failure due to not matching). As a result, a 409
            (Conflict) status code is logged.</para>
          <para>The headers from the <command>GET</command> or <command>HEAD</command> request
            return metadata for the manifest object as follows:</para>
          <itemizedlist>
            <listitem>
              <para><code>Content-Length</code>: The total size of the static large object (the sum
                of the sizes of the segments in the manifest)</para>
            </listitem>
            <listitem>
              <para><code>X-Static-Large-Object: True</code></para>
            </listitem>
            <listitem>
              <para><code>ETag</code>: The ETag of the static large object (generated the same way
                as a dynamic large object)</para>
            </listitem>
          </itemizedlist>
          <para>The GET request with the following query parameter returns the actual manifest file
            contents:</para>
          <programlisting language="bash">?multipart-manifest=get  </programlisting>
          <para>The response body contains generated JSON. The resulting list is not identically
            formatted like the manifest that you originally used in the <command>PUT</command>
            operation (<code>?multipart-manifest=put</code>). </para>
          <para>The main purpose of the <command>GET</command> or <command>HEAD</command> operation
            is for debugging.</para>
        </section>
        <section xml:id="Deleting_a_Large_Object-d1e2228">
          <title>Deleting a large object </title>
          <para>A <command>DELETE</command> operation on a manifest object deletes the manifest
            object itself. The segment objects are not affected. </para>
          <para>A <command>DELETE</command> operation with the following query parameter deletes all
            segment objects in the manifest, and then, if all are successfully deleted, the manifest
            object itself. A failure response is similar to those for the bulk delete operation
              (<xref linkend="Bulk_Delete-d1e2338.html"/>).</para>
          <programlisting language="bash">?multipart-manifest=delete</programlisting>
        </section>
        <section xml:id="Modifying_a_Large_Object-d1e2229">
          <title>Modifying a large object </title>
          <para><command>PUT</command> and <command>POST</command> operations work as follows: </para>
          <itemizedlist>
            <listitem>
              <para>A <command>PUT</command> operation overwrites the manifest object (and leaves
                the segments alone). </para>
            </listitem>
            <listitem>
              <para>A <command>POST</command> operation changes the manifest file's metadata and
                contents, as with any other object.</para>
            </listitem>
          </itemizedlist>
        </section>
        <section  xml:id="Listings_of_Containers-d1e2230">
          <title>Listing containers with static large objects </title>
          <para>In a list of containers, the size listed for a static large object manifest object
            is the total size of the concatenated segments in the manifest, not the size of the
            manifest file itself. The overall <code>X-Container-Bytes-Used</code> for the container
            (and for the account) does not reflect the total size of the manifest, but the actual
            size of the stored JSON data. This enables you to see the total size of the static large
            object in a container list, but does not inflate the bytes used for the container or the
            account.</para>
        </section>
      </section>
    </section>
    <section
      xml:id="Enabling_File_Compression_with_the_Content-Encoding_Header-d1e2198">
      <title>Enabling file compression</title>
      <para>The <code>Content-Encoding</code> header allows a file
        to be compressed while still preserving the identity of the
        underlying media type of the file, for example, a
        video.</para>
      <para>The object must be compressed before it is uploaded. Cloud Files does not perform any
        automatic compression. The <code>Content-Encoding</code> header enables the client to set
        the metadata appropriately.</para>
      <note>
        <para>The Rackspace CDN provider, Akamai, encodes HTML, JavaScript, and CSS files in gzip
          format. However, in your Cloud Files account, your files are not encoded. For more
          information, see the blog post <link
            xlink:href="http://www.rackspace.com/blog/cloud-files-cdn-compresses-at-the-edge/">Cloud
            Files CDN Compresses at the Edge</link>. Compressing these objects helps lower costs and
          increases download speeds. </para>
      </note>
      <para>In the following example, the <code>Content-Encoding</code> header indicates the type
        of encoding used on the data.</para>
      <example>
        <title>Content-Encoding: HTTP request</title>
        <programlisting language="bash">PUT /v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880123/MyContainer HTTP/1.1
Host: storage.clouddrive.com
X-Auth-Token: f064c46a782c444cb4ba4b6434288f7c
Content-Type: video/mp4
Content-Encoding: gzip</programlisting>
      </example>
    </section>
    <section
      xml:id="Enabling_Browser_Bypass_with_the_Content-Disposition_Header-d1e2219">
      <title>Enabling bypass of browser behavior</title>
      <para>When an object is assigned the <code>Content-Disposition</code> header, you can override
        a browser's default behavior for a file so that the browser prompts to save the file rather
        than displaying it by using default browser settings.</para>
      <para>In the following example, the <code>Content-Disposition</code> header is assigned with
        an attachment type that indicates how the file should be downloaded.</para>
      <example>
        <title>Content-Disposition: HTTP request</title>
        <programlisting language="bash">PUT /v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880123/MyContainer/MyObject HTTP/1.1
Host: storage.clouddrive.com
X-Auth-Token: f064c46a782c444cb4ba4b6434288f7c
Content-Type: image/tiff
Content-Disposition: attachment; filename=platmap.tif</programlisting>
      </example>
    </section>
    <section xml:id="Expiring_Objects-e1e3228">
      <title>Expiring objects</title>
      <para>When you perform a <command>PUT</command> or <command>POST</command> operation on an
        object and assign it either an <code>X-Delete-After</code> or <code>X-Delete-At</code>
        header, the object is scheduled for deletion. This feature is helpful for objects that you
        do not want to permanently store, such as log files, recurring full backups of a dataset, or
        documents or images that you know will be outdated at a future time.</para>
      <para>Objects that are assigned the <code>X-Delete-At</code> or <code>X-Delete-After</code>
        header are deleted within one day of the expiration time, and the object stops being served
        immediately after the expiration time.</para>
      <para>The <code>X-Delete-At</code> header requires a UNIX epoch timestamp, in integer form.
        For example, 1348691905 represents Wed, 26 Sep 2012 20:38:25 GMT. By setting the header to a
        specific epoch time, you indicate when you want the object to expire, not be served, and be
        deleted completely from the storage system. </para>
      <para>The <code>X-Delete-After</code> header takes an integer number of seconds that
        represents the amount of time from now when you want the object to be deleted. The proxy
        server that receives the request converts this header into an <code>X-Delete-At</code>
        header and calculates the deletion time using its current time plus the value given in
        seconds.</para>
      <para>To assign expiration headers to existing objects, use the <command>POST</command>
        operation.</para>
      <para>In the following example, the <code>X-Delete-At</code> header is assigned with a UNIX
        epoch timestamp in integer form for Mon, 11 Jun 2012 15:38:25 GMT. For example timestamps
        and a batch converter, go to <link xlink:href="http://www.epochconverter.com/"
          >http://www.epochconverter.com/</link>.</para>
      <example>
        <title>X-Delete-At: HTTP request </title>
        <programlisting language="bash">PUT /v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880123/MyContainer/MyObject HTTP/1.1
Host: storage.clouddrive.com
X-Auth-Token: f064c46a782c444cb4ba4b6434288f7c
Content-Type: image/jpeg
X-Delete-At: 1339429105</programlisting>
      </example>
      <para>In the following example, the <code>X-Delete-After</code> header is assigned a value
        in seconds, equivalent to 10 days. After this time, the object expires. </para>
      <example>
        <title>X-Delete-After: HTTP request </title>
        <programlisting language="bash">PUT /v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880123/MyContainer/MyObject HTTP/1.1
Host: storage.clouddrive.com
X-Auth-Token: f064c46a782c444cb4ba4b6434288f7c
Content-Type: image/jpeg
X-Delete-After: 864000</programlisting>
      </example>
    </section>
    <section xml:id="Object_Versioning-e1e3230">
      <title>Object versioning</title>
      <para>Object versioning enables you to store multiple versions of your content so that you can
        recover from unintended overwrites and deletions. It provides an easy way to implement
        version control that can be used on any type of content. </para>
      <para>We strongly recommends that you put non-current objects in a separate container from the
        current versions of objects. After you enable object versioning, new data written to an
        object causes the last-current version to be written to the separate container. Each of the
        non-current versions has a timestamp appended to it, so you know when it was originally
        created. </para>
      <para>To enable object versioning, you perform the following steps:</para>
      <orderedlist>
        <listitem>
          <para> Create a container where your non-current versions will be written.</para>
        </listitem>
        <listitem>
          <para>On the container that holds the current versions of your objects, set the
            X-Versions-Location metadata header to point to the new non-current version container
            that you created.</para>
        </listitem>
      </orderedlist>
      <para>After you complete these steps, versioning is enabled on each object in your
        current-version container. Changes to the objects automatically create non-current versions
        in the separate container. </para>
      <para>Nothing is written to the non-current version container when you initially use a &PUT;
        operation to add an object into the current-version container. You create non-current
        versions only when you edit existing objects with a <command>PUT</command> request. These
        non-current versions are labeled according to the following schema:</para>
      <para><code>{length}{objectName}/{time stamp}</code>
      </para>
      <para>Where <code>{length}</code> is the 3-character zero-padded hexadecimal character length
        of the <code>{objectName}</code>, and <code>{timestamp}</code> indicates when the object was
        originally created as a current version. </para>
      <para> Any return status in the 2<emphasis role="italic">nn</emphasis> range, such as 202
        (Accepted), denotes success. Status codes in the 4<emphasis role="italic">nn</emphasis> or
          5<emphasis role="italic">nn</emphasis> range denote failure. If you receive an error, you
        should retry your request. Note, however, that if you specify a container that does not
        exist as your non-current version container, a status of 412 (Precondition Failed) is
        returned when you edit the versioned object. If you receive this error, verify that the
        container exists. </para>
      <para>When object versioning is enabled, requests on objects behave as follows: </para>
      <itemizedlist>
        <listitem>
          <para>A &GET; request to a versioned object returns the current version of the object,
            with no request redirects or metadata lookups required. </para>
        </listitem>
        <listitem>
          <para>A &POST; request to a versioned object updates only the current version of the
            object's metadata. It does not create a new version of the object. New versions are
            created when the content of the object changes. </para>
        </listitem>
        <listitem>
          <para>A &DELETE; request to a versioned object removes the current version of the object
            and replaces it with the most recent non-current version, moving it from the non-current
            container to the current container. This most recent non-current version carries with it
            any metadata last set on it. If you want to completely remove an object and you have
            five total versions of it, you must perform five &DELETE; operations on it. </para>
        </listitem>
      </itemizedlist>
      <note>
        <para>A large-object manifest file cannot be versioned, but it can point to versioned
          segments. </para>
      </note>
      <para>To turn off object versioning on your current version container, remove its
          <code>X-Versions-Location</code> metadata by sending a key value that is an empty string. </para>
      <example>
        <title>Object versioning with cURL</title>
        <orderedlist>
          <listitem>
            <para>Create a version-storing container named <code>versions</code>.</para>
            <programlisting language="bash">curl -i -XPUT -H "X-Auth-Token: yourAuthToken" http://yourStorageUrl/versions</programlisting>
          </listitem>
          <listitem>
            <para>Create a container named <code>current</code> with a
                <code>X-Versions-Location</code> header that references
              <code>versions</code>.</para>
            <programlisting language="bash">curl -i -XPUT -H "X-Auth-Token: yourAuthToken" \
-H "X-Versions-Location: versions" http://yourStorageUrl/current</programlisting>
          </listitem>
          <listitem>
            <para>Create an object (the first version).</para>
            <programlisting language="bash">curl -i -XPUT --data-binary 1 -H "X-Auth-Token: yourAuthToken" \
    http://yourStorageUrl/current/myobject</programlisting>
          </listitem>
          <listitem>
            <para>Create a new version of that object.</para>
            <programlisting language="bash">curl -i -XPUT --data-binary 2 -H "X-Auth-Token: yourAuthToken" \
    http://yourStorageUrl}/current/myobject</programlisting>
          </listitem>
          <listitem>
            <para>See a list of the older versions of the object. (The example includes the
              hexadecimal number for the length of the file name.)</para>
            <programlisting language="bash">curl -i -H "X-Auth-Token: yourAuthToken" \
    http://yourStorageUrl/versions?prefix=008myobject/</programlisting>
          </listitem>
          <listitem>
            <para>Delete the current version of the object and see that the older version is no
              longer in the <code>versions</code> container.</para>
            <programlisting language="bash">curl -i -XDELETE -H "X-Auth-Token: yourAuthToken" \
    http://yourStorageUrl>/current/myobject
curl -i -H "X-Auth-Token: yourAuthToken " \
    http://yourStorageUrl/versions?prefix=008myobject/
</programlisting>
          </listitem>
        </orderedlist>
      </example>
    </section>
    <section xml:id="acctToAcctCOPY-de101">
      <title>Account to account copy</title>
      <para>The account to account copy capability adds the ability to copy objects between
        different accounts on the server.  </para>
      <para>To use this capability to read from or write to the accounts, you must have a access to
        the containers. You can use a container access control list (ACL) to control access to a
        container and its objects. For more information about ACLs, see <xref
          linkend="Container_ACLs-d1e2222"/>. </para>
      <para>Use the following operations and headers to perform an account to account copy:<itemizedlist>
          <listitem>
            <para>A <command>COPY</command> command with the following headers:<itemizedlist>
                <listitem>
                  <para><code>Destination-Account</code>: Specifies the account name (which
                    corresponds to the last part of the storage URL).</para>
                </listitem>
                <listitem>
                  <para><code>Destination</code>: Used with <command>COPY</command>, specifies the
                    container and object name of the destination object in the form of
                      <code>/container/object</code>.</para>
                </listitem>
              </itemizedlist></para>
            <para>For more information about the <command>COPY</command> command, see <link
                xlink:href="http://docs.rackspace.com/files/api/v1/cf-devguide/content/COPY_copyobject_v1__account___container___object__objectServicesOperations_d1e000.html"
                >Copy object</link>.</para>
          </listitem>
          <listitem>
            <para>A <command>PUT</command> command with the following headers:<itemizedlist>
                <listitem>
                  <para><code>X-Copy-From-Account</code>: Specifies the account name (which
                    corresponds to the last part of storage URL).</para>
                </listitem>
                <listitem>
                  <para><code>X-Copy-From</code>: Used with <command>PUT</command>, specifies the
                    container and object name of the source object in the form of
                      <code>/container/object</code>.</para>
                </listitem>
              </itemizedlist></para>
            <para>For more information about the <command>PUT</command> command, see <link
                xlink:href="http://docs.rackspace.com/files/api/v1/cf-devguide/content/PUT_createobject_v1__account___container___object__objectServicesOperations_d1e000.html"
                >Create or update object</link>.</para>
          </listitem>
        </itemizedlist></para>
      <note>
        <para>If your storage URL is <code>https://storage101.dfw1.clouddrive.com/v1/
            MossoCloudFS_aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee</code>, your account name is
            <code>MossoCloudFS_aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee</code>. </para>
      </note>
      <para>Use the following examples to complete the steps to use account to account copy.<orderedlist>
          <title>COPY command steps</title>
          <listitem>
            <para>Use the <command>POST</command> command to set <code>X-Container-Write</code>
              metadata on the destination container.</para>
            <para><emphasis role="bold">Request:</emphasis></para>
            <programlisting>POST /v1/Destination_Account/Destination_Container HTTP/1.1
Host: storage.clouddrive.com
X-Auth-Token: Destination_User_Auth_Token
X-Container-Write: Source_User_Name</programlisting>
            <para><emphasis role="bold">Response:</emphasis></para>
            <programlisting>204 No Content
Content-Length: 0
Content-Type: text/html; charset=UTF-8
X-Trans-Id: tx1abc1d6005134be99b1db-0054da619adev1
Date: Tue, 10 Feb 2015 19:52:58 GMT</programlisting>
          </listitem>
          <listitem>
            <para>Use the <command>COPY</command> command to copy the object.</para>
            <para><emphasis role="bold">Request:</emphasis></para>
            <programlisting>COPY /v1/Source_Account/Source_Destination/Source_Object HTTP/1.1
Host: storage.clouddrive.com
X-Auth-Token: Source_User_Auth_Token
Destination: Destination_Container/Destination_Object
Destination-Account: Destination_User_Account   (such as, MossoCloudFS_aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee)
</programlisting>
            <para><emphasis role="bold">Response:</emphasis></para>
            <programlisting>201 Created
Content-Length: 0
X-Copied-From-Last-Modified: Tue, 13 Jan 2015 20:53:09 GMT
X-Copied-From: copy_test/new_copy_object.txt
Last-Modified: Tue, 10 Feb 2015 19:59:49 GMT
Etag: c6995201745ed71f24ba352750bde444
X-Copied-From-Account: StagingUS_xxxxxxxx-yyyy-zzzz-aaaa-bbbbbbbbbbbb
Content-Type: text/html; charset=UTF-8
X-Trans-Id: txd819a3f557de449cb0879-0054da6334dev1
Date: Tue, 10 Feb 2015 19:59:48 GMT
</programlisting>
          </listitem>
        </orderedlist><orderedlist>
          <title>PUT command steps</title>
          <listitem>
            <para>Use the POST command to set <code>X-Container-Write</code> metadata on destination
              container.</para>
            <para><emphasis role="bold">Request:</emphasis></para>
            <programlisting>POST  /v1/Destination_Account/Destination_Container HTTP/1.1
Host: storage.clouddrive.com
X-Auth-Token: Destination_User_Auth_Token
X-Container-Write: Source_User_Name</programlisting>
            <para><emphasis role="bold">Response:</emphasis></para>
            <programlisting>204 No Content
Content-Length: 0
Content-Type: text/html; charset=UTF-8
X-Trans-Id: tx0f6c102033564bb0800e3-0054da677fdev1
Date: Tue, 10 Feb 2015 20:18:07 GMT</programlisting>
          </listitem>
          <listitem>
            <para>Use the <command>PUT</command> command to copy the object.</para>
            <para><emphasis role="bold">Request:</emphasis></para>
            <programlisting>PUT  /v1/Destination_Account/Dest_Container/Dest_Object HTTP/1.1
Host: storage.clouddrive.com
X-Auth-Token: Source_User_Auth_Token
X-Copy-From: /source_container/source_object
X-Copy-From-Account: Source_User_Account   (such as, MossoCloudFS_aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee)
Content-Length: 0      (the actual value is ignored)
</programlisting>
            <para><emphasis role="bold">Response:</emphasis></para>
            <programlisting>201 Created
Content-Length: 0
X-Copied-From-Last-Modified: Tue, 10 Feb 2015 20:46:32 GMT
X-Copied-From: source/source_object.txt
Last-Modified: Tue, 10 Feb 2015 21:14:50 GMT
Etag: d41d8cd98f00b204e9800998ecf8427e
X-Copied-From-Account: StagingUS_xxxxxxxx-yyyy-zzzz-aaaa-bbbbbbbbbbbb
Content-Type: text/html; charset=UTF-8
X-Trans-Id: txe3373a175f944020a63d9-0054da74c9dev1
Date: Tue, 10 Feb 2015 21:14:49 GMT</programlisting>
          </listitem>
        </orderedlist></para>
    </section>   
  </chapter>
  <chapter xml:id="API_Operations_for_CDN_Services-d1e2386" 
    xmlns="http://docbook.org/ns/docbook"
    role="api-reference" >
    <title>API operations for CDN services</title>
    <para>This chapter provides further description for several of the API operations described in
        <xref linkend="API_Operations_d1e000"/>. These API operations have a specific purpose for
      the content delivery network (CDN) service that is available in Cloud Files.</para>
    <para>You direct the REST API methods described in this chapter to the endpoints listed in the
        <code>cloudFilesCDN</code> section of the service catalog that you obtain during successful
      authentication. (For more information, see <xref linkend="Authentication-d1e639"/> and <xref
        linkend="Service-Access-Endpoints-d1e003"/>.)</para>
    <para>A CDN-enabled container is a public container that is served by the Akamai content
      delivery network. The files in a CDN-enabled container are publicly accessible and do not
      require an authentication token for read access. However, uploading content into a CDN-enabled
      container is a secure operation and does require a valid authentication token. (Private
      containers are not CDN-enabled and the files in a private container are not publicly
      accessible.)</para>
    <para>The following sections describe the operations that you can perform within the storage
      system: </para>
    <itemizedlist>
      <listitem>
        <para><xref linkend="CDN_Account_Operations-d1e2397"/> describes operations that you can
          perform at the account level for Cloud Files CDN services.</para>
      </listitem>
      <listitem>
        <para><xref linkend="CDN_Container_Services-d1e2632"/> describes operations that you
          can perform on containers.</para>
      </listitem>
      <listitem>
        <para><xref linkend="CDN_Object_Services"/> describes operations that you can perform
          on objects.</para>
      </listitem>
    </itemizedlist>

    <section xml:id="CDN_Account_Operations-d1e2397">
      <title>CDN account services</title>
      <para>You can perform the operation in the following table at the account level of your Cloud
        Files CDN account.</para>
      <para>The examples in this section use sample values for the following:</para>
      <itemizedlist>
        <listitem>
          <para>account &#x2014; for example, MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880123 </para>
        </listitem>
        <listitem>
          <para>X-Auth-Token &#x2014; for example,  f064c46a782c444cb4ba4b6434288f7c</para>
        </listitem>
      </itemizedlist>
      <para>For your own requests, you must use your own account information and authentication
        token. For more information, see <xref linkend="Retrieving_Auth_Token"/>. Your
        authentication token and your account information are in the service catalog that is
        produced.</para>
      <wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
        <wadl:resource href="../../src/wadl/rax-cloudFilesCDN-api-v1.wadl#versions"/>
        <wadl:resource href="../../src/wadl/rax-cloudFilesCDN-api-v1.wadl#account"/>
      </wadl:resources>
    </section>
    
    <section xml:id="CDN_Container_Services-d1e2632">
      <title>CDN container services</title>
      <para>You can perform the operations in the following table on CDN-enabled containers in your
        Cloud Files account.</para>
      <para>When you CDN-enable a container, all the objects within it become available on the CDN.
        Similarly, after a container is CDN-enabled, any objects added to it through the storage
        service become CDN-enabled. After you CDN-enable a container, its publicly-available URI can
        be found with the header <code>X-Cdn-Uri</code>, and its objects can be accessed with
            <code>X-Cdn-Uri/<replaceable>objectName</replaceable></code>. By knowing this pattern,
        you can pre-generate the URI for an object before it is added to the container. </para>
      <para>When you enable a container in the CDN service, you automatically generate URIs for SSL
        and streaming usage. They are listed under the <code>X-Cdn-Ssl-Uri</code> and
          <code>X-Cdn-Streaming-Uri</code> headers. </para>
      <para>On August 13, 2012, the format of new CDN URIs changed in order to enhance the security
        of the CDN. Any URIs set in the older format (for example,
          <code>http://c25810.r10.cf1.rackcdn.com/mydog.jpg</code>) continue to work. However, any
        newly generated CDN URIs have the new format, as shown in the following example:
          <code>http://80745c48926cd286a5a0-48261ebe0e4c795a565ece6b9cca2fe8.
          r10.cf1.rackcdn.com/mydog.jpg</code>. </para>
      <note>
        <title>Note on CDN charges</title>
        <para>Monitor your CDN charges. When you CDN-enable a container, not only can anyone view
          it, but anyone can link to it. We recommend that you monitor your bandwidth usage and
          charges in the Cloud Control Panel so that you know if someone is hot-linking your
          content. For instructions about viewing your usage charges, see the Knowledge Center
          article <link
            xlink:href="http://www.rackspace.com/knowledge_center/article/protect-your-cloud-files-cdn-bill-from-unexpected-usage-0"
            > "Protect your Cloud Files CDN Bill from Unexpected Usage"</link>. </para>
      </note>
     
      <para>The examples in this section use sample values for the following:</para>
      <itemizedlist>
        <listitem>
          <para>account &#x2014; for example, MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880123 </para>
        </listitem>
        <listitem>
          <para>X-Auth-Token &#x2014; for example, f064c46a782c444cb4ba4b6434288f7c</para>
        </listitem>
        <listitem>
          <para>container &#x2014; for example, MyContainer</para>
        </listitem>
      </itemizedlist>
      <para>For your own requests, you must use your own account information, authentication token,
        and container names. For more information, see <xref linkend="Retrieving_Auth_Token"/>. Your
        authentication token and your account information are in the service catalog that is
        produced.</para>
      
      <wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
        <wadl:resource href="../../src/wadl/rax-cloudFilesCDN-api-v1.wadl#container"/>
      </wadl:resources>

    </section>
    
    <section xml:id="CDN_Object_Services">
      <title>CDN object services</title>
      <para>You can perform the operation in the following table on objects in your Cloud Files
        CDN-enabled containers.</para>
     
      <para>The examples in this section use sample values for the following:</para>
      <itemizedlist>
        <listitem>
          <para>account &#x2014; for example, MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880123 </para>
        </listitem>
        <listitem>
          <para>X-Auth-Token &#x2014; for example, f064c46a782c444cb4ba4b6434288f7c</para>
        </listitem>
        <listitem>
          <para>container &#x2014; for example, MyContainer</para>
        </listitem>
        <listitem>
          <para>object &#x2014; for example, MyObject</para>
        </listitem>
      </itemizedlist>
      <para>For your own requests, you must use your own account information, authentication token,
        container names, and object names. For more information, see  <xref
          linkend="Retrieving_Auth_Token"/>. Your authentication token and your account information
        are in the service catalog that is produced.</para>
      <warning>
        <para>You request this operation against a CDN management services URI, such as <code
            xmlns:m="http://www.w3.org/1998/Math/MathML"
                >https://cdn2.clouddrive.com/v1/<parameter>MossoCloudFS_<replaceable>aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee</replaceable></parameter>/</code>,
          as shown in <xref linkend="CDN_Service_Endpoints"/>. If you use a Storage management
          services URI by mistake, you delete your object.</para>
      </warning>
      <wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
        <wadl:resource href="../../src/wadl/rax-cloudFilesCDN-api-v1.wadl#object"/>
      </wadl:resources>
      
    </section>
  </chapter> 
  <chapter xml:id="AdditionalCDNServicesInformation" >
    <title>Additional CDN services information</title>
    <para>The chapter provides additional information about working with the Cloud Files CDN
      services.</para>
    <section xml:id="Purge_CDN-Enabled_Containers_or_Objects-d1e2747">
      <title>Purge CDN-enabled containers</title>
      <para>For a container to be purged from the CDN, you can either wait for the TTL to expire, or
        you can request that Rackspace remove, or purge, a CDN-enabled container from the network.
        After you have made the request to Rackspace through a support ticket, the system purges the
        container from the CDN, and sends an email to the address (or multiple addresses) that you
        indicate through the ticket. The email address notification is optional.</para>
      <note>
        <para>To prevent the container from going back to the CDN, first change the
            <code>X-CDN-Enabled</code> flag to <code>False</code> as shown in the section about
          CDN-enabling and disabling a container  in  <xref
            linkend="API_Operations_for_CDN_Services-d1e2386"/>. </para>
      </note>
    </section>
  <section xml:id="CDN-Enabled_Containers_Served_via_SSL-d1e2821">
    <title>CDN-enabled containers served through SSL</title>
    <para>A &HEAD; operation for a CDN-enabled container returns an SSL URI,
          <code>X-Cdn-Ssl-Uri</code>, in addition to the other headers associated with CDN. This
        feature enables you to use HTTPS protocol in URIs that are used for requesting objects
        stored in CDN-enabled containers. </para>
    <example>
      <title>CDN-enabled container metadata: HTTP request</title>
      <programlisting language="bash">HEAD /v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880123/MyContainer HTTP/1.1
Host: cdn.clouddrive.com
X-Auth-Token: f064c46a782c444cb4ba4b6434288f7c</programlisting>
    </example>
    <example>
      <title>CDN-enabled container metadata with SSL URI: HTTP response</title>
      <programlisting language="bash">HTTP/1.1 204 No Content
<emphasis role="bold">X-Cdn-Ssl-Uri: https://83c49b9a2f7ad18250b3-346eb45fd42c58ca13011d659bfc1ac1. ssl.cf0.rackcdn.com</emphasis>
X-Ttl: 259200
X-Cdn-Uri: http://081e40d3ee1cec5f77bf-346eb45fd42c58ca13011d659bfc1ac1. r49.cf0.rackcdn.com
X-Cdn-Enabled: True
X-Log-Retention: False
X-Cdn-Streaming-Uri: http://084cc2790632ccee0a12-346eb45fd42c58ca13011d659bfc1ac1. r49.stream.cf0.rackcdn.com
X-Trans-Id: tx82a6752e00424edb9c46fa2573132e2c
Content-Length: 0</programlisting>
    </example>
  </section>
  <section xml:id="Streaming-CDN-Enabled_Containers-d1f3721">
    <title>Streaming CDN-enabled containers </title>
    <para>In addition to the other headers associated with CDN,
      a &HEAD; operation against a CDN-enabled container returns
      the following streaming URIs to enable the streaming
      feature: </para>
    <itemizedlist>
      <listitem>
        <para><code>X-Cdn-Streaming-Uri</code>, which specifies a URI for video streaming that uses
            HTTP Dynamic Streaming from Adobe</para>
      </listitem>
      <listitem>
        <para><code>X-Cdn-Ios-Uri</code>, which specifies the URI for video streaming that uses HTTP
            Live Streaming from Apple</para>
      </listitem>
    </itemizedlist>
    <para>Streaming is a method of relaying data, such as video
      and audio material, over the network as a steady
      continuous stream, allowing playback to proceed while
      subsequent data is being received.</para>
    <para>For information about streaming to iOS devices, see
      <xref linkend="iOS-Streaming-d1f3725"/>.</para>
    <example>
      <title>CDN-enabled container metadata: HTTP request </title>
      <programlisting language="bash">HEAD /v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880123/MyContainer HTTP/1.1
Host: cdn.clouddrive.com
X-Auth-Token: f064c46a782c444cb4ba4b6434288f7c</programlisting>
    </example>
    <example>
      <title>CDN-enabled container metadata with streaming URIs: HTTP response</title>
      <programlisting language="bash">HTTP/1.1 204 No Content
X-Cdn-Ssl-Uri: https://83c49b9a2f7ad18250b3-346eb45fd42c58ca13011d659bfc1ac1. ssl.cf0.rackcdn.com
X-Ttl: 259200
<emphasis role="bold">X-Cdn-Ios-Uri: http://fb1ca9de5ff9525ff6f8-64e65126753c56b595824f56d25789bb.iosr.cf1.rackcdn.com</emphasis>
<emphasis role="bold">X-Cdn-Streaming-Uri: http://084cc2790632ccee0a12-346eb45fd42c58ca13011d659bfc1ac1. r49.stream.cf0.rackcdn.com</emphasis>
X-Cdn-Enabled: True
X-Cdn-Ssl-Uri: https://2cb7edde3eac1dd66ea4-64e65126753c56b595824f56d25789bb.ssl.cf1.rackcdn.com
X-Cdn-Uri: http://081e40d3ee1cec5f77bf-346eb45fd42c58ca13011d659bfc1ac1. r49.cf0.rackcdn.co
X-Log-Retention: False
X-Trans-Id: tx82a6752e00424edb9c46fa2573132e2c
Content-Length: 0</programlisting>
    </example>
  </section>
  <section xml:id="iOS-Streaming-d1f3725">
    <title>iOS streaming</title>
    <para>The Cloud Files CDN allows you to stream video to iOS devices without needing to convert
        your video. After you CDN-enable your container, you have the tools necessary for streaming
        media to multiple devices. To leverage this ability, you must check the client's user agent
        with JavaScript. An example of the user agent check and how to use it follows. </para>
      <para>
        <orderedlist>
          <listitem>
            <para>CDN-enable your container. For instructions, see the section about CDN-enabling a
              container in <xref linkend="API_Operations_for_CDN_Services-d1e2386"
                xrefstyle="select:label quotedtitle nopage"/>. Two streaming URIs are created: the
              container's streaming URI (<code>X-Cdn-Streaming-Uri</code>) and its iOS streaming URI
                (<code>X-Cdn-Ios-Uri</code>).</para>
          </listitem>
          <listitem>
            <para>Perform a <command>HEAD</command> request against the CDN-enabled container to
              view these URIs.</para>
          </listitem>
          <listitem>
            <para>Link to your content in a HTML page by using a <code>&lt;video></code>
              element.</para>
          </listitem>
          <listitem>
            <para>Set the SRC attribute of the <code>&lt;video></code> element to the full streaming
              URI for your container plus the name of your content. In the following example, the
              streaming video is MobyDick.mp4.</para>
            <example>
              <title>HTML 5 video element</title>
              <programlisting language="bash">&lt;video width=”640” height=”480” id="videotag"&gt;
  &lt;source src=”http://084cc2790632ccee0a12-346eb45fd42c58ca13011d659bfc1ac1.
  r49.stream.cf0.rackcdn.com/MobyDick.mp4” /&gt;
&lt;/video&gt;</programlisting>
            </example>
          </listitem>
          <listitem>
            <para>Add JavaScript to the <code>&lt;head></code> element of your HTML page to check if
              the user agent is an iOS device. If it is, the JavaScript should use the container's
              iOS streaming URI (<code>X-Cdn-Ios-Uri</code>) instead of the regular streaming URI.
              The Cloud Files CDN delivers the properly formatted content for iOS devices only when
              the iOS streaming URI is used. In the following example, the JavaScript sets the
                <code>&lt;src></code> attribute of the <code>&lt;video></code> element
                <code>videotag</code> to the iOS Streaming URI. Remember to add your content's name
              to the end of the iOS streaming URI.</para>
            <example>
              <title>JavaScript for user agent check</title>
              <programlisting language="bash">&lt;script type=”text/javascript”&gt;

    function isIOS(){
        return ((navigator.userAgent.match(/iPhone/i)) ||(navigator.userAgent.match(/iPod/i)) || (navigator.userAgent.match(/iPad/
i))) != null;
    }

    function init(){
        if (isIOS()){
           document.getElementById(“videotag”).src = “http://084cc2790632ccee0a12-346eb45fd42c58ca13011d659bfc1ac1.
           iosr.cf0.rackcdn.com/MobyDick.mp4”;
        }
    }

&lt;/script&gt;</programlisting>
            </example>
          </listitem>
          <listitem>
            <para>Add <code>init()</code> to the <code>&lt;body></code> element of your HTML page to
              call the user agent check when the page loads, as shown in the following example. </para>
            <example>
              <title>Load JavaScript in HTML page</title>
              <programlisting language="bash">&lt;body onload=”init()”&gt;</programlisting>
            </example>
          </listitem>
        </orderedlist>
      </para>
    <para> With these pieces of code in place, the proper content streams are set for iOS devices. </para>

  </section>
    
    <section xml:id="cdnAccessLogDelivery-d1e01">
      <title>CDN log delivery</title>
      
        <remark>07/16/2014 New section suggested by David Goetz. Similar to "Access log delivery" 
but only for CDN. I am waiting examples for this section from Brian Metzler. Catherine,

Actually- there's even a bigger change with the CDN logs- we added the referrer to the logs in the CDN recently. So we should should get some examples of that to show in this new section. Sorry we didn't tell you about this earlier- 

David</remark>
      <para>If you set the <code>X-Log-Retention</code> header on your CDN-enabled container to
          <code>True</code>,  you enable CDN log delivery on that container. Then all the request
        logs generated by the edge nodes of the CDN provider to objects in this container are
        delivered into a special container created in your account named
          <code>.CDN_ACCESS_LOGS</code>. The delivered logs are in the same format as access logs
        (see <xref linkend="Acess_Log_Delivery-d1e2200"/>). These logs, once delivered, are treated
        like any other object in your account, and you are charged for that storage. </para>
      <para>You can use the CDN logs to analyze the number of requests for each object, the client
        IP address, and time-based usage patterns (such as monthly or seasonal usage).</para>
      <note>
        <para>Delivery times vary greatly for CDN logs. In most cases, the logs are delivered within
          several hours, but delivery can sometimes take days. Cloud Files can only deliver the logs
          to you as fast as the logs are delivered from the CDN provider.</para>
      </note>
      <para>When you set the <code>X-Log-Retention</code> header to <code>True</code> on a
        CDN-enabled container, Cloud Files tracks every object in the container. If you have
        multiple containers that you want to track, you must set the <code>X-Log-Retention</code>
        header to <code>TRUE</code> for each container. When your first log is delivered, Cloud
        Files creates the <code>.CDN_ACCESS_LOGS</code> container. This container holds the CDN logs
        for every container for which you turn on logging. Log files exist until you delete them. To
        turn off logging, set the <code>X-Log-Retention</code> header to <code>FALSE</code>. </para>
      <para>Log files are named according to the following pattern: container name, log date, log
        hour, and MD5 hash. For example: </para>
      <para><code>Media/2014/07/01/16/096e6c4473f235db081deb51f42a8d98.log.gz</code>
      </para>
      <para>In this example, <code>Media</code> is the name of the container,
          <code>2014/07/01</code> is the date (July 1, 2014), and <code>16</code> is the hour that
        the log file was created. There might be multiple files for a given hour because the storage
        system splits log files based on both time and log file size. All times in the logs are UTC
        time. All logs contained in the log file are from the day and hour specified in the file
        name. </para>
      <para>Within the gzip logs, the format of the entries is similar to National Center for
        Supercomputing Applications (NCSA) combined log format, but without cookies. The pattern
        follows. The dashes (<parameter>-</parameter>) denote fields that the NCSA combined log
        format dictates be present but that Cloud Files does not capture. </para>
      <para><code>client_ip - - [day/month/year:hour:minute:second timezone] “method request
          HTTP_version” return_code bytes_sent “referrer” “user_agent”</code>
      </para>
      <para>The following example shows log entries. </para>
      <example>
        <title>Example CDN log entries</title>
        <programlisting language="bash">173.203.44.122 - - [15/07/2014:20:52:25 +0000] "GET 
      /5142b6e5e57f760d7ff4-c591437fc634f2a98934b7738b8b8571.r93.cf1.rackcdn.
      com/image1.png HTTP/1.1" 304 277 "-" "Mozilla/4.0 (compatible; 
      MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.
      50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0;
      InfoPath.3; .NET4.0C; .NET4.0E; MS-RTC LM 8; Microsoft Outlook 14.0.
      7109; ms-office; MSOffice 14)"
173.203.44.122 - - [15/07/2014:20:52:25 +0000] "GET 
      /5142b6e5e57f760d7ff4-c591437fc634f2a98934b7738b8b8571.r93.cf1.rackcdn.
      com/ email.png HTTP/1.1" 304 278 "-" "Mozilla/4.0 (compatible; 
      MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.
      50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; 
      InfoPath.3; .NET4.0C; .NET4.0E; MS-RTC LM 8; Microsoft Outlook 14.0.
      7109; ms-office; MSOffice 14)"
173.203.44.122 - - [15/07/2014:20:52:25 +0000] "GET 
      /5142b6e5e57f760d7ff4-c591437fc634f2a98934b7738b8b8571.r93.cf1.rackcdn.
      com/ tiny-email.png HTTP/1.1" 304 277 "-" "Mozilla/4.0 (compatible; 
      MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.
      50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; 
      InfoPath.3; .NET4.0C; .NET4.0E; MS-RTC LM 8; Microsoft Outlook 14.0.
      7109; ms-office; MSOffice 14)"
173.203.44.122 - - [15/07/2014:20:59:44 +0000] "GET 
      /5142b6e5e57f760d7ff4-c591437fc634f2a98934b7738b8b8571.r93.cf1.rackcdn.
      com/ default.css?ver=3.8.3 HTTP/1.1" 200 17511 "http://www.rackspace.
      com/" "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, 
      like Gecko) Chrome/35.0.1916.153 Safari/537.36"
173.203.44.122 - - [15/07/2014:20:59:44 +0000] "GET 
      /5142b6e5e57f760d7ff4-c591437fc634f2a98934b7738b8b8571.r93.cf1.rackcdn.
      com/ jquery.min.js?ver=3.8.3 HTTP/1.1" 200 8022 "http://www.rackspace.
      com/" "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, 
      like Gecko) Chrome/35.0.1916.153 Safari/537.36"
</programlisting>
      </example>
    </section>
    
  </chapter>
  
    <chapter xml:id="StaticWeb">
      <title>Static websites using CDN-enabled containers</title>
      <para>
        <remark security="writeronly">2012-05-14 dsh: Added for
          2012-05-14 release</remark> This chapter describes how to
        use your CDN-enabled containers to create static websites in
        Cloud Files. </para>
      <section xml:id="Create_Static_Website-dle4000">
        <title>Create a static website</title>
        <para>You can use your Cloud Files account to create a static website. First, you must
        CDN-enable a storage container. Any HTML or static web pages in the container become
        available through a static website after you set the <code>X-Container-Meta-Web-Index</code>
        header to <code>index.html</code> or another index page of your choice. You can also create
        subdirectories in your website by creating pseudo directories, as outlined in <xref
          linkend="Pseudo-Hierarchical_Folders_Directories-d1e1580"/>. Each pseudo directory becomes
        a subdirectory in the website. </para>
        <para>The page you set for <code>X-Container-Meta-Web-Index</code> becomes the index page
        for every subdirectory in your website. Each of your pseudo directories must contain a file
        with that name. So, if you set <code>X-Container-Meta-Web-Index</code> to
          <code>index.html</code>, you must have an <code>index.html</code> page in each pseudo
        directory. For example, suppose that you have a <code>subdir</code> pseudo directory. If you
        do not have an <code>index.html</code> page in <code>subdir</code>, visits to
          <code>myhost/subdir/</code> return a status code 404 (Not Found). </para>
        <remark security="writeronly">2013-08-23 cyr: Added based on
          email from Rick Hawkins: "Specifically these are the headers
          relating to Static Web which I did not find in our
          documentation: X-Container-Meta-Web-Listings: true
          X-Container-Meta-Web-Listings-CSS: listing.css
          X-Container-Meta-Web-Directory-Type" </remark>
        <para>You also have the option of displaying a list of HTML files in your pseudo directory,
        instead of a web page. You do this by setting the <code>X-Container-Meta-Web-Listings</code>
        header to <code>True</code>. If listings are enabled, you can add styles to your file list
        by setting <code>X-Container-Meta-Web-Listings-CSS</code> to a style sheet. For example,
        setting <code>X-Container-Meta-Web-Listings-CSS: listing.css</code> makes listings link to
        the <code>listing.css</code> style sheet. To view the HTML elements to which you can add
        styles, use your browser to view the HTML source on the listing page.</para>
        <para>You can modify the <code>Content-Type</code> of
          directory marker objects by setting the
            <code>X-Container-Meta-Web-Directory-Type</code> header.
          If this header is not set,
            <code>application/directory</code> is used by default.
          Directory marker objects are 0-byte objects that represent
          directories to create a simulated hierarchical
          structure.</para>
        <para>
        <remark security="writeronly">2012-08-13 dsh: Added to clarify CNAME based on Disqus
          comments </remark>The following instructions describe using a CNAME with your DNS Server
        (or name server). The CNAME is the domain name of your site (such as www.rackspace.com).
        Your CNAME is set up with your individual DNS Server. For more information about using
        CNAMEs, see the <citetitle>Cloud DNS Developer Guide</citetitle> at <link
          xlink:href="http://docs.rackspace.com/cdns/api/v1.0/cdns-devguide/content/supported_record_types.html"
          >docs.rackspace.com</link>. After your CNAME is established, set the CNAME to your Cloud
        Files CDN URI to get your site up and running on the web. </para>
        <orderedlist>
          <title>Set up a static website </title>
          <para> Following are the step-by-step instructions for setting up a static website. </para>
          <listitem>
            <para>Create a container. </para>
          </listitem>
          <listitem>
            <para>Upload your pages to the container. </para>
          </listitem>
          <listitem>
            <para>Set the index (or primary page) for your website by performing a &POST; request to
            the header <code>X-Container-Meta-Web-Index</code> on your website's container. See
              <xref linkend="setUpStaticWebEx"/>. (Remember to change the <code>X-Auth-Token</code>
            to your authentication token.) You must use your storage URL and the container name to
            properly point to the container
                (<code><replaceable>storageURL</replaceable>/<replaceable>containerName</replaceable></code>). </para>
            <para>(You get your authentication token when you authenticate your session as shown in
              <xref linkend="Authentication-d1e639" xrefstyle="select:label quotedtitle nopage"/>.) </para>
          </listitem>
          <listitem>
            <para>CDN-enable your container as shown in <xref
              linkend="API_Operations_for_CDN_Services-d1e2386"
              xrefstyle="select:label quotedtitle nopage"/>. </para>
          </listitem>
          <listitem>
            <para>Go to your domain host and set up a CNAME using your CDN URI
              (<code>X-Cdn-Uri</code>). The CNAME is the domain or branded URI that you use instead
            of the CDN URI. If you need to find your CDN URI, perform a <command>HEAD</command>
            request to <code>cdn.clouddrive.com</code> as shown in the description of the operation
            to list metadata for a CDN-enabled container in <xref
              linkend="API_Operations_for_CDN_Services-d1e2386"
              xrefstyle="select:label quotedtitle nopage"/>. </para>
          </listitem>
          <listitem>
            <para> To view your website online, visit your CDN URI or
              your CNAME domain. </para>
          </listitem>
        </orderedlist>
        <example xml:id='setUpStaticWebEx'>
          <title>Set up static web</title>
          <programlisting language="bash">cURL -X POST -H "X-Container-Meta-Web-Index: index.html" -H "X-Auth-Token: f064c46a782c444cb4ba4b6434288f7c" "https://storage101.dfw1.clouddrive.com/v1/MossoCloudFS_a55df/MyLibrary/"</programlisting>
        </example>
        <para>After your container has an index page set and your
          domain host has your CNAME recorded, your static website is
          ready. </para>
        <example>
          <title>Container setup for static website</title>
          <programlisting language="bash">container/index.html
container/page2.html
container/subdir/index.html
container/subdir/pageX.html</programlisting>
        </example>
        <para>In the following results, the CNAME is <code>myhost</code>, and the
          <code>X-Container-Meta-Web-Index</code> is set to <code>index.html</code>. The results on
        the right of the example are the pages that display in the web browser. </para>
        <example>
          <title>Static website enabled container results</title>
          <programlisting language="bash">http://myhost                     Displays container/index.html
http://myhost/page2.html          Displays container/page2.html
http://myhost/subdir              Displays container/subdir/index.html
http://myhost/subdir/             Displays container/subdir/index.html
http://myhost/subdir/pageX.html   Displays container/subdir/pageX.html</programlisting>
        </example>
      <note>
        <para>To disable a static website that you have created, send a request to remove the
          metadata header that created the static web site (for example,
            <code>X-Container-Meta-Web-Index</code> in <xref linkend="setUpStaticWebEx"/>). For more
          information, see <link
            xlink:href="http://docs.rackspace.com/files/api/v1/cf-devguide/content/POST_deletecontainermeta_v1__account___container__containerServicesOperations_d1e000.html"
            >"Delete container metadata"</link>.</para>
      </note>
      </section>
      <section xml:id="Set_Error_Pages_for_Static_Website-dle4005">
        <title>Set error pages for a static website</title>
        <para>
        <remark security="writeronly">2012-05-14 dsh: Added for 2012-05-14 release </remark> You can
        create and set custom error pages for visitors to your website. To do this, set the
          <code>X-Container-Meta-Web-Error</code> metadata header. Currently, only 401
        (Unauthorized) and 404 (Not Found) status codes are supported. </para>
        <para>Error pages are served with the status code prepended to the name of the error page
        that you set. For example, if you set <code>X-Container-Meta-Web-Error</code> to
          <code>error.html</code>, 401 errors display the page <code>401error.html</code>.
        Similarly, 404 errors display <code>404error.html</code>. You must have both of these pages
        created in your container when you set the <code>X-Container-Meta-Web-Error</code> metadata,
        or your site will display generic error pages. </para>
        <para>Set the <code>X-Container-Meta-Web-Error</code> metadata
          once for your entire static website. </para>
        <example>
          <title>Set error pages for static website: HTTP request</title>
          <programlisting language="bash">POST /v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880123/MyContainer HTTP/1.1
Host: storage.clouddrive.com
X-Auth-Token: f064c46a782c444cb4ba4b6434288f7c
X-Container-Meta-Web-Error: error.html            </programlisting>
        </example>
        <para> Any class 200 status code indicates success. </para>
      </section>
    </chapter>
  
  <chapter xml:id="Bulk_Operations-d1e2338">
      <title>Bulk operations </title>
      <para>This chapter describes bulk operations that are available
        with Cloud Files.</para>
      <!--          
          <remark>9-30-2013 cyr: The following note was originally requested by Chuck Thier, but David Goetz sent email saying not to make this doc change. He expects to make code changes at some point in the future to take care of this. </remark>
        <note>
          <para>The bulk operations, extract archive and bulk delete, can take a long time. They might cause
            client timeouts and require that you increase client
            timeout limits. </para>
        </note>
-->
<!--   
      <remark>Per email to Ian White from Mark Barta, hidding this section to avoid promoting 
      bulk import offering </remark>
      <section xml:id="Bulk_Import-d1e2094">
        <title>Bulk importing of data</title>
        <remark security="writeronly">06-11-2012 dsh: added </remark>
        <para>If you have a large amount of data to import into Cloud Files, bulk importing of data
        is available. With bulk importing, you send a physical device that contains your data to
        Rackspace, and Rackspace loads it directly into Cloud Files. By doing this, you avoid the
        time and cost of uploading large amounts of data over the Internet. After the transfer is
        complete, Rackspace either ships your device back to you, or destroys it after degaussing,
        whichever you prefer. </para>
        <note>
          <para>Bulk import is available in U.S. data centers and in the Sydney data center only.
          However, if you have a need for bulk importing in another data center outside of the U.S.,
          contact <link xlink:href="http://www.rackspace.com/cloud/files/support/">Rackspace
            support</link> to see what other options you might have. They will be interested in
          specifics like the amount of data you need to work with.</para>
        </note>
        <para>Rackspace accepts USB, SATA, and eSATA devices. Your file system can be NTFS, ext2,
        ext3, ext4, or FAT32. Because Cloud Files does not use hierarchical directory structures,
        nested subdirectories in your data are converted to object names. Your top-level folders
        become containers, and nested directory names become part of the object names. For example,
          <code>Chapter28/Ahab/ivoryleg</code> results in a container named <code>Chapter28</code>
        with an object named <code>Ahab/ivoryleg</code> inside of it. For more information about
        simulating directory structures in Cloud Files, see <xref
          linkend="Pseudo-Hierarchical_Folders_Directories-d1e1580"/>. </para>
        <para>To begin the bulk import process, contact Rackspace support technicians. You will be
        assigned a migration specialist who can answer any questions you might have during the
        process. You are notified when Rackspace receives your device, begins the data import,
        completes the data import, and ships back or destroys the device. </para>
      </section>
-->      
    <section xml:id="Extract_Archive-d1e2338">
        <title>Extracting archive files</title>
        <para>An extract archive request expands tar files into a Cloud Files account. The request
        is a <command>PUT</command> operation with the <code>?extract-archive=format</code> query
        parameter specifying the format of the archive file. </para>
      <para>Valid values for the <code>format</code> variable are <code>tar</code>,
          <code>tar.gz</code>, and <code>tar.bz2</code>. </para>
        <note>
          <para>This bulk operation involves middleware that conducts many operations on a single
          request.</para>
        </note>
        <para>For the <command>PUT</command> request, use the following URI:</para>
        <para>
            /<code>v1/AUTH_Account/$UPLOAD_PATH?extract-archive=tar.gz
          </code></para>
        <para><code>UPLOAD_PATH</code> is the location where the files are expanded and can specify
        any of the following values: <itemizedlist>
          <listitem>
            <para>A container</para>
          </listitem>
          <listitem>
            <para>A pseudo directory within a container</para>
          </listitem>
          <listitem>
            <para>An empty string</para>
            <para>If the <code>UPLOAD_PATH</code> is an empty string, Cloud Files automatically
              creates containers in which to place the files. Files in the base directory of the tar
              file (that is, files that are not in a folder of the unzipped tar file) are ignored.
            </para>
          </listitem>
        </itemizedlist></para>
        <para>The destination of a file in the archive is built as
          follows: </para>
        <para>
          <code>/v1/AUTH_Account/$UPLOAD_PATH/$FILE_PATH</code>
        </para>
        <para><code>FILE_PATH</code> is the file name from the listing
          in the tar file.</para>
      <para>The following example shows a request to extract an archive.</para>
      <example>
        <title>Example extract archive request</title>
        <programlisting language="bash">$ tar cf archive.tar directory_to_be_archived
$ curl -i -XPUT -H'x-auth-token: AUTH_TOKEN'
https://storage101.iad3.clouddrive.com/v1/MossoCloudFS_aaa-aaa-aaa-aaa?extract-archive=tar -T ./archive.tar</programlisting>
      </example>
        <para>You can create up to 1,000 new containers per extraction
          request. Also note that only regular files are uploaded.
          Objects such as empty directories and symlinks are not
          uploaded.</para>
        <para>The responses from bulk operations are not like other Cloud Files responses because a
        short request body sent from the client could result in many operations on the proxy server
        and precautions need to be taken to prevent the request from timing out because of a lack of
        activity. To this end, the client always receives a 200 OK response, regardless of the
        actual success of the call. The body of the response, which can be delivered over a greater
        amount of time, must be parsed to determine the actual success of the operation. In
        addition, the client might receive whitespace characters prepended to the response body
        while the proxy server is completing the request. </para>
        <para>The format of the response body defaults to text plain
          but can be either JSON or XML depending on the
            <code>Accept</code> header. Acceptable formats are
            <code>text/plain</code>, <code>application/json</code>,
            <code>application/xml</code>, and <code>text/xml</code>.
          The following example shows the response body, formatted in
          JSON, from a successful request. </para>
        <example>
          <title>Successful extract archive response</title>
          <programlisting language="bash">HTTP/1.1 100 Continue

HTTP/1.1 200 OK
Content-Type: application/json
X-Trans-Id: txa7fd1603cfe04bdb920cd-005191226d
Date: Mon, 13 May 2013 17:27:10 GMT
Transfer-Encoding: chunked

{
  "Number Files Created": 10,
  "Response Status": "201 Created",
  "Errors": [],
  "Response Body": ""
}</programlisting>
        </example>
        <para>The following example shows a response with errors.</para>
        <example>
          <title>Extract archive response with errors</title>
          <programlisting language="bash">HTTP/1.1 100 Continue

HTTP/1.1 200 OK
Content-Type: application/json
X-Trans-Id: tx9f12e16f047049cc91147-005191245f
Date:  Mon, 13 May 2013 17:35:27 GMT
Transfer-Encoding: chunked

{
  "Number Files Created": 10,
  "Response Status": "400 Bad Request",
  "Errors": [
    [
      "/v1/AUTH_test/test_cont/big_file.wav",
      "413 Request Entity Too Large"
    ]
  ],
  "Response Body": ""
}</programlisting>
        </example>
        <para>Errors are presented as a list of tuples in the form <code>[objectPath,
          errorResponse]</code>. The <code>objectPath</code> given is the full path where the object
        was to be put. The <code>errorResponse</code> is the HTTP status of the response for that
        individual <command>PUT</command> operation. After 1,000 errors, processing of the request
        ends, and the completed response is returned. </para>
        <para>If all valid files were uploaded successfully, the <code>Response Status</code> in the
        response body is 201 Created. If any files failed to be created, the <code>Response
          Status</code> corresponds to the subrequest's error. Possible codes are 400, 401, and 502.
        In both cases, the <code>Response Body</code> specifies the number of files successfully
        uploaded and a list of the files that failed. (The actual HTTP status code is always 200 OK,
        so the <code>Response Status</code> in the response body is the one you should
        monitor.)</para>
        <note>
          <para>If you send a <code>Content-Type</code> header on the <command>PUT</command>
          request, the specified <code>Content-Type</code> applies to every object in the archive.
          If you set <code>Content-Type</code> to a blank string, Cloud Files determines the
            <code>Content-Type</code> based on the individual file type. For example, if you have
          Multipurpose Internet Mail Extensions (MIME) type files, use a blank string for
            <code>Content-Type</code> to set the MIME type for files within the archive.</para>
        </note>
      </section>
      <section xml:id="Bulk_Delete-d1e2338.html">
        <title>Bulk delete</title>
      <para>You can delete multiple objects or containers from an account by using a single bulk
        delete request, which is a <command>DELETE</command> request with the <code>?bulk-delete
          set</code> query parameter. The <code>Content-Type</code> header of the request, if set,
        must be set to <code>text/plain</code>. You direct the request to the root of the service
        endpoints (see <xref linkend="Service-Access-Endpoints-d1e003"/>). The body of the
          <command>DELETE</command> request is a newline-separated list of URL-encoded objects to
        delete. You can delete 10,000 objects per request. </para>
        <note>
          <para>This bulk operation involves middleware that conducts many operations on a single
          request.</para>
        </note>
        <para>The objects specified in the <command>DELETE</command> request body must be
        URL-encoded and in the following form: </para>
        <para><code>/containerName/objectName</code>
      </para>
        <para>Containers (which must be empty at time of delete) have the following form:</para>
        <para>
        <code>/containerName</code>
      </para>
      <para>Create a text file similar to the following example, objects_to_delete.txt, with the
        names of the objects that you want to delete.</para>
      <example>
        <title>Create text file for bulk delete request</title>
        <programlisting>$ cat objects_to_delete.txt
/containerName/objectName1
/containerName/objectName2
/containerName/objectName3
/containerName/objectName4</programlisting>
      </example>
      <para>You can use a cURL request similar to the following example for the bulk delete.</para>
      <example>
        <title>cURL request for the bulk delete</title>
        <programlisting>$ curl -i -XDELETE -H'x-auth-token: f064c46a782c444cb4ba4b6434288f7c' https://storage101.dfw1.clouddrive.com/v1/MossoCloudFS_000000\?bulk-delete -T ./objects_to_delete.txt</programlisting>
      </example>
      <para>An HTTP request for the bulk delete is similar to the following example.</para>
      <example>
        <title>HTTP request for  the bulk delete</title>
        <programlisting>DELETE /v1/MossoCloudFS_000000?bulk-delete HTTP/1.1
Host: storage101.dfw1.clouddrive.com
x-auth-token:f064c46a782c444cb4ba4b6434288f7c
Content-Length: 108 

/containerName/objectName1
/containerName/objectName2
/containerName/objectName3
/containerName/objectName4 </programlisting>
      </example>
        <para>The response is similar to the extract archive responses in that every response is 200
        OK and the response body must be parsed for actual results. The following example shows the
        response body, formatted in JSON, from a successful request. </para>
        <example>
          <title>Successful bulk delete response</title>
          <programlisting language="bash">HTTP/1.1 100 Continue

HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
X-Trans-Id: tx52fe4601dde24e2b8e7cb-0051912ca8
Date: Thu, 23 Oct 2014 15:16:41 GMT
Transfer-Encoding: chunked

{
  "Number Not Found": 0,
  "Response Status": "200 OK",
  "Errors": [],
  "Number Deleted": 4,
  "Response Body": ""
}</programlisting>
        </example>
        <para>The following example shows a response with errors.</para>
        <example>
          <title>Bulk delete response with errors</title>
          <programlisting language="bash">HTTP/1.1 100 Continue

HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
X-Trans-Id: tx28552a8cd9cb441dad3ad-0051912d2d
Date: Mon, 13 May 2013 18:13:01 GMT
Transfer-Encoding: chunked

{
  "Number Not Found": 0,
  "Response Status": "400 Bad Request",
  "Errors": [
    [
      "/v1/AUTH_test/non_empty_container",
      "409 Conflict"
    ]
  ],
  "Number Deleted": 0,
  "Response Body": ""
}</programlisting>
        </example>
      <para>The list of errors is a list of tuples in the form <code>[objectPath,
          errorResponse]</code>. The <code>objectPath</code> is the full path of where the object
        (or container) was to be deleted. The <code>errorResponse</code> is the HTTP status of the
        response for that individual <command>DELETE</command> request. </para>
        <para>If all items were successfully deleted (or did not exist), the <code>Response
          Status</code> is 200 OK. If any items failed to delete, the <code>Response Status</code>
        code corresponds to the subrequest's error. Possible codes are 400, 401, and 502. In all
        cases, the <code>Response Body</code> specifies the number of items successfully deleted or
        not found as well as a list of those that failed. The return body is formatted in the way
        specified in the request's <code>Accept</code> header. Acceptable formats are
          <code>text/plain</code>, <code>application/json</code>, <code>application/xml</code>, and
          <code>text/xml</code>. </para>
        <!-- <remark>09/2013 cyr:  Response to Disqus comment on this section - information from David Goetz         
        
            Although you can set the format in the request using
              either the query parameter ?format or the
              Accept header, the Accept header is the method that
              works in all cases. The query parameter
                ?format=json was added and kept for
              backwards compatibility. However, the
                ?format query parameter is not added to
              the bulk delete feature because it would be a
              continuation of the "2 ways to do 1 thing problem"
              that the query parameter caused.  </remark>
 
-->
      </section>
  </chapter>
  <chapter xml:id="Public_Access_to_Account-d1a4440">
    <title>Public access to your Cloud Files account</title>
    <info>
      <raxm:metadata
        xmlns:raxm="http://docs.rackspace.com/api/metadata">
        <raxm:type>concept</raxm:type>
        <raxm:product version="v1">files</raxm:product>
        <raxm:priority>4</raxm:priority>
      </raxm:metadata>
    </info>
    <para> This section describes ways that you can allow others to place objects into or retrieve
      objects from your Cloud Files account. With the methods described here, users do not need your
      password or login information to have access to your account. </para>
    <section xml:id="TempURL-d1a4450">
      <title>TempURL </title>
      <para>You can use the Temporary URL feature (TempURL) to create limited-time Internet
        addresses that allow limited access to your Cloud Files account. Using TempURL, you can
        allow others to retrieve objects from or place objects in your Cloud Files account for a
        specified amount of time. After the specified amount of time expires, access to the account
        with the TempURL is denied. </para>
      <note>
        <para>If the access time expires while a large file is being retrieved, the download
          continues until it is finished. Only the link expires.</para>
      </note>
      <para>Access to your Cloud Files account or website with a TempURL is independent of whether
        your account is CDN-enabled. Even if you do not CDN-enable a directory, you can still grant
        temporary public access through a TempURL. When you create a TempURL, Cloud Files validates
        a <command>GET</command>-accessible or <command>PUT</command>-accessible URL, which is
        time-limited.</para>
      <note>
        <para>The TempURL is the same thing as the TempURL Secret, and is set using the TempURL
          metadata key described in the next section. The TempURL is the actual URL.</para>
      </note>
      <section xml:id="Set_Account_Metadata-d1a4460">
        <title>Set account TempURL metadata key</title>
        <para>To create a TempURL, you must first set the <code>X-Account-Meta-Temp-Url-Key</code>
          metadata header on your Cloud Files account to a key that only you know. This key can be
          any arbitrary sequence. </para>
        <!--
          <remark>11-11-2014 cyr: Updated information with information from  Rick Hawkins and the OpenStack Configuration Reference.
           This is in response to a Disqus request from roberto today. </remark>
        <para>OLD INFO: After you set the key, do not change it while you still want others to be able to
          access your TempURL. If you change it, the TempURL becomes invalid (within 60 seconds,
          which is the cache time for a key) and others will not be allowed to access it. </para> -->
        <note>
          <para>Changing the <code>X-Account-Meta-Temp-URL-Key</code> invalidates any previously
            generated TempURLs within 60 seconds (the cache time for the key). To allow
            transitioning to a new key without effecting service, Cloud Files supports up to two
            keys, specified by <code>X-Account-Meta-Temp-URL-Key</code> and
              <code>X-Account-Meta-Temp-URL-Key-2</code>. Signatures are checked against both keys,
            if present. Testing both keys enables key rotation without invalidating all existing
            TempURLs &mdash; you can create TempURLs with a new key while allowing TempURLs created
            with the original key to remain valid. Once all the TempURLs generated with the old key
            have been exhausted, you can change or remove the old key. </para>
        </note>
        <example>
          <title>Set account metadata key for public access: HTTP request</title>
          <programlisting language="bash" >POST /v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880123 HTTP/1.1
Host: storage.clouddrive.com
X-Auth-Token: f064c46a782c444cb4ba4b6434288f7c
X-Account-Meta-Temp-Url-Key: yourKey</programlisting>
        </example>
        <para>Any class 200 status code indicates success.</para>
      </section>
      <section xml:id="Create_TempURL-d1a444">
        <title>Create the TempURL</title>
        <para>After the metadata is set, you must create an HMAC-SHA1
          (RFC 2104) signature. When you generate the TempURL, you
          determine which method of access you will grant users, &GET;
          or &PUT;. You also determine the path to the object to which
          you are granting access. Lastly, you set the time for your
          TempURL to expire in UNIX epoch notation. </para>
        <para>In the following examples, a TempURL that will be available for 60 seconds is
          generated for the my_cat.jpg object. The <code>key</code> in the examples is the value of
            <code>X-Account-Meta-Temp-Url-Key</code>. </para>
        <example>
          <title>Create TempURL (in Python)</title>
          <programlisting language="bash">  import hmac
  from hashlib import sha1
  from sys import argv
  from time import time

  if len(argv) != 5:
    print 'Syntax: &lt;method&gt; &lt;url&gt; &lt;seconds&gt; &lt;key&gt;'
    print 'Example: GET https://storage101.dfw1.clouddrive.com/v1/' \
        'MossoCloudFS_12345678-9abc-def0-1234-56789abcdef0/' \
        'container/my_cat.jpg 60 my_shared_secret_key'
  else:
    method, url, seconds, key = argv[1:]
    method = method.upper()
    base_url, object_path = url.split('/v1/')
    object_path = '/v1/' + object_path
    seconds = int(seconds)
    expires = int(time() + seconds)
    hmac_body = '%s\n%s\n%s' % (method, expires, object_path)
    sig = hmac.new(key, hmac_body, sha1).hexdigest()
    print '%s%s?temp_url_sig=%s;temp_url_expires=%s' % \
        (base_url, object_path, sig, expires)</programlisting>
        </example>
        <para>Be certain to use the full URL to the object, just as you would with a normal request. </para>
        <para>In this example, the signature might be da39a3ee5e6b4b0d3255bfef95601890afd80709 and
          the expire time might translate to 1323479485 because the signature and expire time
          completely depend on the time when the code runs. On your website, you would provide a
          link to the following URL: </para>
        <programlisting language="bash">  https://storage.clouddrive.com/v1/AUTH_account/container/my_cat.jpg?
  temp_url_sig=da39a3ee5e6b4b0d3255bfef95601890afd80709&amp;
  temp_url_expires=1323479485</programlisting>
        <para> If you do not provide users with the exact TempURL, they get a 401 (Unauthorized)
          status code. &HEAD; queries are allowed if &GET; or &PUT; operations are allowed. </para>
        <example>
          <title>Create TempURL (in PHP)</title>
          <programlisting language="bash">  &lt;?php
  if ($argc != 5) {
      echo "Syntax: &lt;method&gt; &lt;url&gt; &lt;seconds&gt; &lt;key&gt;";
      echo "Example: GET https://storage101.dfw1.clouddrive.com/v1/" .
           "MossoCloudFS_12345678-9abc-def0-1234-56789abcdef0/" .
           "container/my_cat.jpg 60 my_shared_secret_key";
  } else {
    $method = $argv[1];
    $url = $argv[2];
    $seconds = $argv[3];
    $key = $argv[4];
    $method = strtoupper($method);
    list($base_url, $object_path) =  split("/v1/", $url);
    $object_path = "/v1/$object_path";
    $seconds = (int)$seconds;
    $expires = (int)(time() + $seconds);
    $hmac_body = "$method\n$expires\n$object_path";
    $sig = hash_hmac("sha1", $hmac_body, $key);
    echo "$base_url$object_path?" .
         "temp_url_sig=$sig&amp;temp_url_expires=$expires";
  }
  ?&gt;</programlisting>
        </example>
        <example>
          <title>Create TempURL (in Ruby)</title>
          <programlisting language="bash">  require "openssl"

  unless ARGV.length == 4
      puts "Syntax: &lt;method&gt; &lt;url&gt; &lt;seconds&gt; &lt;key&gt;"
      puts ("Example: GET https://storage101.dfw1.clouddrive.com/v1/" +
          "MossoCloudFS_12345678-9abc-def0-1234-56789abcdef0/" +
          "container/path/to/object.file 60 my_shared_secret_key")
  else
      method, url, seconds, key = ARGV
      method = method.upcase
      base_url, object_path = url.split(/\/v1\//)
      object_path = '/v1/' + object_path
      seconds = seconds.to_i
      expires = (Time.now + seconds).to_i
      hmac_body = "#{method}\n#{expires}\n#{object_path}"
      sig = OpenSSL::HMAC.hexdigest("sha1", key, hmac_body)
      puts ("#{base_url}#{object_path}?" +
          "temp_url_sig=#{sig}&amp;temp_url_expires=#{expires}")
  end</programlisting>
        </example>
      </section>
      <section xml:id="TempURL_File_Name_Overrides-d1e213">
        <title>Override TempURL file names</title>
        <para>TempURLs support the <code>filename</code> query parameter, which you can use to
          override the <code>Content-Disposition</code> header and indicate to the browser a file
          name in which to save the file. In the following example, you see the usual TempURL
          without the file name override.</para>
        <example>
          <title>TempURL without file name override</title>
          <programlisting language="bash">https://cf-cluster.example.com/v1/AUTH_account/container/object?<?sbr?>
temp_url_sig=da39a3ee5e6b4b0d3255bfef95601890afd80709&amp;
temp_url_expires<?sbr?>=1323479485</programlisting>
        </example>
        <para>In the following example, you see
            <code>&amp;filename=bob.txt</code> appended to the TempURL
          to indicate to the browser to save the file as
            <code>bob.txt</code>:</para>
        <example>
          <title>TempURL with file name override - Example 1</title>
          <programlisting language="bash">https://cf-cluster.example.com/v1/AUTH_account/container/object?
<?sbr?>temp_url_sig=da39a3ee5e6b4b0d3255bfef95601890afd80709&amp;
temp_url_expires<?sbr?>=1323479485<emphasis role="bold">&amp;
filename=bob.txt</emphasis></programlisting>
        </example>
        <para>With GET TempURLs, a <code>Content-Disposition</code> header is set on the response so
          that browsers interpret this as a file attachment to be saved. The file name chosen is
          based on the object name, but you can override this with a <code>filename</code> query
          parameter. The following example specifies a filename of <code>My Test File.pdf</code>: </para>
        <example>
          <title>TempURL with file name override - Example 2 </title>
      
          <programlisting>https://cf-cluster.example.com/v1/AUTH_account/container/object?
temp_url_sig=da39a3ee5e6b4b0d3255bfef95601890afd80709&amp;
temp_url_expires=1323479485<emphasis role="bold">&amp;
filename=My+Test+File.pdf</emphasis></programlisting>   </example>
        <para>If you do not want the object to be downloaded, you can cause
            <code>Content-Disposition: inline</code> to be set on the response by adding the
            <code>inline</code> parameter to the query string:</para>
        <example>
          <title>TempURL with inline query parameter</title>
        
        <programlisting>https://cf-cluster.example.com/v1/AUTH_account/container/object?
temp_url_sig=da39a3ee5e6b4b0d3255bfef95601890afd80709&amp;
temp_url_expires=1323479485<emphasis role="bold">&amp;
inline</emphasis></programlisting> </example>

      </section>
    </section>
    <section xml:id="FormPost-d1a555">
      <title>FormPost</title>
      <para>You can use the FormPost feature to give your website audience a way to upload objects
        to your Cloud Files account through a web form. FormPost works by translating a browser form
        request into an object <command>PUT</command> operation in Cloud Files (see <olink
          targetdoc="cf-devguide"
          targetptr="PUT_createobject_v1__account___container___object__objectServicesOperations_d1e000"
          >PUT_createobject_v1__account___container___object__objectServicesOperations_d1e000</olink>).
        After you enable FormPost on your account, you need only to create the form in your website
        by using the guidelines in this section. </para>
      <para>As with all objects in Cloud Files, the object file size
        limit is 5 GB. If your users try to upload an object larger
        than 5 GB, they will get a file size error. </para>
      <section xml:id="Set_Account_Metadata-d1a666">
        <title>Set account metadata key</title>
        <para>To allow FormPost actions on your Cloud Files account, you must first set the
            <code>X-Account-Meta-Temp-Url-Key</code> metadata header on your Cloud Files account to
          a key that only you know. This key can be any arbitrary sequence. </para>
        <para>After you set the key,  do not change it while you still want others to access your
          account. If you change it, the actions from a FormPost become invalid (within 60 seconds,
          which is the cache time for a key). </para>
        <note>
          <para>The <command>POST</command> URI should not include the final container. Include just
            the version and your account, like
              <code>/v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880123</code> shown in the
            example below. If you include the full path to the container, the key is not set
            properly.</para>
        </note>
        <example>
          <title>Set account metadata key for public access: HTTP request</title>
          <programlisting language="bash">POST /v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880123 HTTP/1.1
Host: storage.clouddrive.com
X-Auth-Token: f064c46a782c444cb4ba4b6434288f7c
X-Account-Meta-Temp-Url-Key: yourKey</programlisting>
        </example>
        <para>Any class 200 status code indicates success.</para>
      </section>
      <section xml:id="Create_the_Form-d1a777">
        <title>Create the form</title>
        <para> To communicate between your website and your Cloud
          Files account, create a form using the following format in
          your website: </para>
        <example>
          <title>Layout of web form</title>
          <programlisting language="bash">  &lt;form action="&lt;CF-url&gt;" method="POST" enctype="multipart/form-data"&gt;
    &lt;input type="hidden" name="redirect" value="&lt;redirect-url&gt;" /&gt;
    &lt;input type="hidden" name="max_file_size" value="&lt;bytes&gt;" /&gt;
    &lt;input type="hidden" name="max_file_count" value="&lt;count&gt;" /&gt;
    &lt;input type="hidden" name="expires" value="&lt;unix-timestamp&gt;" /&gt;
    &lt;input type="hidden" name="signature" value="&lt;hmac&gt;" /&gt;
    &lt;input type="hidden" name="x_delete_at" value="&lt;unix-timestamp&gt;" /&gt;
    &lt;input type="hidden" name="x_delete_after" value="&lt;seconds&gt;" /&gt;
    &lt;input type="file" name="file1" />&lt;br /&gt;
    &lt;input type="submit" /&gt;
  &lt;/form&gt;</programlisting>
        </example>
        <para>The parameters and attributes in the form are defined as follows:</para>
        <itemizedlist>
          <listitem>
            <para><emphasis>(Required)</emphasis> The <code>form action</code> attribute is the
              Cloud Files URL (<code>CF-url</code>) to the destination where files will be uploaded.
              For example, <code>https://storage.clouddrive.com/v1/yourAccountID/container</code>.
              The name of each uploaded object has the <code>&lt;CF-url&gt;</code> appended to the
              front of it. </para>
            <note>
              <para>Optionally, you can also include a prefix to separate uploads, such as assigning
                each user a certain prefix:
                  <code>https://storage.clouddrive.com/v1/yourAccountID/container/object_prefix</code>. </para>
            </note>
          </listitem>
          <listitem>
            <para><emphasis>(Required)</emphasis> The <code>method</code> attribute must be
                <code>POST</code> and the <code>enctype</code> must be set as
                <code>multipart/form-data</code>. </para>
          </listitem>
          <listitem>
            <para><emphasis>(Optional)</emphasis> The <code>redirect</code> attribute is the URL of
              the page that is displayed on your website after the form processes. The URL will have
              status and message query parameters added to it, indicating the HTTP status code for
              the upload (2<emphasis role="italic">nn</emphasis> indicates success) and a possible
              message for more information if there is an error, such as <code>max_file_size
                exceeded</code>. </para>
            <note>
              <para>Although the <code>redirect</code> attribute is optional for the form, it must
                be present in the HMAC body (shown in the following example). Although
                  <code>redirect</code> must be present, its value can be an empty string to
                indicate that no <code>redirect</code> is included on the form.</para>
            </note>
          </listitem>
          <listitem>
            <para><emphasis>(Required)</emphasis> The <code>max_file_size</code> attribute specifies
              the maximum size in bytes of the largest single file upload. Because the storage
              system maximum file size is 5 GB, <code>max_file_size</code> cannot exceed 5
              GB.</para>
          </listitem>
          <listitem>
            <para><emphasis>(Required)</emphasis> The <code>max_file_count</code> attribute
              specifies the maximum number of files that can be uploaded with the form. If you send
              more files than specified by <code>max_file_count</code>, Cloud Files uploads the
              files as normal until you hit the limit (the <code>max_file_count</code> value). Then,
              Cloud Files sends an error when it is trying to create the file over the
                <code>max_file_count</code> value.</para>
            <note>
              <para>The <code>max_file_count</code> value used to generate the
                  <code>signature</code> must be the same as that in the web form.</para>
            </note>
          </listitem>
          <listitem>
            <para><emphasis>(Required)</emphasis> The <code>expires</code> attribute is the UNIX
              timestamp when the form is invalidated. This gives your website users a limited time
              to have the form open. Time must be in UNIX epoch format. </para>
            <note>
              <para><code>expires</code> in the web form and <code>expires</code> in the HMAC must
                be the same.</para>
            </note>
          </listitem>
          <listitem>
            <para>
              <emphasis>(Required)</emphasis> The <code>signature</code> attribute is the HMAC-SHA1
              signature of the form. Following is sample code for computing the signature in Python: </para>
            <example>
              <title>Generate signature for FormPost</title>
              <programlisting language="bash">  import hmac
  from hashlib import sha1
  from time import time
  path = '/v1/account/container/object_prefix'
  redirect = 'https://myserver.com/some-page'  # set to '' if redirect not in form 
  max_file_size = 104857600
  max_file_count = 10
  expires = int(time() + 600)
  key = 'mykey'
  hmac_body = '%s\n%s\n%s\n%s\n%s' % (path, redirect,
      max_file_size, max_file_count, expires)
  signature = hmac.new(key, hmac_body, sha1).hexdigest()</programlisting>
            </example>
            <para>Be sure to use the full path in your Cloud Files account, from the
                <code>/v1/</code> onward. </para>
            <para>Note that <code>x_delete_at</code> and <code>x_delete_after</code> (see below) are
              not used in signature generation because they are optional attributes.</para>
            <para>The <code>key</code> value is the value of the
                <code>X-Account-Meta-Temp-Url-Key</code> header set for the account. </para>
            <note>
              <para>If you receive the <code>Invalid Signature</code> error, use the
                  <command>HEAD</command> operation described in <olink targetdoc="cf-devguide"
                  targetptr="HEAD_retrieveaccountmeta_v1__account__accountServicesOperations_d1e000"
                  >HEAD_retrieveaccountmeta_v1__account__accountServicesOperations_d1e000</olink> to
                confirm that your key matches the value in the response from the
                  <command>HEAD</command> command.</para>
            </note>
          </listitem>
          <listitem>
            <para><emphasis>(Optional)</emphasis>If you want the uploaded files to be temporary, you
              can set the <code>x-delete-at</code> or <code>x-delete-after</code> attributes by
              adding one of these as a form input.</para>
          </listitem>
          <listitem>
            <para><emphasis>(Required)</emphasis> The <code>type="file"</code> attribute defines the
              form file field. You must have at least one entry to allow your users to select and
              upload a file, but you can add more fields for multiple files. However, the number of
              entries must not exceed the value of <code>max_file_count</code>. Each
                <code>type="file"</code> attribute must have a different name. </para>
            <note>
              <para>The <code>type="file"</code> attribute or attributes must be at the end of the
                form code for Cloud Files to process the uploads correctly. </para>
            </note>
          </listitem>
        </itemizedlist>
      </section>
    </section>
<!--    
    <section xml:id="CORS-d1e1300">
      <title>CORS </title>
      <remark>This is the section as it was added in September of 2013 when the OpenStack info about
        access control headers on objects was removed as suggested by David Goetz. </remark>
      <remark>9/24/2013 - This comes from Ed Leafe but I'm checking to see if it is accurate.
        Openstack info from David Goetz indicates CORS supports both containers and
        objects.</remark>
      <remark>CORS headers only apply at the container level and can only be set on the container. A
        CORS header then governs how requests for objects in that container are handled. </remark>
      <remark>David Goetz provided the link for this information:
        https://github.com/openstack/swift/blob/master/doc/source/cors.rst. </remark>
      <para>Cross-Origin Resource Sharing (CORS) is a mechanism that allows code running in a
        browser to make requests to a domain other than the one from which it originated. CORS
        container headers enable your users to upload files from one website, or origin, to your
        Cloud Files account. When you set the CORS headers on your container, you provide Cloud
        Files with the following information:</para>
      <itemizedlist>
        <listitem>
          <para>Which sites can post to your account</para>
        </listitem>
        <listitem>
          <para>How often your container checks its allowed sites list</para>
        </listitem>
        <listitem>
          <para>What headers to expose to the browser in the request response</para>
        </listitem>
      </itemizedlist>
      <note>
        <para>You use CORS with the following features:<itemizedlist>
            <listitem>
              <para>FormPost (<xref linkend="FormPost-d1a555"
                  xrefstyle="select:label quotedtitle nopage"/>), to enable your users to post to
                your site</para>
            </listitem>
            <listitem>
              <para>TempURL (<xref linkend="TempURL-d1a4450"
                  xrefstyle="select:label quotedtitle nopage"/>), to limit how long users can use a
                given URL</para>
            </listitem>
          </itemizedlist>
        </para>
      </note>
      <para>Cloud Files supports CORS requests to containers and objects. CORS metadata is held on
        the container only. The values given apply to the container itself and all objects within
        it.</para>
      <para>The following table lists the supported container headers. </para>
      <para>
        <table rules="all">
          <caption>Supported CORS container headers</caption>
          <col width="48%"/>
          <col width="52%"/>
          <tbody>
            <tr>
              <td><code>X-Container-Meta-Access-Control-Allow-Origin</code></td>
              <td>Specifies the origins that are allowed to make cross-origin requests, separated by
                a space when there are multiple values. </td>
            </tr>
            <tr>
              <td><code>X-Container-Meta-Access-Control-Max-Age</code></td>
              <td>Specifies the maximum age for the origin to hold the preflight results, in seconds
                (for example, 5, 10, or 1000). </td>
            </tr>
            <tr>
              <td><code>X-Container-Meta-Access-Control-Expose-Headers</code></td>
              <td>Indicates the headers exposed to the browser in the actual request response,
                separated by a space when there are multiple values. </td>
            </tr>
          </tbody>
        </table>
      </para>
      <para>Before a browser issues an actual request, it might issue a preflight request. The
        preflight request is an HTTP <command>OPTIONS</command> call to verify that the origin is
        allowed to make the request. Following is the sequence of actions:</para>
      <orderedlist>
        <listitem>
          <para>The browser makes an <command>OPTIONS</command> request to Cloud Files.</para>
        </listitem>
        <listitem>
          <para>Cloud Files returns either a 200 or 401 status code to the browser based on the
            allowed origins.</para>
        </listitem>
        <listitem>
          <para>If Cloud Files returns 200, the browser makes the actual request
              (<command>DELETE</command>, <command>GET</command>, <command>HEAD</command>,
              <command>POST</command>, <command>PUT</command>) to Cloud Files. </para>
        </listitem>
      </orderedlist>
      <para>When a browser receives a response to an actual request, it exposes only those headers
        listed in the <code>X-Container-Meta-Access-Control-Expose-Headers</code> header. By
        default, Cloud Files returns the following values for this header:</para>
      <itemizedlist>
        <listitem>
          <para>The simple response headers as listed at <link
              xlink:href="http://www.w3.org/TR/cors/#simple-response-header/"
              >www.w3.org/TR/cors/#simple-response-header/</link></para>
        </listitem>
        <listitem>
          <para>The <code>ETag</code>, <code>X-Timestamp</code>, and <code>X-Trans-Id</code>
            headers</para>
        </listitem>
        <listitem>
          <para>All metadata headers (<code>X-Container-Meta-name</code> for containers and
              <code>X-Object-Meta-name</code> for objects)</para>
        </listitem>
        <listitem>
          <para>Headers listed in <code>X-Container-Meta-Access-Control-Expose-Headers</code></para>
        </listitem>
      </itemizedlist>
      <para>To see some CORS JavaScript in action, follow these steps:</para>
      <orderedlist>
        <listitem>
          <para>Download the <xref linkend="Test-CORS-Page-d1003"/>. </para>
        </listitem>
        <listitem>
          <para>Host the page on a web server and note the protocol and hostname (origin) you will
            be using to request the page, for example <code>http://localhost</code>.</para>
        </listitem>
        <listitem>
          <para>Locate a container that you want to query. (The Cloud Files cluster hosting this
            container must have CORS support.)</para>
        </listitem>
        <listitem>
          <para>Append the origin of the test page to the container’s
              <code>X-Container-Meta-Access-Control-Allow-Origin</code> header, using a request
            similar to the following example.</para>
        </listitem>
      </orderedlist>
      <example>
        <title>CORS POST cURL request</title>
        <programlisting language="bash">curl -X POST -H 'X-Auth-Token: <emphasis role="bold">yourAuthToken</emphasis>' \
  -H 'X-Container-Meta-Access-Control-Allow-Origin: http://localhost' \
  http://192.168.56.3:8080/v1/AUTH_test/cont1</programlisting>
      </example>
      <para>At this point, the container is accessible to CORS clients hosted on
          <code>http://localhost</code>. Open the test CORS page in your browser and following these
        steps:</para>
      <orderedlist>
        <listitem>
          <para>Populate the <code>Token</code> field.</para>
        </listitem>
        <listitem>
          <para>Populate the <code>URL</code> field with the URL of either a container or
            object.</para>
        </listitem>
        <listitem>
          <para>Select the request method.</para>
        </listitem>
        <listitem>
          <para>Hit Submit.</para>
        </listitem>
      </orderedlist>
      <para>If the request succeeds, the response header and body are displayed. If the request did
        not succeed, the response status is 0.</para>
      <example xml:id="Test-CORS-Page-d1003" >
        <title>Test CORS page</title>
        <programlisting language="bash">&lt;!DOCTYPE html>
&lt;html>
  &lt;head>
    &lt;meta charset="utf-8">
    &lt;title>Test CORS&lt;/title>
  &lt;/head>
  &lt;body>

    Token&lt;br>&lt;input id="token" type="text" size="64">&lt;br>&lt;br>

    Method&lt;br>
    &lt;select id="method">
        &lt;option value="GET">GET&lt;/option>
        &lt;option value="HEAD">HEAD&lt;/option>
        &lt;option value="POST">POST&lt;/option>
        &lt;option value="DELETE">DELETE&lt;/option>
        &lt;option value="PUT">PUT&lt;/option>
    &lt;/select>&lt;br>&lt;br>

    URL (Container or Object)&lt;br>&lt;input id="url" size="64" type="text">&lt;br>&lt;br>

    &lt;input id="submit" type="button" value="Submit" onclick="submit(); return false;">

    &lt;pre id="response_headers">&lt;/pre>
    &lt;p>
    &lt;hr>
    &lt;pre id="response_body">&lt;/pre>

    &lt;script type="text/javascript">
      function submit() {
          var token = document.getElementById('token').value;
          var method = document.getElementById('method').value;
          var url = document.getElementById('url').value;

          document.getElementById('response_headers').textContent = null;
          document.getElementById('response_body').textContent = null;

          var request = new XMLHttpRequest();

          request.onreadystatechange = function (oEvent) {
              if (request.readyState == 4) {
                  responseHeaders = 'Status: ' + request.status;
                  responseHeaders = responseHeaders + '\nStatus Text: ' + request.statusText;
                  responseHeaders = responseHeaders + '\n\n' + request.getAllResponseHeaders();
                  document.getElementById('response_headers').textContent = responseHeaders;
                  document.getElementById('response_body').textContent = request.responseText;
              }
          }

          request.open(method, url);
          request.setRequestHeader('X-Auth-Token', token);
          request.send(null);
      }
    &lt;/script>

  &lt;/body>
&lt;/html>
</programlisting>
      </example>
    </section> -->
    <section xml:id="CORS-d1e1300">
      <title>CORS </title>
      <remark>This is the section is a rewrite sent to David Goetz for review on 9/3/2014 after Ken
        Perkins of the DRG sent email wanting the doc updated to include support for setting the
        access headers on object as noted in the OpenStack Object Storage referencefor CORS. David
        Goetz hesitant to include all of this doc but it does reflect how things currently work.
        David is planning some dev changes so that container-level  headers are  the only way to do
        this - not object-level. But there is currently no ETA on the dev changes. </remark>
      <para>Cross-Origin Resource Sharing (CORS) is a mechanism that allows code running in a
        browser to make requests to a domain other than the one from which it originated by using
        HTTP headers, such as those assigned by Cloud Files API requests.</para>
      <para>Cloud Files supports CORS requests to containers and objects.</para>
      <para>For more information about CORS and the access control headers, see <link
          xlink:href="http://www.w3.org/TR/access-control/"
        >www.w3.org/TR/access-control/</link>.</para>
      <section xml:id="CORS_Container_Headers-d1e1300">
        <title>CORS headers for containers</title>
        <remark>David Goetz provided the link for this information:
          https://github.com/openstack/swift/blob/master/doc/source/cors.rst. </remark>
        <para>Container-level headers for CORS are used for the following Cloud Files features:<itemizedlist>
            <listitem>
              <para>FormPost (<xref linkend="FormPost-d1a555"
                  xrefstyle="select:label quotedtitle nopage"/>), to enable your users to post to
                your site</para>
            </listitem>
            <listitem>
              <para>TempURL (<xref linkend="TempURL-d1a4450"
                  xrefstyle="select:label quotedtitle nopage"/>), to limit how long users can use a
                given URL</para>
            </listitem>
          </itemizedlist></para>
        <note>
          <para>Container-level headers for CORS are not inherited for use with a CDN. For
            information about using object-level headers, which enable CORS to work over a CDN, see
              <xref linkend="Assigning_CORS_Headers_to_Requests-d1e2120"/>.</para>
        </note>
        <para>CORS container headers enable your users to upload files from one website, or origin,
          to your Cloud Files account. When you set the CORS headers on your container, you provide
          Cloud Files with the following information:<itemizedlist>
            <listitem>
              <para>Which sites can post to your account</para>
            </listitem>
            <listitem>
              <para>How often your container checks its allowed sites list</para>
            </listitem>
            <listitem>
              <para>What headers to expose to the browser in the request response</para>
            </listitem>
          </itemizedlist>
        </para>
        <para>CORS metadata is held on the container only. The values given apply to the container
          itself and all objects within it.</para>
        <para>The following table lists the container-level headers: </para>
        <para>
          <table rules="all">
            <caption>CORS container-level headers</caption>
            <col width="48%"/>
            <col width="52%"/>
            <tbody>
              <tr>
                <td><code>X-Container-Meta-Access-Control-Allow-Origin</code></td>
                <td>Specifies the origins that are allowed to make cross-origin requests, separated
                  by a space when there are multiple values. </td>
              </tr>
              <tr>
                <td><code>X-Container-Meta-Access-Control-Max-Age</code></td>
                <td>Specifies the maximum age for the origin to hold the preflight results, in
                  seconds (for example, 5, 10, or 1000). </td>
              </tr>
              <tr>
                <td><code>X-Container-Meta-Access-Control-Allow-Headers</code></td>
                <td>Specifies the headers that are allowed in the actual request, separated by a
                  space when there are multiple values.</td>
              </tr>
              <tr>
                <td><code>X-Container-Meta-Access-Control-Expose-Headers</code></td>
                <td>Indicates the headers exposed to the browser in the actual request response,
                  separated by a space when there are multiple values. </td>
              </tr>
            </tbody>
          </table>
        </para>
        <para>To view the values for these headers, use the <command>HEAD</command> operation to show
          container metadata. To delete the metadata, use the <command>DELETE</command> operation to
          delete container metadata. Both of these operations are described in <olink
            targetdoc="cf-devguide" targetptr="containerServicesOperations_d1e000">“Container
            services”</olink>.</para>
        <para>Before a browser issues an actual request, it might issue a preflight request. The
          preflight request is an HTTP <command>OPTIONS</command> call to verify that the origin is
          allowed to make the request. Following is the sequence of actions:</para>
        <orderedlist>
          <listitem>
            <para>The browser makes an <command>OPTIONS</command> request to Cloud Files.</para>
          </listitem>
          <listitem>
            <para>Cloud Files returns either a 200 or 401 status code to the browser based on the
              allowed origins.</para>
          </listitem>
          <listitem>
            <para>If Cloud Files returns 200, the browser makes the actual request
                (<command>DELETE</command>, <command>GET</command>, <command>HEAD</command>,
                <command>POST</command>, <command>PUT</command>) to Cloud Files. </para>
          </listitem>
        </orderedlist>
        <para>When a browser receives a response to an actual request, it exposes only those headers
          listed in the <code>X-Container-Meta-Access-Control-Expose-Headers</code> header. By
          default, Cloud Files returns the following values for this header:</para>
        <itemizedlist>
          <listitem>
            <para>The simple response headers as listed at <link
                xlink:href="http://www.w3.org/TR/cors/#simple-response-header/"
                >www.w3.org/TR/cors/#simple-response-header/</link></para>
          </listitem>
          <listitem>
            <para>The <code>ETag</code>, <code>X-Timestamp</code>, and <code>X-Trans-Id</code>
              headers</para>
          </listitem>
          <listitem>
            <para>All metadata headers (<code>X-Container-Meta-*</code> for containers and
                <code>X-Object-Meta-*</code> for objects)</para>
          </listitem>
          <listitem>
            <para>Headers listed in
              <code>X-Container-Meta-Access-Control-Expose-Headers</code></para>
          </listitem>
        </itemizedlist>
        <para>To see some CORS JavaScript in action, follow these steps:</para>
        <orderedlist>
          <listitem>
            <para>Download the <xref linkend="Test-CORS-Page-d1003"/>. </para>
          </listitem>
          <listitem>
            <para>Host the page on a web server and note the protocol and hostname (origin) you will
              be using to request the page, for example <code>http://localhost</code>.</para>
          </listitem>
          <listitem>
            <para>Locate a container that you want to query. (The Cloud Files cluster hosting this
              container must have CORS support.)</para>
          </listitem>
          <listitem>
            <para>Append the origin of the test page to the container’s
                <code>X-Container-Meta-Access-Control-Allow-Origin</code> header, using a request
              similar to the following example.</para>
          </listitem>
        </orderedlist>
        <example>
          <title>Example of a CORS POST cURL request</title>
          <programlisting language="bash">curl -X POST -H 'X-Auth-Token: <emphasis role="bold">yourAuthToken</emphasis>' \
  -H 'X-Container-Meta-Access-Control-Allow-Origin: http://localhost' \
   https://storage101.dfw1.clouddrive.com/v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880123/MyContainer </programlisting>
        </example>
        <para>At this point, the container is accessible to CORS clients hosted on
            <code>http://localhost</code>. Open the test CORS page in your browser and following
          these steps:</para>
        <orderedlist>
          <listitem>
            <para>Populate the <code>Token</code> field.</para>
          </listitem>
          <listitem>
            <para>Populate the <code>URL</code> field with the URL of either a container or
              object.</para>
          </listitem>
          <listitem>
            <para>Select the request method.</para>
          </listitem>
          <listitem>
            <para>Hit Submit.</para>
          </listitem>
        </orderedlist>
        <para>If the request succeeds, the response header and body are displayed. If the request
          did not succeed, the response status is 0.</para>
        <example xml:id="Test-CORS-Page-d1003">
          <title>Test CORS page</title>
          <programlisting language="bash">&lt;!DOCTYPE html>
&lt;html>
  &lt;head>
    &lt;meta charset="utf-8">
    &lt;title>Test CORS&lt;/title>
  &lt;/head>
  &lt;body>

    Token&lt;br>&lt;input id="token" type="text" size="64">&lt;br>&lt;br>

    Method&lt;br>
    &lt;select id="method">
        &lt;option value="GET">GET&lt;/option>
        &lt;option value="HEAD">HEAD&lt;/option>
        &lt;option value="POST">POST&lt;/option>
        &lt;option value="DELETE">DELETE&lt;/option>
        &lt;option value="PUT">PUT&lt;/option>
    &lt;/select>&lt;br>&lt;br>

    URL (Container or Object)&lt;br>&lt;input id="url" size="64" type="text">&lt;br>&lt;br>

    &lt;input id="submit" type="button" value="Submit" onclick="submit(); return false;">

    &lt;pre id="response_headers">&lt;/pre>
    &lt;p>
    &lt;hr>
    &lt;pre id="response_body">&lt;/pre>

    &lt;script type="text/javascript">
      function submit() {
          var token = document.getElementById('token').value;
          var method = document.getElementById('method').value;
          var url = document.getElementById('url').value;

          document.getElementById('response_headers').textContent = null;
          document.getElementById('response_body').textContent = null;

          var request = new XMLHttpRequest();

          request.onreadystatechange = function (oEvent) {
              if (request.readyState == 4) {
                  responseHeaders = 'Status: ' + request.status;
                  responseHeaders = responseHeaders + '\nStatus Text: ' + request.statusText;
                  responseHeaders = responseHeaders + '\n\n' + request.getAllResponseHeaders();
                  document.getElementById('response_headers').textContent = responseHeaders;
                  document.getElementById('response_body').textContent = request.responseText;
              }
          }

          request.open(method, url);
          request.setRequestHeader('X-Auth-Token', token);
          request.send(null);
      }
    &lt;/script>

  &lt;/body>
&lt;/html>
</programlisting>
        </example>
      </section>
      <section xml:id="Assigning_CORS_Headers_to_Requests-d1e2120">
        <title>CORS headers for objects</title>
        <remark>cyr - From "Assign CORS headers to requests" is in the OpenStack Object Storage
          Reference - headers for only objects. </remark>
        <para>You can set object-level headers for CORS. Currently, using object-level headers
          enables CORS to work over a CDN (<xref linkend="CDN-Enabled_Containers-d1e524"
            xrefstyle="select:label quotedtitle nopage"/>).</para>
        <para>The following table lists the object-level headers:</para>
        <para>
          <table rules="all">
            <caption>CORS object-level headers</caption>
            <col width="30%"/>
            <col width="70%"/>
            <tbody>
              <tr>
                <td><code>Access-Control-Allow-Origin</code></td>
                <td>Specifies the origins that are allowed to make cross-origin requests, separated
                  by a space when there are multiple values. </td>
              </tr>
              <tr>
                <td><code>Access-Control-Max-Age</code></td>
                <td>Specifies the maximum age for the origin to hold the preflight results, in
                  seconds (for example, 5, 10, or 1000). </td>
              </tr>
              <tr>
                <td><code>Access-Control-Expose-Headers</code></td>
                <td>Specifies the headers exposed to the browser in the actual request response,
                  separated by a space when there are multiple values. </td>
              </tr>
              <tr>
                <td><code>Access-Control-Allow-Credentials</code></td>
                <td>Indicates whether or not the response to the request can be exposed when the
                  credentials flag is true.  When used as part of a response to a preflight request,
                  this indicates whether or not the actual request can be made using credentials. 
                  Note that simple GET requests are not preflighted, and so if a request is made for
                  a resource with credentials, if this header is not returned with the resource, the
                  response is ignored by the browser and not returned to web content.</td>
              </tr>
              <tr>
                <td><code>Access-Control-Allow-Methods</code></td>
                <td>Specifies the method or methods allowed when accessing the resource.  This is
                  used in response to a preflight request. </td>
              </tr>
              <tr>
                <td><code>Access-Control-Request-Headers</code></td>
                <td>Used when issuing a preflight request to let the server know what HTTP headers
                  will be used when the actual request is made.</td>
              </tr>
              <tr>
                <td><code>Access-Control-Request-Method</code></td>
                <td>Used when issuing a preflight request to let the server know what HTTP method
                  will be used when the actual request is made.</td>
              </tr>
              <tr>
                <td><code>Origin</code></td>
                <td>Indicates the origin of the cross-site access request or preflight request.</td>
              </tr>
            </tbody>
          </table>
        </para>
        <para>The following example assigns the file origin to the <code>Origin</code> header to
          indicate where the file came from.  Doing so allows you to provide security that requests
          to your Cloud Files repository are indeed from the correct origination.</para>
        <example>
          <title>Assign CORS header request for an object</title>
          <programlisting language="text">
  PUT /<replaceable>apiVersion</replaceable>/<replaceable>yourAccountID</replaceable>/<replaceable>containerName</replaceable>/<replaceable>objectName</replaceable> HTTP/1.1
  Host: storage.clouddrive.com
  X-Auth-Token: <replaceable>yourAuthToken</replaceable>
  Origin: http://storage.clouddrive.com
                     </programlisting>
        </example>
      </section>
    </section> 
  </chapter>
<!-- <remark 4/30/2014 cyr: removing due to publishing the CF Getting Started Guide, which has this and more.</remark>  
  <chapter xml:id="Troubleshooting-d1e2855">
    <title>Examples Using cURL</title>
    <info>
      <raxm:metadata
        xmlns:raxm="http://docs.rackspace.com/api/metadata">
        <raxm:type>concept</raxm:type>
        <raxm:product version="v1">files</raxm:product>
        <raxm:priority>5</raxm:priority>
      </raxm:metadata>
    </info>
    <para>This section introduces the cURL command-line utility and
      demonstrates interacting with the REST interfaces through that
      utility.</para>
    <para>When you use cURL, remember the following Cloud Files requirements:</para>
    <itemizedlist>
      <listitem>
        <para>Object and container names must be URL-encoded and UTF-8 encoded. Object names must be
          less than 1024 bytes in length after URL-encoding. For example, an object name of
            <code>C++final(v2).txt</code> would be URL-encoded as
            <code>C%2B%2Bfinal%28v2%29.txt</code> and would therefore be 24 bytes in length rather
          than the expected 16.</para>
      </listitem>
      <listitem>
        <para>Tokens expire after 24 hours. Be sure you request a new token programmatically only
          when the one you have is expired. </para>
      </listitem>
    </itemizedlist>
    <section xml:id="Using_cURL-d1e2863">
      <title>cURL Options</title>
      <para>cURL is a command-line tool that you can use to interact
        with REST interfaces. cURL lets you to transmit and receive
        HTTP requests and responses from the command line or a shell
        script, which enables you to work with the API directly
        (without using one of the language-specific APIs). It is
        available for Linux® distributions, Mac OS X® , and Windows®.
        For more information about cURL, see <link
          xlink:href="http://curl.haxx.se/"
        >http://curl.haxx.se</link>. </para>
      <para>The following cURL command-line options are used in the chapter:</para>
      <variablelist>
        <title>cURL Command-Line Options</title>
        <varlistentry>
          <term><option>-X METHOD</option></term>
          <listitem>
            <para>Specify the HTTP method to request (&GET;, &HEAD; , &DELETE;, &POST;,
              &PUT;).</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><option>-D</option></term>
          <listitem>
            <para>Dump HTTP response headers to terminal output (stdout).</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><option>-H HEADER</option></term>
          <listitem>
            <para>Specify an HTTP header in the request.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section xml:id="Authentication-d1e2929">
      <title>Authentication with cURL</title>
      <para>To use the REST API, you first need to obtain an authorization token, which you need to
        pass in for each request using the <code>X-Auth-Token</code> header. </para>
      <para>The following examples demonstrate how to use cURL to obtain the authorization token and
        the URL of the storage system. Note that your account can be based in either the US or the
        UK. This is not determined by your physical location, but by the location of the Rackspace
        retail site where the account was created. </para>
      <para>This example uses the US-based URL
          <code>https://identity.api.rackspacecloud.com/v2.0</code>.</para>
      <example>
        <title>cURL Authenticate Request with Username and API Key Credentials: JSON</title>
        <screen language="bash">
<command>curl -k -X POST https://identity.api.rackspacecloud.com/v2.0/tokens -d 
'{ "auth":{ "RAX-KSKEY:apiKeyCredentials":{ "username":"yourUserName", "apiKey":"yourApiKey" } } }' -H 
"Content-type: application/json" </command>
 </screen>
      </example>
        <example>
          <title>Authentication Response: JSON</title>
          <screen language="bash">
   <computeroutput>{
    "access": {
        "serviceCatalog": [
            {
                "endpoints": [
                    {
                        "publicURL": "https://cdn1.clouddrive.com/v1/<replaceable>yourAccountId</replaceable>",
                        "region": "DFW",
                        ...
                    }
                    ...
                ],
                "name": "cloudFilesCDN",
                "type": "rax:object-cdn"
            },
            {
                "endpoints": [
                    {
                        "internalURL": "https://snet-storage101.dfw1.clouddrive.com/v1/<replaceable>yourAccountId</replaceable>",
                        "publicURL": "https://storage101.dfw1.clouddrive.com/v1/<replaceable>yourAccountId</replaceable>",
                        "region": "DFW",
                        ...
                    }
                    ...
                ],
                "name": "cloudFiles",
                "type": "object-store"
            }
            ...
        ],
        "token": {
            "RAX-AUTH:authenticatedBy": [
                "APIKEY"
            ],
            "expires": "2013-10-29T05:36:28.683-05:00",
            "id": "&lt;auth_token>",
        }
        ...
    }
}</computeroutput></screen>
        </example>
      <para>The storage URL, CDN management URL, and authentication
        token are returned in the response. After authentication, you
        can use cURL to perform &GET;, &HEAD;, &DELETE;, &POST; and
        &PUT; requests on the storage and CDN services.</para>
      <para>While an authentication token lasts, you can continue to perform requests.
          <phrase>However, after a token expires, using it returns a 401 (Unauthorized) HTTP status
          code. Given that a token is good for 24 hours, even long-running jobs do not need to
          re-authenticate on every request. You do not need to request another authentication token
          again until the existing one expires.</phrase> At that point, you must obtain another
        token. The best scalable process flow is as follows:<orderedlist>
          <listitem>
            <para>Begin requests by going to identity.api.rackspace.com for an authentication token.
            </para>
          </listitem>
          <listitem>
            <para>Send requests to the Cloud Files service access endpoints and set the
                <code>X-Auth-Token</code> header with the authentication token obtained in step
              1.</para>
          </listitem>
          <listitem>
            <para>Repeat step 2 using the same authentication token until either the job finishes or
              you get a result code of 401 (Unauthorized). </para>
          </listitem>
        </orderedlist><itemizedlist>
          <listitem>
            <para>If the job finishes, you can allow the token to expire with no further
              action.</para>
          </listitem>
          <listitem>
            <para>If you get a 401 response code, send a request to identity.api.rackspacecloud.com
              to get a new authentication token to use in the Cloud Files <code>X-Auth-Token</code>
              header in your request.</para>
          </listitem>
        </itemizedlist>A Python-based example of how to check for errors and re-authenticate upon
        receiving an error is located in the OpenStack Swift project in client.py, which is freely
        available. </para>
    </section>
    <section xml:id="Determining_Storage_Usage-d1e2976">
      <title>Determining Storage Usage with cURL</title>
      <para>You can send a &HEAD; request to the storage service to determine how much data you have
        stored in the system and the number of containers you are using. Use the <code>-X</code>
        switch to specify the correct HTTP method and the <code>-D</code> switch to dump the HTTP
        response headers to terminal output (stdout).</para>
      <example>
        <title>cURL Get Storage Space</title>
        <screen language="bash">
   <command>curl</command> <option>-X HEAD</option> <option>-D</option> - \
        <option>-H "X-Auth-Token: f064c46a782c444cb4ba4b6434288f7c"</option> \
        <uri>https://storage.clouddrive.com/v1/CF_xer7_343</uri>
                      </screen>
        <screen language="bash">
 <computeroutput>HTTP/1.1 204 No Content
  X-Account-Object-Count: 4943
  X-Account-Bytes-Used: 25603957646
  X-Account-Container-Count: 151
  Accept-Ranges: bytes
  Content-Length: 0
  X-Trans-Id: txl5d1b08e3c1540at8cceda42acc723e4
  Date: Wed, 07 Sep 2011 18:48:15 GMT
                      </computeroutput></screen>
      </example>
      <para>The HTTP request must include a header to specify the
        authentication token. The HTTP headers in the response
        indicate the number of containers in this storage account and
        the total bytes stored for the entire account.</para>
    </section>
    <section xml:id="Creating_a_Storage_Container-d1e3026">
      <title>Creating a Storage Container with cURL</title>
      <para> Before uploading any data to Cloud Files, you must create a storage container. You do
        this with a &PUT; request. </para>
      <example>
        <title>cURL Create Storage Container</title>
        <screen language="bash">
   <command>curl</command> <option>-X PUT</option> \
        <option>-H "X-Auth-Token: f064c46a782c444cb4ba4b6434288f7c"</option> \
        <uri>https://storage.clouddrive.com/v1/CF_xer7_343/images</uri>
                      </screen>
        <screen>
   <computeroutput>HTTP/1.1 201 Created
   Content-Length: 18
   Content-Type: text/html; charset=UTF-8
   X-Trans-Id: txs56dc5b74f91419480ba485348057bfd
   Date: Wed, 07 Sep 2011 18:52:30 GMT

   </computeroutput></screen>
      </example>
      <para>An HTTP status code of 201 (Created) indicates that the container was successfully
        created.</para>
    </section>
    <section xml:id="Uploading_a_Storage_Object-d1e3067">
      <title>Uploading a Storage Object with cURL</title>
      <para>After creating a container, you can upload a local file to it. For this example, upload
        a screenshot image. The <code>-T</code> switch specifies the full path to the local file to
        upload. Note that if you intend to distribute this object through the CDN you must ensure
        that the object's <code>Content-Type</code> is set correctly. This is the mechanism by which
        a user's web browser knows how to display the file or launch a helper application to view
        the file.</para>
      <example>
        <title>cURL Upload Storage Object</title>
        <screen>
   <command>curl</command> <option>-X PUT</option> <option>-T screenies/wow1.jpg</option> <option>-D</option> - \
     <option>-H "ETag: 805120ec285a7ed28f74024422fe3594"</option> \
     <option>-H "Content-Type: image/jpeg"</option> \
     <option>-H "X-Auth-Token: f064c46a782c444cb4ba4b6434288f7c"</option> \
     <option>-H "X-Object-Meta-Screenie: Mel visits Outland"</option> \
     <uri>https://storage.clouddrive.com/v1/CF_xer7_343/images/wow1.jpg</uri>
                      </screen>
        <screen>
   <computeroutput>HTTP/1.1 201 Created
   Date: Thu, 09 Aug 2012 17:03:36 GMT
   Content-Length: 0
   ETag: 805120ec285a7ed28f74024422fe3594 
   Content-Type: text/plain
   </computeroutput></screen>
      </example>
    </section>
    <section xml:id="CDN-Enabling_the_Container-d1e3123">
      <title>CDN-Enabling the Container with cURL</title>
      <para>After creating a container and storing a file in it, you can choose to share the file.
        Because the data in Cloud Files is private, you can share your files through the CDN. To
        CDN-enable a container, issue a &PUT; request against the CDN management service. The
        default TTL is 72 hours (259200 seconds), with a minimum of 15 minutes (900 seconds) and a
        maximum of 1 year (31536000 seconds). Note that the target URL specifies the CDN system, not
        the authorization system.</para>
    <remark> 4/24/2014 cyr: David Goetz requested when he reviewed the GSG setting the maximum value for TTL to 1 year throughout the doc, which I did today.</remark>
        <note>
        <title>Note</title>
        <para>On August 13, 2012, the maximum TTL was revised to 31536000 (one year). If you set new
          TTL values to a greater time frame, your object will still expire at the one-year mark.
          However, if you already had a longer TTL value set on an object, it will expire at the
          time you had originally set. </para>
      </note>  
      <example>
        <title>cURL CDN-Enable Container</title>
        <screen language="bash">
   <command>curl</command> <option>-X PUT</option> <option>-D</option> - \
        <option>-H "X-Auth-Token: f064c46a782c444cb4ba4b6434288f7c"</option> \
        <option>-H "X-CDN-Enabled: True"</option> \
        <option>-H "X-TTL: 259200"</option> \
        <uri>https://cdn.clouddrive.com/v1/CF_xer7_343/images</uri>
                      </screen>
        <screen>
   <computeroutput>
  HTTP/1.1 204 No Content
  X-Cdn-Ssl-Uri: https://83c49b9a2f7ad18250b3-346eb45fd42c58ca13011d659bfc1ac1. ssl.cf0.rackcdn.com
  X-Ttl: 259200
  X-Cdn-Uri: http://081e40d3ee1cec5f77bf-346eb45fd42c58ca13011d659bfc1ac1. r49.cf0.rackcdn.com
  X-Cdn-Enabled: True
  X-Log-Retention: False
  X-Cdn-Streaming-Uri: http://084cc2790632ccee0a12-346eb45fd42c58ca13011d659bfc1ac1. r49.stream.cf0.rackcdn.com
  X-Trans-Id: tx82a6752e00424edb9c46fa2573132e2c
  Content-Length: 0
        </computeroutput></screen>
      </example>
      <para>When the container is CDN-enabled, the service returns its public URL in the
          <code>X-Cdn-Uri</code> header of the response, and returns the SSL URL in the
          <code>X-Cdn-Ssl-Uri</code> header of the response. You can combine the public URL with the
        object name to access the file through the CDN, or you can use the SSL URL with the object
        name to access the file over a secure SSL connection through the CDN.</para>
      <para>You can verify the CDN's cache settings that you specified with your TTL value by
        sending a &GET; request to the object's CDN URL and viewing the response headers. The TTL
        value that you specify translates to the <code>Expires</code> and <code>Cache-Control</code>
        headers of the CDN's cached object.</para>
      <para>The following cURL command issues a &GET; request that downloads the entire file but
        writes it to <code>/dev/null</code>, a data sink that does not actually save the content to
        your local drive (this convention is only valid on systems based on UNIX).</para>
      <example>
        <title>cURL Download a File</title>
        <screen language="bash">
   <command>curl</command> <option>-s</option> <option>-D</option> <option>GET</option> \
     <uri>http://80745c48926cd286a5a0-48261ebe0e4c795a565ece6b9cca2fe8.r10.cf1.rackcdn.com/wow1.jpg</uri> \
     <option>-O /dev/null</option>
                      </screen>
        <screen>
   <computeroutput>HTTP/1.1 200 OK
   Date: Thu, 06 Aug 2009 01:40:12 GMT
   Expires: Fri, 07 Aug 2009 01:40:12 GMT
   Last-Modified: Thu, 09 Jul 2009 17:14:46 GMT
   Cache-Control: max-age=86400, public
   ETag: b20237bff6828976d2eb348e1ca8adae
   Content-Length: 1255764
   Content-Type: image/jpeg
   Connection: keep-alive
   </computeroutput></screen>
      </example>
    </section>
    <section xml:id="Other_cURL_Commands-d1e3222">
      <title>Other cURL Commands</title>
      <para>You can issue any of the REST methods defined for Cloud
        Files with the cURL utility. For example, you can use cURL to
        send &POST; and &DELETE; requests even though no specific
        examples are provided.</para>
      <para>Note that generally each time <code>curl</code> is invoked to perform an operation, a
        separate TCP/IP and SSL connection is created and thrown away. The language APIs, in
        contrast, are designed to re-use connections between operations and therefore provide much
        better performance. We recommend that you use one of the language APIs in your production
        applications and limit cURL to quick-and-easy testing and troubleshooting.</para>
    </section>
  </chapter>
--> 
  <glossary>
    <title>Glossary</title>
    <glossentry xmlns:m="http://www.w3.org/1998/Math/MathML">
      <glossterm>Account</glossterm>
      <glossdef>
        <para>The portion of the Cloud Files system designated for your use. The Cloud Files system
          is designed to be used by many different customers, and your user account is your portion
          of it. Your user account is your slice of the Cloud Files system. You must identify
          yourself with a valid user name and your API access key. After you are authenticated, your
          have full read/write access to the objects (files) stored under your account.</para>
      </glossdef>
    </glossentry>
    <glossentry xmlns:m="http://www.w3.org/1998/Math/MathML">
      <glossterm>Application program interface (API)</glossterm>
      <glossdef>
        <para>A set of routines, protocols, and tools for building software applications. </para>
      </glossdef>
    </glossentry>
    <glossentry xmlns:m="http://www.w3.org/1998/Math/MathML">
      <glossterm>Authentication</glossterm>
      <glossdef>
        <para>The process if identifying yourself to the Rackspace Cloud Identity service to receive
          Cloud Files connection parameters and an authentication token. While the authentication
          token is valid (which in most cases is 24 hours), you must pass it to Cloud Files to
          perform all Cloud Files operations.</para>
      </glossdef>
    </glossentry>
    <glossentry xmlns:m="http://www.w3.org/1998/Math/MathML">
      <glossterm>CDN-enabled containers</glossterm>
      <glossdef>
        <para>Containers that serve content through the Akamai content delivery network (CDN). When
          a container is CDN-enabled, any files in the container are publicly accessible and do not
          require an authentication token for read access. However, uploading content into a
          CDN-enabled container is a secure operation and requires a valid authentication token.
          Each published container has a unique URL that can be combined with its object name and
          openly distributed in web pages, emails, or other applications. For example, a CDN-enabled
          container named <code>photos</code> can be referenced as
            <code>http://80745c48926cd286a5a0-48261ebe0e4c795a565ece6b9cca2fe8.r10.cf1.rackcdn.com</code>.
          If that container houses an image called <code>mydog.jpg</code>, that image can be served
          by the Akamai CDN with the full URL of
            <code>http://80745c48926cd286a5a0-48261ebe0e4c795a565ece6b9cca2fe8.r10.cf1.rackcdn.com/mydog.jpg.</code>. </para>
      </glossdef>
    </glossentry>
    <glossentry xmlns:m="http://www.w3.org/1998/Math/MathML">
      <glossterm>Container</glossterm>
      <glossdef>
        <para>A storage compartment that provides a way for you to
          organize data. A container is similar to a folder in Windows
          or a directory in UNIX. The primary difference between a
          container and these other file system concepts is that
          containers cannot be nested. </para>
      </glossdef>
    </glossentry>
    <glossentry xmlns:m="http://www.w3.org/1998/Math/MathML">
      <glossterm>Content delivery network (CDN)</glossterm>
      <glossdef>
        <para>A system of distributed servers (network) that delivers web pages and other web
          content to a user based on the geographic locations of the user, the origin of the web
          page, and a content delivery server. </para>
      </glossdef>
    </glossentry>
    <glossentry xmlns:m="http://www.w3.org/1998/Math/MathML">
      <glossterm>Language-specific API</glossterm>
      <glossdef>
        <para>APIs that provide a layer of abstraction on top of the base REST API, enabling
          programmers to work with a container and object model instead of working directly with
          HTTP requests and responses. Language-specific APIs in several popular languages are
          available for Cloud Files.</para>
      </glossdef>
    </glossentry>
    <glossentry xmlns:m="http://www.w3.org/1998/Math/MathML">
      <glossterm>Metadata</glossterm>
      <glossdef>
        <para> Optional information that you can assign to Cloud Files accounts, containers, and
          objects through the use of a metadata header.</para>
      </glossdef>
    </glossentry>
    <glossentry xmlns:m="http://www.w3.org/1998/Math/MathML">
      <glossterm>Middleware</glossterm>
      <glossdef>
        <para> Software that connects two otherwise separate applications. For example, there are a
          number of middleware products that link a database system to a web server.</para>
      </glossdef>
    </glossentry>
    <glossentry xmlns:m="http://www.w3.org/1998/Math/MathML">
      <glossterm>Operations</glossterm>
      <glossdef>
        <para>The actions you perform against your account in Cloud Files, such as creating or
          deleting containers. Operations are performed via the REST web service API or a
          language-specific API.</para>
      </glossdef>
    </glossentry>
    <glossentry xmlns:m="http://www.w3.org/1998/Math/MathML">
      <glossterm>Private container</glossterm>
      <glossdef>
        <para>A container that is only accessible by the account holder. </para>
      </glossdef>
    </glossentry>
    <glossentry xmlns:m="http://www.w3.org/1998/Math/MathML">
      <glossterm>Pseudo directories</glossterm>
      <glossdef>
        <para>A hierarchical structure within a single Cloud Files container created adding forward
          slash characters (<code xmlns:m="http://www.w3.org/the key 1998/Math/MathML">/</code>) in
          the object name.</para>
      </glossdef>
    </glossentry>
    <glossentry xmlns:m="http://www.w3.org/1998/Math/MathML">
      <glossterm>Public container</glossterm>
      <glossdef>
        <para>A CDN-enabled container that is publicly accessible. </para>
      </glossdef>
    </glossentry>
    <glossentry xmlns:m="http://www.w3.org/1998/Math/MathML">
      <glossterm>REST</glossterm>
      <glossdef>
        <para>REST, short for Representational State Transfer, is an
          architectural style for large-scale software design. </para>
      </glossdef>
    </glossentry>
    <glossentry xmlns:m="http://www.w3.org/1998/Math/MathML">
      <glossterm>Segmentation</glossterm>
      <glossdef>
        <para>The process of segmenting a large file into a number of smaller files for uploading to
          Cloud Files. Cloud Files limits the size of a single uploaded object. By default this
          limit is 5 GB. However, the download size of a single object is virtually unlimited with
          the use of segmentation. Segments of the larger object are uploaded and a special manifest
          file is created that, when downloaded, sends all the segments concatenated as a single
          object. Segmentation also offers much greater upload speed with the possibility of
          parallel uploads of the segments.</para>
      </glossdef>
    </glossentry>
    <glossentry xmlns:m="http://www.w3.org/1998/Math/MathML">
      <glossterm>TTL</glossterm>
      <glossdef>
        <para>Time-to-live value.</para>
      </glossdef>
    </glossentry>
  </glossary>
</book>
